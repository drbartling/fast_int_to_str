
# 1 "../src/fast_int_to_str.c"

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.38\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 92 "../src/fast_int_to_str.h"
void FAST_IntToStr(char str[], int32_t num);
void FAST_UintToStr(char str[], uint32_t num);

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.38\include\stdbool.h"
typedef unsigned char bool;

# 46 "../src/fast_int_to_str.c"
typedef union {
uint32_t u32;
uint16_t u16;
uint8_t u8;
} fast_int_t;

# 163
void FAST_IntToStr(char str[], int32_t num) {
if (0 > num) {
*str = '-';
str++;
num = -num;
}
FAST_UintToStr(str, num);
}

void FAST_UintToStr(char str[], uint32_t num) {
fast_int_t fNum;
fNum.u32 = num;
char ch = 0;
bool leedIn = 1;

if ((255) >= num)
{
goto U8;
} else if ((65535U) >= num) {
goto U16;
} else {
goto U32;
}

U32:
if (fNum.u32 >= 4000000000UL) {
fNum.u32 -= 4000000000UL;
ch = 4;
} else {
if (fNum.u32 >= 2000000000UL) {
fNum.u32 -= 2000000000UL;
ch = 2;
}
if (fNum.u32 >= 1000000000UL) {
fNum.u32 -= 1000000000UL;
ch |= 1;
}
}
if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };

ch = 0; if (fNum.u32 >= 8*100000000UL) { fNum.u32 -= 8*100000000UL; ch = (char) 8; } else { if (fNum.u32 >= 4*100000000UL) { fNum.u32 -= 4*100000000UL; ch = (char) 4; } if (fNum.u32 >= 2*100000000UL) { fNum.u32 -= 2*100000000UL; ch |= (char) 2; } } if (fNum.u32 >= 1*100000000UL) { fNum.u32 -= 1*100000000UL; ch |= (char) 1; };
if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };

ch = 0; if (fNum.u32 >= 8*10000000UL) { fNum.u32 -= 8*10000000UL; ch = (char) 8; } else { if (fNum.u32 >= 4*10000000UL) { fNum.u32 -= 4*10000000UL; ch = (char) 4; } if (fNum.u32 >= 2*10000000UL) { fNum.u32 -= 2*10000000UL; ch |= (char) 2; } } if (fNum.u32 >= 1*10000000UL) { fNum.u32 -= 1*10000000UL; ch |= (char) 1; };
if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };

ch = 0; if (fNum.u32 >= 8*1000000UL) { fNum.u32 -= 8*1000000UL; ch = (char) 8; } else { if (fNum.u32 >= 4*1000000UL) { fNum.u32 -= 4*1000000UL; ch = (char) 4; } if (fNum.u32 >= 2*1000000UL) { fNum.u32 -= 2*1000000UL; ch |= (char) 2; } } if (fNum.u32 >= 1*1000000UL) { fNum.u32 -= 1*1000000UL; ch |= (char) 1; };
if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };

ch = 0; if (fNum.u32 >= 8*100000UL) { fNum.u32 -= 8*100000UL; ch = (char) 8; } else { if (fNum.u32 >= 4*100000UL) { fNum.u32 -= 4*100000UL; ch = (char) 4; } if (fNum.u32 >= 2*100000UL) { fNum.u32 -= 2*100000UL; ch |= (char) 2; } } if (fNum.u32 >= 1*100000UL) { fNum.u32 -= 1*100000UL; ch |= (char) 1; };
if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };

U16:
ch = 0; if (fNum.u32 >= 8*10000UL) { fNum.u32 -= 8*10000UL; ch = (char) 8; } else { if (fNum.u32 >= 4*10000UL) { fNum.u32 -= 4*10000UL; ch = (char) 4; } if (fNum.u32 >= 2*10000UL) { fNum.u32 -= 2*10000UL; ch |= (char) 2; } } if (fNum.u32 >= 1*10000UL) { fNum.u32 -= 1*10000UL; ch |= (char) 1; };
if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };

ch = 0; if (fNum.u16 >= 8*1000UL) { fNum.u16 -= 8*1000UL; ch = (char) 8; } else { if (fNum.u16 >= 4*1000UL) { fNum.u16 -= 4*1000UL; ch = (char) 4; } if (fNum.u16 >= 2*1000UL) { fNum.u16 -= 2*1000UL; ch |= (char) 2; } } if (fNum.u16 >= 1*1000UL) { fNum.u16 -= 1*1000UL; ch |= (char) 1; };
if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };

ch = 0; if (fNum.u16 >= 8*100UL) { fNum.u16 -= 8*100UL; ch = (char) 8; } else { if (fNum.u16 >= 4*100UL) { fNum.u16 -= 4*100UL; ch = (char) 4; } if (fNum.u16 >= 2*100UL) { fNum.u16 -= 2*100UL; ch |= (char) 2; } } if (fNum.u16 >= 1*100UL) { fNum.u16 -= 1*100UL; ch |= (char) 1; };
if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };

U8:
ch = 0; if (fNum.u16 >= 8*10UL) { fNum.u16 -= 8*10UL; ch = (char) 8; } else { if (fNum.u16 >= 4*10UL) { fNum.u16 -= 4*10UL; ch = (char) 4; } if (fNum.u16 >= 2*10UL) { fNum.u16 -= 2*10UL; ch |= (char) 2; } } if (fNum.u16 >= 1*10UL) { fNum.u16 -= 1*10UL; ch |= (char) 1; };
if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };

ch = 0; if (fNum.u8 >= 8*1UL) { fNum.u8 -= 8*1UL; ch = (char) 8; } else { if (fNum.u8 >= 4*1UL) { fNum.u8 -= 4*1UL; ch = (char) 4; } if (fNum.u8 >= 2*1UL) { fNum.u8 -= 2*1UL; ch |= (char) 2; } } if (fNum.u8 >= 1*1UL) { fNum.u8 -= 1*1UL; ch |= (char) 1; };
*str = ch + '0'; str++;

*str = 0;
}
