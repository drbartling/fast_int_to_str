

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Fri Jul 29 20:14:43 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text27,local,class=CODE,merge=1,delta=2
    15                           	psect	text28,local,class=CODE,merge=1,delta=2
    16                           	psect	pa_nodes,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     	;# 
    19  0001                     	;# 
    20  0002                     	;# 
    21  0003                     	;# 
    22  0004                     	;# 
    23  0005                     	;# 
    24  0006                     	;# 
    25  0007                     	;# 
    26  0008                     	;# 
    27  0009                     	;# 
    28  000A                     	;# 
    29  000B                     	;# 
    30  000C                     	;# 
    31  000D                     	;# 
    32  000E                     	;# 
    33  0010                     	;# 
    34  0011                     	;# 
    35  0012                     	;# 
    36  0013                     	;# 
    37  0014                     	;# 
    38  0015                     	;# 
    39  0016                     	;# 
    40  0016                     	;# 
    41  0017                     	;# 
    42  0018                     	;# 
    43  0019                     	;# 
    44  001A                     	;# 
    45  001A                     	;# 
    46  001B                     	;# 
    47  001B                     	;# 
    48  001C                     	;# 
    49  001D                     	;# 
    50  001E                     	;# 
    51  001F                     	;# 
    52  008C                     	;# 
    53  008D                     	;# 
    54  008E                     	;# 
    55  0090                     	;# 
    56  0091                     	;# 
    57  0092                     	;# 
    58  0093                     	;# 
    59  0094                     	;# 
    60  0095                     	;# 
    61  0096                     	;# 
    62  0098                     	;# 
    63  0099                     	;# 
    64  009A                     	;# 
    65  009B                     	;# 
    66  009B                     	;# 
    67  009C                     	;# 
    68  009D                     	;# 
    69  009E                     	;# 
    70  009F                     	;# 
    71  010C                     	;# 
    72  010D                     	;# 
    73  010E                     	;# 
    74  0111                     	;# 
    75  0112                     	;# 
    76  0113                     	;# 
    77  0114                     	;# 
    78  0115                     	;# 
    79  0116                     	;# 
    80  0117                     	;# 
    81  0118                     	;# 
    82  0119                     	;# 
    83  011C                     	;# 
    84  018C                     	;# 
    85  018D                     	;# 
    86  018E                     	;# 
    87  0191                     	;# 
    88  0191                     	;# 
    89  0192                     	;# 
    90  0193                     	;# 
    91  0193                     	;# 
    92  0194                     	;# 
    93  0195                     	;# 
    94  0196                     	;# 
    95  0197                     	;# 
    96  0199                     	;# 
    97  0199                     	;# 
    98  0199                     	;# 
    99  019A                     	;# 
   100  019A                     	;# 
   101  019A                     	;# 
   102  019B                     	;# 
   103  019B                     	;# 
   104  019B                     	;# 
   105  019B                     	;# 
   106  019B                     	;# 
   107  019C                     	;# 
   108  019C                     	;# 
   109  019C                     	;# 
   110  019D                     	;# 
   111  019D                     	;# 
   112  019D                     	;# 
   113  019E                     	;# 
   114  019E                     	;# 
   115  019E                     	;# 
   116  019F                     	;# 
   117  019F                     	;# 
   118  019F                     	;# 
   119  019F                     	;# 
   120  019F                     	;# 
   121  020C                     	;# 
   122  020D                     	;# 
   123  020E                     	;# 
   124  0211                     	;# 
   125  0211                     	;# 
   126  0212                     	;# 
   127  0212                     	;# 
   128  0213                     	;# 
   129  0213                     	;# 
   130  0214                     	;# 
   131  0214                     	;# 
   132  0215                     	;# 
   133  0215                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0216                     	;# 
   137  0216                     	;# 
   138  0217                     	;# 
   139  0217                     	;# 
   140  028C                     	;# 
   141  028D                     	;# 
   142  028E                     	;# 
   143  0291                     	;# 
   144  0291                     	;# 
   145  0292                     	;# 
   146  0293                     	;# 
   147  0294                     	;# 
   148  0298                     	;# 
   149  0298                     	;# 
   150  0299                     	;# 
   151  029A                     	;# 
   152  029B                     	;# 
   153  029E                     	;# 
   154  030C                     	;# 
   155  030D                     	;# 
   156  030E                     	;# 
   157  038C                     	;# 
   158  038D                     	;# 
   159  038E                     	;# 
   160  0391                     	;# 
   161  0392                     	;# 
   162  0393                     	;# 
   163  0394                     	;# 
   164  0395                     	;# 
   165  0396                     	;# 
   166  0397                     	;# 
   167  0398                     	;# 
   168  0399                     	;# 
   169  040E                     	;# 
   170  0413                     	;# 
   171  0413                     	;# 
   172  0414                     	;# 
   173  0414                     	;# 
   174  0415                     	;# 
   175  0416                     	;# 
   176  0417                     	;# 
   177  0418                     	;# 
   178  041A                     	;# 
   179  041A                     	;# 
   180  041B                     	;# 
   181  041B                     	;# 
   182  041C                     	;# 
   183  041D                     	;# 
   184  041E                     	;# 
   185  041F                     	;# 
   186  0493                     	;# 
   187  0494                     	;# 
   188  0495                     	;# 
   189  0496                     	;# 
   190  049A                     	;# 
   191  049B                     	;# 
   192  049C                     	;# 
   193  049D                     	;# 
   194  058C                     	;# 
   195  058C                     	;# 
   196  058D                     	;# 
   197  058E                     	;# 
   198  058E                     	;# 
   199  058F                     	;# 
   200  0590                     	;# 
   201  0590                     	;# 
   202  0591                     	;# 
   203  0592                     	;# 
   204  0592                     	;# 
   205  0593                     	;# 
   206  0594                     	;# 
   207  0594                     	;# 
   208  0595                     	;# 
   209  0596                     	;# 
   210  0596                     	;# 
   211  0597                     	;# 
   212  0598                     	;# 
   213  0599                     	;# 
   214  059A                     	;# 
   215  059B                     	;# 
   216  059B                     	;# 
   217  059C                     	;# 
   218  059D                     	;# 
   219  060C                     	;# 
   220  060C                     	;# 
   221  060D                     	;# 
   222  060E                     	;# 
   223  060F                     	;# 
   224  060F                     	;# 
   225  0610                     	;# 
   226  0611                     	;# 
   227  0612                     	;# 
   228  0613                     	;# 
   229  0614                     	;# 
   230  0617                     	;# 
   231  0618                     	;# 
   232  0619                     	;# 
   233  061A                     	;# 
   234  061B                     	;# 
   235  061C                     	;# 
   236  0691                     	;# 
   237  0692                     	;# 
   238  0693                     	;# 
   239  0694                     	;# 
   240  0695                     	;# 
   241  0696                     	;# 
   242  0697                     	;# 
   243  0699                     	;# 
   244  069A                     	;# 
   245  0711                     	;# 
   246  0712                     	;# 
   247  0713                     	;# 
   248  0714                     	;# 
   249  0715                     	;# 
   250  0718                     	;# 
   251  0718                     	;# 
   252  0719                     	;# 
   253  071A                     	;# 
   254  071A                     	;# 
   255  071B                     	;# 
   256  071C                     	;# 
   257  071D                     	;# 
   258  0791                     	;# 
   259  0791                     	;# 
   260  0792                     	;# 
   261  0793                     	;# 
   262  0793                     	;# 
   263  0794                     	;# 
   264  0795                     	;# 
   265  0795                     	;# 
   266  0796                     	;# 
   267  0797                     	;# 
   268  0797                     	;# 
   269  0798                     	;# 
   270  0799                     	;# 
   271  079A                     	;# 
   272  080C                     	;# 
   273  080C                     	;# 
   274  080D                     	;# 
   275  080E                     	;# 
   276  080E                     	;# 
   277  080F                     	;# 
   278  0810                     	;# 
   279  0810                     	;# 
   280  0811                     	;# 
   281  0812                     	;# 
   282  0812                     	;# 
   283  0813                     	;# 
   284  0814                     	;# 
   285  0815                     	;# 
   286  0816                     	;# 
   287  0817                     	;# 
   288  0818                     	;# 
   289  0819                     	;# 
   290  081A                     	;# 
   291  081A                     	;# 
   292  081B                     	;# 
   293  081C                     	;# 
   294  081C                     	;# 
   295  081D                     	;# 
   296  088C                     	;# 
   297  088D                     	;# 
   298  088E                     	;# 
   299  088F                     	;# 
   300  088F                     	;# 
   301  0890                     	;# 
   302  0891                     	;# 
   303  0892                     	;# 
   304  0893                     	;# 
   305  0893                     	;# 
   306  0894                     	;# 
   307  0895                     	;# 
   308  0896                     	;# 
   309  0897                     	;# 
   310  0897                     	;# 
   311  0898                     	;# 
   312  0899                     	;# 
   313  0D8C                     	;# 
   314  0D8C                     	;# 
   315  0D8D                     	;# 
   316  0D8E                     	;# 
   317  0D8F                     	;# 
   318  0D8F                     	;# 
   319  0D90                     	;# 
   320  0D91                     	;# 
   321  0D92                     	;# 
   322  0D92                     	;# 
   323  0D93                     	;# 
   324  0D94                     	;# 
   325  0D95                     	;# 
   326  0D95                     	;# 
   327  0D96                     	;# 
   328  0D97                     	;# 
   329  0D98                     	;# 
   330  0D99                     	;# 
   331  0D9A                     	;# 
   332  0D9B                     	;# 
   333  0D9C                     	;# 
   334  0D9D                     	;# 
   335  0D9E                     	;# 
   336  0D9E                     	;# 
   337  0D9F                     	;# 
   338  0DA0                     	;# 
   339  0DA1                     	;# 
   340  0DA1                     	;# 
   341  0DA2                     	;# 
   342  0DA3                     	;# 
   343  0DA4                     	;# 
   344  0DA4                     	;# 
   345  0DA5                     	;# 
   346  0DA6                     	;# 
   347  0DA7                     	;# 
   348  0DA7                     	;# 
   349  0DA8                     	;# 
   350  0DA9                     	;# 
   351  0DAA                     	;# 
   352  0DAB                     	;# 
   353  0DAC                     	;# 
   354  0DAD                     	;# 
   355  0DAE                     	;# 
   356  0DAF                     	;# 
   357  0E0F                     	;# 
   358  0E10                     	;# 
   359  0E11                     	;# 
   360  0E12                     	;# 
   361  0E13                     	;# 
   362  0E14                     	;# 
   363  0E15                     	;# 
   364  0E16                     	;# 
   365  0E17                     	;# 
   366  0E18                     	;# 
   367  0E19                     	;# 
   368  0E1A                     	;# 
   369  0E1B                     	;# 
   370  0E1C                     	;# 
   371  0E1D                     	;# 
   372  0E1E                     	;# 
   373  0E1F                     	;# 
   374  0E20                     	;# 
   375  0E21                     	;# 
   376  0E22                     	;# 
   377  0E23                     	;# 
   378  0E24                     	;# 
   379  0E25                     	;# 
   380  0E26                     	;# 
   381  0E27                     	;# 
   382  0E28                     	;# 
   383  0E29                     	;# 
   384  0E2A                     	;# 
   385  0E2B                     	;# 
   386  0E2C                     	;# 
   387  0E2D                     	;# 
   388  0E2E                     	;# 
   389  0E90                     	;# 
   390  0E91                     	;# 
   391  0E92                     	;# 
   392  0E94                     	;# 
   393  0E95                     	;# 
   394  0E9C                     	;# 
   395  0E9D                     	;# 
   396  0E9E                     	;# 
   397  0E9F                     	;# 
   398  0EA0                     	;# 
   399  0EA1                     	;# 
   400  0EA2                     	;# 
   401  0EA3                     	;# 
   402  0EA4                     	;# 
   403  0EA5                     	;# 
   404  0EA6                     	;# 
   405  0EA7                     	;# 
   406  0F0F                     	;# 
   407  0F10                     	;# 
   408  0F11                     	;# 
   409  0F12                     	;# 
   410  0F13                     	;# 
   411  0F14                     	;# 
   412  0F15                     	;# 
   413  0F16                     	;# 
   414  0F17                     	;# 
   415  0F18                     	;# 
   416  0F19                     	;# 
   417  0F1A                     	;# 
   418  0F1B                     	;# 
   419  0F1C                     	;# 
   420  0F1D                     	;# 
   421  0F1E                     	;# 
   422  0F1F                     	;# 
   423  0F20                     	;# 
   424  0F21                     	;# 
   425  0F22                     	;# 
   426  0F23                     	;# 
   427  0F24                     	;# 
   428  0F25                     	;# 
   429  0F26                     	;# 
   430  0F27                     	;# 
   431  0F28                     	;# 
   432  0F29                     	;# 
   433  0F2A                     	;# 
   434  0F2B                     	;# 
   435  0F2C                     	;# 
   436  0F2D                     	;# 
   437  0F2E                     	;# 
   438  0F2F                     	;# 
   439  0F30                     	;# 
   440  0F31                     	;# 
   441  0F32                     	;# 
   442  0F33                     	;# 
   443  0F34                     	;# 
   444  0F35                     	;# 
   445  0F36                     	;# 
   446  0F37                     	;# 
   447  0FE4                     	;# 
   448  0FE5                     	;# 
   449  0FE6                     	;# 
   450  0FE7                     	;# 
   451  0FE8                     	;# 
   452  0FE9                     	;# 
   453  0FEA                     	;# 
   454  0FEB                     	;# 
   455  0FED                     	;# 
   456  0FEE                     	;# 
   457  0FEF                     	;# 
   458  0000                     	;# 
   459  0001                     	;# 
   460  0002                     	;# 
   461  0003                     	;# 
   462  0004                     	;# 
   463  0005                     	;# 
   464  0006                     	;# 
   465  0007                     	;# 
   466  0008                     	;# 
   467  0009                     	;# 
   468  000A                     	;# 
   469  000B                     	;# 
   470  000C                     	;# 
   471  000D                     	;# 
   472  000E                     	;# 
   473  0010                     	;# 
   474  0011                     	;# 
   475  0012                     	;# 
   476  0013                     	;# 
   477  0014                     	;# 
   478  0015                     	;# 
   479  0016                     	;# 
   480  0016                     	;# 
   481  0017                     	;# 
   482  0018                     	;# 
   483  0019                     	;# 
   484  001A                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001B                     	;# 
   488  001C                     	;# 
   489  001D                     	;# 
   490  001E                     	;# 
   491  001F                     	;# 
   492  008C                     	;# 
   493  008D                     	;# 
   494  008E                     	;# 
   495  0090                     	;# 
   496  0091                     	;# 
   497  0092                     	;# 
   498  0093                     	;# 
   499  0094                     	;# 
   500  0095                     	;# 
   501  0096                     	;# 
   502  0098                     	;# 
   503  0099                     	;# 
   504  009A                     	;# 
   505  009B                     	;# 
   506  009B                     	;# 
   507  009C                     	;# 
   508  009D                     	;# 
   509  009E                     	;# 
   510  009F                     	;# 
   511  010C                     	;# 
   512  010D                     	;# 
   513  010E                     	;# 
   514  0111                     	;# 
   515  0112                     	;# 
   516  0113                     	;# 
   517  0114                     	;# 
   518  0115                     	;# 
   519  0116                     	;# 
   520  0117                     	;# 
   521  0118                     	;# 
   522  0119                     	;# 
   523  011C                     	;# 
   524  018C                     	;# 
   525  018D                     	;# 
   526  018E                     	;# 
   527  0191                     	;# 
   528  0191                     	;# 
   529  0192                     	;# 
   530  0193                     	;# 
   531  0193                     	;# 
   532  0194                     	;# 
   533  0195                     	;# 
   534  0196                     	;# 
   535  0197                     	;# 
   536  0199                     	;# 
   537  0199                     	;# 
   538  0199                     	;# 
   539  019A                     	;# 
   540  019A                     	;# 
   541  019A                     	;# 
   542  019B                     	;# 
   543  019B                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019B                     	;# 
   547  019C                     	;# 
   548  019C                     	;# 
   549  019C                     	;# 
   550  019D                     	;# 
   551  019D                     	;# 
   552  019D                     	;# 
   553  019E                     	;# 
   554  019E                     	;# 
   555  019E                     	;# 
   556  019F                     	;# 
   557  019F                     	;# 
   558  019F                     	;# 
   559  019F                     	;# 
   560  019F                     	;# 
   561  020C                     	;# 
   562  020D                     	;# 
   563  020E                     	;# 
   564  0211                     	;# 
   565  0211                     	;# 
   566  0212                     	;# 
   567  0212                     	;# 
   568  0213                     	;# 
   569  0213                     	;# 
   570  0214                     	;# 
   571  0214                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0216                     	;# 
   577  0216                     	;# 
   578  0217                     	;# 
   579  0217                     	;# 
   580  028C                     	;# 
   581  028D                     	;# 
   582  028E                     	;# 
   583  0291                     	;# 
   584  0291                     	;# 
   585  0292                     	;# 
   586  0293                     	;# 
   587  0294                     	;# 
   588  0298                     	;# 
   589  0298                     	;# 
   590  0299                     	;# 
   591  029A                     	;# 
   592  029B                     	;# 
   593  029E                     	;# 
   594  030C                     	;# 
   595  030D                     	;# 
   596  030E                     	;# 
   597  038C                     	;# 
   598  038D                     	;# 
   599  038E                     	;# 
   600  0391                     	;# 
   601  0392                     	;# 
   602  0393                     	;# 
   603  0394                     	;# 
   604  0395                     	;# 
   605  0396                     	;# 
   606  0397                     	;# 
   607  0398                     	;# 
   608  0399                     	;# 
   609  040E                     	;# 
   610  0413                     	;# 
   611  0413                     	;# 
   612  0414                     	;# 
   613  0414                     	;# 
   614  0415                     	;# 
   615  0416                     	;# 
   616  0417                     	;# 
   617  0418                     	;# 
   618  041A                     	;# 
   619  041A                     	;# 
   620  041B                     	;# 
   621  041B                     	;# 
   622  041C                     	;# 
   623  041D                     	;# 
   624  041E                     	;# 
   625  041F                     	;# 
   626  0493                     	;# 
   627  0494                     	;# 
   628  0495                     	;# 
   629  0496                     	;# 
   630  049A                     	;# 
   631  049B                     	;# 
   632  049C                     	;# 
   633  049D                     	;# 
   634  058C                     	;# 
   635  058C                     	;# 
   636  058D                     	;# 
   637  058E                     	;# 
   638  058E                     	;# 
   639  058F                     	;# 
   640  0590                     	;# 
   641  0590                     	;# 
   642  0591                     	;# 
   643  0592                     	;# 
   644  0592                     	;# 
   645  0593                     	;# 
   646  0594                     	;# 
   647  0594                     	;# 
   648  0595                     	;# 
   649  0596                     	;# 
   650  0596                     	;# 
   651  0597                     	;# 
   652  0598                     	;# 
   653  0599                     	;# 
   654  059A                     	;# 
   655  059B                     	;# 
   656  059B                     	;# 
   657  059C                     	;# 
   658  059D                     	;# 
   659  060C                     	;# 
   660  060C                     	;# 
   661  060D                     	;# 
   662  060E                     	;# 
   663  060F                     	;# 
   664  060F                     	;# 
   665  0610                     	;# 
   666  0611                     	;# 
   667  0612                     	;# 
   668  0613                     	;# 
   669  0614                     	;# 
   670  0617                     	;# 
   671  0618                     	;# 
   672  0619                     	;# 
   673  061A                     	;# 
   674  061B                     	;# 
   675  061C                     	;# 
   676  0691                     	;# 
   677  0692                     	;# 
   678  0693                     	;# 
   679  0694                     	;# 
   680  0695                     	;# 
   681  0696                     	;# 
   682  0697                     	;# 
   683  0699                     	;# 
   684  069A                     	;# 
   685  0711                     	;# 
   686  0712                     	;# 
   687  0713                     	;# 
   688  0714                     	;# 
   689  0715                     	;# 
   690  0718                     	;# 
   691  0718                     	;# 
   692  0719                     	;# 
   693  071A                     	;# 
   694  071A                     	;# 
   695  071B                     	;# 
   696  071C                     	;# 
   697  071D                     	;# 
   698  0791                     	;# 
   699  0791                     	;# 
   700  0792                     	;# 
   701  0793                     	;# 
   702  0793                     	;# 
   703  0794                     	;# 
   704  0795                     	;# 
   705  0795                     	;# 
   706  0796                     	;# 
   707  0797                     	;# 
   708  0797                     	;# 
   709  0798                     	;# 
   710  0799                     	;# 
   711  079A                     	;# 
   712  080C                     	;# 
   713  080C                     	;# 
   714  080D                     	;# 
   715  080E                     	;# 
   716  080E                     	;# 
   717  080F                     	;# 
   718  0810                     	;# 
   719  0810                     	;# 
   720  0811                     	;# 
   721  0812                     	;# 
   722  0812                     	;# 
   723  0813                     	;# 
   724  0814                     	;# 
   725  0815                     	;# 
   726  0816                     	;# 
   727  0817                     	;# 
   728  0818                     	;# 
   729  0819                     	;# 
   730  081A                     	;# 
   731  081A                     	;# 
   732  081B                     	;# 
   733  081C                     	;# 
   734  081C                     	;# 
   735  081D                     	;# 
   736  088C                     	;# 
   737  088D                     	;# 
   738  088E                     	;# 
   739  088F                     	;# 
   740  088F                     	;# 
   741  0890                     	;# 
   742  0891                     	;# 
   743  0892                     	;# 
   744  0893                     	;# 
   745  0893                     	;# 
   746  0894                     	;# 
   747  0895                     	;# 
   748  0896                     	;# 
   749  0897                     	;# 
   750  0897                     	;# 
   751  0898                     	;# 
   752  0899                     	;# 
   753  0D8C                     	;# 
   754  0D8C                     	;# 
   755  0D8D                     	;# 
   756  0D8E                     	;# 
   757  0D8F                     	;# 
   758  0D8F                     	;# 
   759  0D90                     	;# 
   760  0D91                     	;# 
   761  0D92                     	;# 
   762  0D92                     	;# 
   763  0D93                     	;# 
   764  0D94                     	;# 
   765  0D95                     	;# 
   766  0D95                     	;# 
   767  0D96                     	;# 
   768  0D97                     	;# 
   769  0D98                     	;# 
   770  0D99                     	;# 
   771  0D9A                     	;# 
   772  0D9B                     	;# 
   773  0D9C                     	;# 
   774  0D9D                     	;# 
   775  0D9E                     	;# 
   776  0D9E                     	;# 
   777  0D9F                     	;# 
   778  0DA0                     	;# 
   779  0DA1                     	;# 
   780  0DA1                     	;# 
   781  0DA2                     	;# 
   782  0DA3                     	;# 
   783  0DA4                     	;# 
   784  0DA4                     	;# 
   785  0DA5                     	;# 
   786  0DA6                     	;# 
   787  0DA7                     	;# 
   788  0DA7                     	;# 
   789  0DA8                     	;# 
   790  0DA9                     	;# 
   791  0DAA                     	;# 
   792  0DAB                     	;# 
   793  0DAC                     	;# 
   794  0DAD                     	;# 
   795  0DAE                     	;# 
   796  0DAF                     	;# 
   797  0E0F                     	;# 
   798  0E10                     	;# 
   799  0E11                     	;# 
   800  0E12                     	;# 
   801  0E13                     	;# 
   802  0E14                     	;# 
   803  0E15                     	;# 
   804  0E16                     	;# 
   805  0E17                     	;# 
   806  0E18                     	;# 
   807  0E19                     	;# 
   808  0E1A                     	;# 
   809  0E1B                     	;# 
   810  0E1C                     	;# 
   811  0E1D                     	;# 
   812  0E1E                     	;# 
   813  0E1F                     	;# 
   814  0E20                     	;# 
   815  0E21                     	;# 
   816  0E22                     	;# 
   817  0E23                     	;# 
   818  0E24                     	;# 
   819  0E25                     	;# 
   820  0E26                     	;# 
   821  0E27                     	;# 
   822  0E28                     	;# 
   823  0E29                     	;# 
   824  0E2A                     	;# 
   825  0E2B                     	;# 
   826  0E2C                     	;# 
   827  0E2D                     	;# 
   828  0E2E                     	;# 
   829  0E90                     	;# 
   830  0E91                     	;# 
   831  0E92                     	;# 
   832  0E94                     	;# 
   833  0E95                     	;# 
   834  0E9C                     	;# 
   835  0E9D                     	;# 
   836  0E9E                     	;# 
   837  0E9F                     	;# 
   838  0EA0                     	;# 
   839  0EA1                     	;# 
   840  0EA2                     	;# 
   841  0EA3                     	;# 
   842  0EA4                     	;# 
   843  0EA5                     	;# 
   844  0EA6                     	;# 
   845  0EA7                     	;# 
   846  0F0F                     	;# 
   847  0F10                     	;# 
   848  0F11                     	;# 
   849  0F12                     	;# 
   850  0F13                     	;# 
   851  0F14                     	;# 
   852  0F15                     	;# 
   853  0F16                     	;# 
   854  0F17                     	;# 
   855  0F18                     	;# 
   856  0F19                     	;# 
   857  0F1A                     	;# 
   858  0F1B                     	;# 
   859  0F1C                     	;# 
   860  0F1D                     	;# 
   861  0F1E                     	;# 
   862  0F1F                     	;# 
   863  0F20                     	;# 
   864  0F21                     	;# 
   865  0F22                     	;# 
   866  0F23                     	;# 
   867  0F24                     	;# 
   868  0F25                     	;# 
   869  0F26                     	;# 
   870  0F27                     	;# 
   871  0F28                     	;# 
   872  0F29                     	;# 
   873  0F2A                     	;# 
   874  0F2B                     	;# 
   875  0F2C                     	;# 
   876  0F2D                     	;# 
   877  0F2E                     	;# 
   878  0F2F                     	;# 
   879  0F30                     	;# 
   880  0F31                     	;# 
   881  0F32                     	;# 
   882  0F33                     	;# 
   883  0F34                     	;# 
   884  0F35                     	;# 
   885  0F36                     	;# 
   886  0F37                     	;# 
   887  0FE4                     	;# 
   888  0FE5                     	;# 
   889  0FE6                     	;# 
   890  0FE7                     	;# 
   891  0FE8                     	;# 
   892  0FE9                     	;# 
   893  0FEA                     	;# 
   894  0FEB                     	;# 
   895  0FED                     	;# 
   896  0FEE                     	;# 
   897  0FEF                     	;# 
   898  0000                     	;# 
   899  0001                     	;# 
   900  0002                     	;# 
   901  0003                     	;# 
   902  0004                     	;# 
   903  0005                     	;# 
   904  0006                     	;# 
   905  0007                     	;# 
   906  0008                     	;# 
   907  0009                     	;# 
   908  000A                     	;# 
   909  000B                     	;# 
   910  000C                     	;# 
   911  000D                     	;# 
   912  000E                     	;# 
   913  0010                     	;# 
   914  0011                     	;# 
   915  0012                     	;# 
   916  0013                     	;# 
   917  0014                     	;# 
   918  0015                     	;# 
   919  0016                     	;# 
   920  0016                     	;# 
   921  0017                     	;# 
   922  0018                     	;# 
   923  0019                     	;# 
   924  001A                     	;# 
   925  001A                     	;# 
   926  001B                     	;# 
   927  001B                     	;# 
   928  001C                     	;# 
   929  001D                     	;# 
   930  001E                     	;# 
   931  001F                     	;# 
   932  008C                     	;# 
   933  008D                     	;# 
   934  008E                     	;# 
   935  0090                     	;# 
   936  0091                     	;# 
   937  0092                     	;# 
   938  0093                     	;# 
   939  0094                     	;# 
   940  0095                     	;# 
   941  0096                     	;# 
   942  0098                     	;# 
   943  0099                     	;# 
   944  009A                     	;# 
   945  009B                     	;# 
   946  009B                     	;# 
   947  009C                     	;# 
   948  009D                     	;# 
   949  009E                     	;# 
   950  009F                     	;# 
   951  010C                     	;# 
   952  010D                     	;# 
   953  010E                     	;# 
   954  0111                     	;# 
   955  0112                     	;# 
   956  0113                     	;# 
   957  0114                     	;# 
   958  0115                     	;# 
   959  0116                     	;# 
   960  0117                     	;# 
   961  0118                     	;# 
   962  0119                     	;# 
   963  011C                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  018E                     	;# 
   967  0191                     	;# 
   968  0191                     	;# 
   969  0192                     	;# 
   970  0193                     	;# 
   971  0193                     	;# 
   972  0194                     	;# 
   973  0195                     	;# 
   974  0196                     	;# 
   975  0197                     	;# 
   976  0199                     	;# 
   977  0199                     	;# 
   978  0199                     	;# 
   979  019A                     	;# 
   980  019A                     	;# 
   981  019A                     	;# 
   982  019B                     	;# 
   983  019B                     	;# 
   984  019B                     	;# 
   985  019B                     	;# 
   986  019B                     	;# 
   987  019C                     	;# 
   988  019C                     	;# 
   989  019C                     	;# 
   990  019D                     	;# 
   991  019D                     	;# 
   992  019D                     	;# 
   993  019E                     	;# 
   994  019E                     	;# 
   995  019E                     	;# 
   996  019F                     	;# 
   997  019F                     	;# 
   998  019F                     	;# 
   999  019F                     	;# 
  1000  019F                     	;# 
  1001  020C                     	;# 
  1002  020D                     	;# 
  1003  020E                     	;# 
  1004  0211                     	;# 
  1005  0211                     	;# 
  1006  0212                     	;# 
  1007  0212                     	;# 
  1008  0213                     	;# 
  1009  0213                     	;# 
  1010  0214                     	;# 
  1011  0214                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0216                     	;# 
  1017  0216                     	;# 
  1018  0217                     	;# 
  1019  0217                     	;# 
  1020  028C                     	;# 
  1021  028D                     	;# 
  1022  028E                     	;# 
  1023  0291                     	;# 
  1024  0291                     	;# 
  1025  0292                     	;# 
  1026  0293                     	;# 
  1027  0294                     	;# 
  1028  0298                     	;# 
  1029  0298                     	;# 
  1030  0299                     	;# 
  1031  029A                     	;# 
  1032  029B                     	;# 
  1033  029E                     	;# 
  1034  030C                     	;# 
  1035  030D                     	;# 
  1036  030E                     	;# 
  1037  038C                     	;# 
  1038  038D                     	;# 
  1039  038E                     	;# 
  1040  0391                     	;# 
  1041  0392                     	;# 
  1042  0393                     	;# 
  1043  0394                     	;# 
  1044  0395                     	;# 
  1045  0396                     	;# 
  1046  0397                     	;# 
  1047  0398                     	;# 
  1048  0399                     	;# 
  1049  040E                     	;# 
  1050  0413                     	;# 
  1051  0413                     	;# 
  1052  0414                     	;# 
  1053  0414                     	;# 
  1054  0415                     	;# 
  1055  0416                     	;# 
  1056  0417                     	;# 
  1057  0418                     	;# 
  1058  041A                     	;# 
  1059  041A                     	;# 
  1060  041B                     	;# 
  1061  041B                     	;# 
  1062  041C                     	;# 
  1063  041D                     	;# 
  1064  041E                     	;# 
  1065  041F                     	;# 
  1066  0493                     	;# 
  1067  0494                     	;# 
  1068  0495                     	;# 
  1069  0496                     	;# 
  1070  049A                     	;# 
  1071  049B                     	;# 
  1072  049C                     	;# 
  1073  049D                     	;# 
  1074  058C                     	;# 
  1075  058C                     	;# 
  1076  058D                     	;# 
  1077  058E                     	;# 
  1078  058E                     	;# 
  1079  058F                     	;# 
  1080  0590                     	;# 
  1081  0590                     	;# 
  1082  0591                     	;# 
  1083  0592                     	;# 
  1084  0592                     	;# 
  1085  0593                     	;# 
  1086  0594                     	;# 
  1087  0594                     	;# 
  1088  0595                     	;# 
  1089  0596                     	;# 
  1090  0596                     	;# 
  1091  0597                     	;# 
  1092  0598                     	;# 
  1093  0599                     	;# 
  1094  059A                     	;# 
  1095  059B                     	;# 
  1096  059B                     	;# 
  1097  059C                     	;# 
  1098  059D                     	;# 
  1099  060C                     	;# 
  1100  060C                     	;# 
  1101  060D                     	;# 
  1102  060E                     	;# 
  1103  060F                     	;# 
  1104  060F                     	;# 
  1105  0610                     	;# 
  1106  0611                     	;# 
  1107  0612                     	;# 
  1108  0613                     	;# 
  1109  0614                     	;# 
  1110  0617                     	;# 
  1111  0618                     	;# 
  1112  0619                     	;# 
  1113  061A                     	;# 
  1114  061B                     	;# 
  1115  061C                     	;# 
  1116  0691                     	;# 
  1117  0692                     	;# 
  1118  0693                     	;# 
  1119  0694                     	;# 
  1120  0695                     	;# 
  1121  0696                     	;# 
  1122  0697                     	;# 
  1123  0699                     	;# 
  1124  069A                     	;# 
  1125  0711                     	;# 
  1126  0712                     	;# 
  1127  0713                     	;# 
  1128  0714                     	;# 
  1129  0715                     	;# 
  1130  0718                     	;# 
  1131  0718                     	;# 
  1132  0719                     	;# 
  1133  071A                     	;# 
  1134  071A                     	;# 
  1135  071B                     	;# 
  1136  071C                     	;# 
  1137  071D                     	;# 
  1138  0791                     	;# 
  1139  0791                     	;# 
  1140  0792                     	;# 
  1141  0793                     	;# 
  1142  0793                     	;# 
  1143  0794                     	;# 
  1144  0795                     	;# 
  1145  0795                     	;# 
  1146  0796                     	;# 
  1147  0797                     	;# 
  1148  0797                     	;# 
  1149  0798                     	;# 
  1150  0799                     	;# 
  1151  079A                     	;# 
  1152  080C                     	;# 
  1153  080C                     	;# 
  1154  080D                     	;# 
  1155  080E                     	;# 
  1156  080E                     	;# 
  1157  080F                     	;# 
  1158  0810                     	;# 
  1159  0810                     	;# 
  1160  0811                     	;# 
  1161  0812                     	;# 
  1162  0812                     	;# 
  1163  0813                     	;# 
  1164  0814                     	;# 
  1165  0815                     	;# 
  1166  0816                     	;# 
  1167  0817                     	;# 
  1168  0818                     	;# 
  1169  0819                     	;# 
  1170  081A                     	;# 
  1171  081A                     	;# 
  1172  081B                     	;# 
  1173  081C                     	;# 
  1174  081C                     	;# 
  1175  081D                     	;# 
  1176  088C                     	;# 
  1177  088D                     	;# 
  1178  088E                     	;# 
  1179  088F                     	;# 
  1180  088F                     	;# 
  1181  0890                     	;# 
  1182  0891                     	;# 
  1183  0892                     	;# 
  1184  0893                     	;# 
  1185  0893                     	;# 
  1186  0894                     	;# 
  1187  0895                     	;# 
  1188  0896                     	;# 
  1189  0897                     	;# 
  1190  0897                     	;# 
  1191  0898                     	;# 
  1192  0899                     	;# 
  1193  0D8C                     	;# 
  1194  0D8C                     	;# 
  1195  0D8D                     	;# 
  1196  0D8E                     	;# 
  1197  0D8F                     	;# 
  1198  0D8F                     	;# 
  1199  0D90                     	;# 
  1200  0D91                     	;# 
  1201  0D92                     	;# 
  1202  0D92                     	;# 
  1203  0D93                     	;# 
  1204  0D94                     	;# 
  1205  0D95                     	;# 
  1206  0D95                     	;# 
  1207  0D96                     	;# 
  1208  0D97                     	;# 
  1209  0D98                     	;# 
  1210  0D99                     	;# 
  1211  0D9A                     	;# 
  1212  0D9B                     	;# 
  1213  0D9C                     	;# 
  1214  0D9D                     	;# 
  1215  0D9E                     	;# 
  1216  0D9E                     	;# 
  1217  0D9F                     	;# 
  1218  0DA0                     	;# 
  1219  0DA1                     	;# 
  1220  0DA1                     	;# 
  1221  0DA2                     	;# 
  1222  0DA3                     	;# 
  1223  0DA4                     	;# 
  1224  0DA4                     	;# 
  1225  0DA5                     	;# 
  1226  0DA6                     	;# 
  1227  0DA7                     	;# 
  1228  0DA7                     	;# 
  1229  0DA8                     	;# 
  1230  0DA9                     	;# 
  1231  0DAA                     	;# 
  1232  0DAB                     	;# 
  1233  0DAC                     	;# 
  1234  0DAD                     	;# 
  1235  0DAE                     	;# 
  1236  0DAF                     	;# 
  1237  0E0F                     	;# 
  1238  0E10                     	;# 
  1239  0E11                     	;# 
  1240  0E12                     	;# 
  1241  0E13                     	;# 
  1242  0E14                     	;# 
  1243  0E15                     	;# 
  1244  0E16                     	;# 
  1245  0E17                     	;# 
  1246  0E18                     	;# 
  1247  0E19                     	;# 
  1248  0E1A                     	;# 
  1249  0E1B                     	;# 
  1250  0E1C                     	;# 
  1251  0E1D                     	;# 
  1252  0E1E                     	;# 
  1253  0E1F                     	;# 
  1254  0E20                     	;# 
  1255  0E21                     	;# 
  1256  0E22                     	;# 
  1257  0E23                     	;# 
  1258  0E24                     	;# 
  1259  0E25                     	;# 
  1260  0E26                     	;# 
  1261  0E27                     	;# 
  1262  0E28                     	;# 
  1263  0E29                     	;# 
  1264  0E2A                     	;# 
  1265  0E2B                     	;# 
  1266  0E2C                     	;# 
  1267  0E2D                     	;# 
  1268  0E2E                     	;# 
  1269  0E90                     	;# 
  1270  0E91                     	;# 
  1271  0E92                     	;# 
  1272  0E94                     	;# 
  1273  0E95                     	;# 
  1274  0E9C                     	;# 
  1275  0E9D                     	;# 
  1276  0E9E                     	;# 
  1277  0E9F                     	;# 
  1278  0EA0                     	;# 
  1279  0EA1                     	;# 
  1280  0EA2                     	;# 
  1281  0EA3                     	;# 
  1282  0EA4                     	;# 
  1283  0EA5                     	;# 
  1284  0EA6                     	;# 
  1285  0EA7                     	;# 
  1286  0F0F                     	;# 
  1287  0F10                     	;# 
  1288  0F11                     	;# 
  1289  0F12                     	;# 
  1290  0F13                     	;# 
  1291  0F14                     	;# 
  1292  0F15                     	;# 
  1293  0F16                     	;# 
  1294  0F17                     	;# 
  1295  0F18                     	;# 
  1296  0F19                     	;# 
  1297  0F1A                     	;# 
  1298  0F1B                     	;# 
  1299  0F1C                     	;# 
  1300  0F1D                     	;# 
  1301  0F1E                     	;# 
  1302  0F1F                     	;# 
  1303  0F20                     	;# 
  1304  0F21                     	;# 
  1305  0F22                     	;# 
  1306  0F23                     	;# 
  1307  0F24                     	;# 
  1308  0F25                     	;# 
  1309  0F26                     	;# 
  1310  0F27                     	;# 
  1311  0F28                     	;# 
  1312  0F29                     	;# 
  1313  0F2A                     	;# 
  1314  0F2B                     	;# 
  1315  0F2C                     	;# 
  1316  0F2D                     	;# 
  1317  0F2E                     	;# 
  1318  0F2F                     	;# 
  1319  0F30                     	;# 
  1320  0F31                     	;# 
  1321  0F32                     	;# 
  1322  0F33                     	;# 
  1323  0F34                     	;# 
  1324  0F35                     	;# 
  1325  0F36                     	;# 
  1326  0F37                     	;# 
  1327  0FE4                     	;# 
  1328  0FE5                     	;# 
  1329  0FE6                     	;# 
  1330  0FE7                     	;# 
  1331  0FE8                     	;# 
  1332  0FE9                     	;# 
  1333  0FEA                     	;# 
  1334  0FEB                     	;# 
  1335  0FED                     	;# 
  1336  0FEE                     	;# 
  1337  0FEF                     	;# 
  1338  0000                     	;# 
  1339  0001                     	;# 
  1340  0002                     	;# 
  1341  0003                     	;# 
  1342  0004                     	;# 
  1343  0005                     	;# 
  1344  0006                     	;# 
  1345  0007                     	;# 
  1346  0008                     	;# 
  1347  0009                     	;# 
  1348  000A                     	;# 
  1349  000B                     	;# 
  1350  000C                     	;# 
  1351  000D                     	;# 
  1352  000E                     	;# 
  1353  0010                     	;# 
  1354  0011                     	;# 
  1355  0012                     	;# 
  1356  0013                     	;# 
  1357  0014                     	;# 
  1358  0015                     	;# 
  1359  0016                     	;# 
  1360  0016                     	;# 
  1361  0017                     	;# 
  1362  0018                     	;# 
  1363  0019                     	;# 
  1364  001A                     	;# 
  1365  001A                     	;# 
  1366  001B                     	;# 
  1367  001B                     	;# 
  1368  001C                     	;# 
  1369  001D                     	;# 
  1370  001E                     	;# 
  1371  001F                     	;# 
  1372  008C                     	;# 
  1373  008D                     	;# 
  1374  008E                     	;# 
  1375  0090                     	;# 
  1376  0091                     	;# 
  1377  0092                     	;# 
  1378  0093                     	;# 
  1379  0094                     	;# 
  1380  0095                     	;# 
  1381  0096                     	;# 
  1382  0098                     	;# 
  1383  0099                     	;# 
  1384  009A                     	;# 
  1385  009B                     	;# 
  1386  009B                     	;# 
  1387  009C                     	;# 
  1388  009D                     	;# 
  1389  009E                     	;# 
  1390  009F                     	;# 
  1391  010C                     	;# 
  1392  010D                     	;# 
  1393  010E                     	;# 
  1394  0111                     	;# 
  1395  0112                     	;# 
  1396  0113                     	;# 
  1397  0114                     	;# 
  1398  0115                     	;# 
  1399  0116                     	;# 
  1400  0117                     	;# 
  1401  0118                     	;# 
  1402  0119                     	;# 
  1403  011C                     	;# 
  1404  018C                     	;# 
  1405  018D                     	;# 
  1406  018E                     	;# 
  1407  0191                     	;# 
  1408  0191                     	;# 
  1409  0192                     	;# 
  1410  0193                     	;# 
  1411  0193                     	;# 
  1412  0194                     	;# 
  1413  0195                     	;# 
  1414  0196                     	;# 
  1415  0197                     	;# 
  1416  0199                     	;# 
  1417  0199                     	;# 
  1418  0199                     	;# 
  1419  019A                     	;# 
  1420  019A                     	;# 
  1421  019A                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019B                     	;# 
  1425  019B                     	;# 
  1426  019B                     	;# 
  1427  019C                     	;# 
  1428  019C                     	;# 
  1429  019C                     	;# 
  1430  019D                     	;# 
  1431  019D                     	;# 
  1432  019D                     	;# 
  1433  019E                     	;# 
  1434  019E                     	;# 
  1435  019E                     	;# 
  1436  019F                     	;# 
  1437  019F                     	;# 
  1438  019F                     	;# 
  1439  019F                     	;# 
  1440  019F                     	;# 
  1441  020C                     	;# 
  1442  020D                     	;# 
  1443  020E                     	;# 
  1444  0211                     	;# 
  1445  0211                     	;# 
  1446  0212                     	;# 
  1447  0212                     	;# 
  1448  0213                     	;# 
  1449  0213                     	;# 
  1450  0214                     	;# 
  1451  0214                     	;# 
  1452  0215                     	;# 
  1453  0215                     	;# 
  1454  0215                     	;# 
  1455  0215                     	;# 
  1456  0216                     	;# 
  1457  0216                     	;# 
  1458  0217                     	;# 
  1459  0217                     	;# 
  1460  028C                     	;# 
  1461  028D                     	;# 
  1462  028E                     	;# 
  1463  0291                     	;# 
  1464  0291                     	;# 
  1465  0292                     	;# 
  1466  0293                     	;# 
  1467  0294                     	;# 
  1468  0298                     	;# 
  1469  0298                     	;# 
  1470  0299                     	;# 
  1471  029A                     	;# 
  1472  029B                     	;# 
  1473  029E                     	;# 
  1474  030C                     	;# 
  1475  030D                     	;# 
  1476  030E                     	;# 
  1477  038C                     	;# 
  1478  038D                     	;# 
  1479  038E                     	;# 
  1480  0391                     	;# 
  1481  0392                     	;# 
  1482  0393                     	;# 
  1483  0394                     	;# 
  1484  0395                     	;# 
  1485  0396                     	;# 
  1486  0397                     	;# 
  1487  0398                     	;# 
  1488  0399                     	;# 
  1489  040E                     	;# 
  1490  0413                     	;# 
  1491  0413                     	;# 
  1492  0414                     	;# 
  1493  0414                     	;# 
  1494  0415                     	;# 
  1495  0416                     	;# 
  1496  0417                     	;# 
  1497  0418                     	;# 
  1498  041A                     	;# 
  1499  041A                     	;# 
  1500  041B                     	;# 
  1501  041B                     	;# 
  1502  041C                     	;# 
  1503  041D                     	;# 
  1504  041E                     	;# 
  1505  041F                     	;# 
  1506  0493                     	;# 
  1507  0494                     	;# 
  1508  0495                     	;# 
  1509  0496                     	;# 
  1510  049A                     	;# 
  1511  049B                     	;# 
  1512  049C                     	;# 
  1513  049D                     	;# 
  1514  058C                     	;# 
  1515  058C                     	;# 
  1516  058D                     	;# 
  1517  058E                     	;# 
  1518  058E                     	;# 
  1519  058F                     	;# 
  1520  0590                     	;# 
  1521  0590                     	;# 
  1522  0591                     	;# 
  1523  0592                     	;# 
  1524  0592                     	;# 
  1525  0593                     	;# 
  1526  0594                     	;# 
  1527  0594                     	;# 
  1528  0595                     	;# 
  1529  0596                     	;# 
  1530  0596                     	;# 
  1531  0597                     	;# 
  1532  0598                     	;# 
  1533  0599                     	;# 
  1534  059A                     	;# 
  1535  059B                     	;# 
  1536  059B                     	;# 
  1537  059C                     	;# 
  1538  059D                     	;# 
  1539  060C                     	;# 
  1540  060C                     	;# 
  1541  060D                     	;# 
  1542  060E                     	;# 
  1543  060F                     	;# 
  1544  060F                     	;# 
  1545  0610                     	;# 
  1546  0611                     	;# 
  1547  0612                     	;# 
  1548  0613                     	;# 
  1549  0614                     	;# 
  1550  0617                     	;# 
  1551  0618                     	;# 
  1552  0619                     	;# 
  1553  061A                     	;# 
  1554  061B                     	;# 
  1555  061C                     	;# 
  1556  0691                     	;# 
  1557  0692                     	;# 
  1558  0693                     	;# 
  1559  0694                     	;# 
  1560  0695                     	;# 
  1561  0696                     	;# 
  1562  0697                     	;# 
  1563  0699                     	;# 
  1564  069A                     	;# 
  1565  0711                     	;# 
  1566  0712                     	;# 
  1567  0713                     	;# 
  1568  0714                     	;# 
  1569  0715                     	;# 
  1570  0718                     	;# 
  1571  0718                     	;# 
  1572  0719                     	;# 
  1573  071A                     	;# 
  1574  071A                     	;# 
  1575  071B                     	;# 
  1576  071C                     	;# 
  1577  071D                     	;# 
  1578  0791                     	;# 
  1579  0791                     	;# 
  1580  0792                     	;# 
  1581  0793                     	;# 
  1582  0793                     	;# 
  1583  0794                     	;# 
  1584  0795                     	;# 
  1585  0795                     	;# 
  1586  0796                     	;# 
  1587  0797                     	;# 
  1588  0797                     	;# 
  1589  0798                     	;# 
  1590  0799                     	;# 
  1591  079A                     	;# 
  1592  080C                     	;# 
  1593  080C                     	;# 
  1594  080D                     	;# 
  1595  080E                     	;# 
  1596  080E                     	;# 
  1597  080F                     	;# 
  1598  0810                     	;# 
  1599  0810                     	;# 
  1600  0811                     	;# 
  1601  0812                     	;# 
  1602  0812                     	;# 
  1603  0813                     	;# 
  1604  0814                     	;# 
  1605  0815                     	;# 
  1606  0816                     	;# 
  1607  0817                     	;# 
  1608  0818                     	;# 
  1609  0819                     	;# 
  1610  081A                     	;# 
  1611  081A                     	;# 
  1612  081B                     	;# 
  1613  081C                     	;# 
  1614  081C                     	;# 
  1615  081D                     	;# 
  1616  088C                     	;# 
  1617  088D                     	;# 
  1618  088E                     	;# 
  1619  088F                     	;# 
  1620  088F                     	;# 
  1621  0890                     	;# 
  1622  0891                     	;# 
  1623  0892                     	;# 
  1624  0893                     	;# 
  1625  0893                     	;# 
  1626  0894                     	;# 
  1627  0895                     	;# 
  1628  0896                     	;# 
  1629  0897                     	;# 
  1630  0897                     	;# 
  1631  0898                     	;# 
  1632  0899                     	;# 
  1633  0D8C                     	;# 
  1634  0D8C                     	;# 
  1635  0D8D                     	;# 
  1636  0D8E                     	;# 
  1637  0D8F                     	;# 
  1638  0D8F                     	;# 
  1639  0D90                     	;# 
  1640  0D91                     	;# 
  1641  0D92                     	;# 
  1642  0D92                     	;# 
  1643  0D93                     	;# 
  1644  0D94                     	;# 
  1645  0D95                     	;# 
  1646  0D95                     	;# 
  1647  0D96                     	;# 
  1648  0D97                     	;# 
  1649  0D98                     	;# 
  1650  0D99                     	;# 
  1651  0D9A                     	;# 
  1652  0D9B                     	;# 
  1653  0D9C                     	;# 
  1654  0D9D                     	;# 
  1655  0D9E                     	;# 
  1656  0D9E                     	;# 
  1657  0D9F                     	;# 
  1658  0DA0                     	;# 
  1659  0DA1                     	;# 
  1660  0DA1                     	;# 
  1661  0DA2                     	;# 
  1662  0DA3                     	;# 
  1663  0DA4                     	;# 
  1664  0DA4                     	;# 
  1665  0DA5                     	;# 
  1666  0DA6                     	;# 
  1667  0DA7                     	;# 
  1668  0DA7                     	;# 
  1669  0DA8                     	;# 
  1670  0DA9                     	;# 
  1671  0DAA                     	;# 
  1672  0DAB                     	;# 
  1673  0DAC                     	;# 
  1674  0DAD                     	;# 
  1675  0DAE                     	;# 
  1676  0DAF                     	;# 
  1677  0E0F                     	;# 
  1678  0E10                     	;# 
  1679  0E11                     	;# 
  1680  0E12                     	;# 
  1681  0E13                     	;# 
  1682  0E14                     	;# 
  1683  0E15                     	;# 
  1684  0E16                     	;# 
  1685  0E17                     	;# 
  1686  0E18                     	;# 
  1687  0E19                     	;# 
  1688  0E1A                     	;# 
  1689  0E1B                     	;# 
  1690  0E1C                     	;# 
  1691  0E1D                     	;# 
  1692  0E1E                     	;# 
  1693  0E1F                     	;# 
  1694  0E20                     	;# 
  1695  0E21                     	;# 
  1696  0E22                     	;# 
  1697  0E23                     	;# 
  1698  0E24                     	;# 
  1699  0E25                     	;# 
  1700  0E26                     	;# 
  1701  0E27                     	;# 
  1702  0E28                     	;# 
  1703  0E29                     	;# 
  1704  0E2A                     	;# 
  1705  0E2B                     	;# 
  1706  0E2C                     	;# 
  1707  0E2D                     	;# 
  1708  0E2E                     	;# 
  1709  0E90                     	;# 
  1710  0E91                     	;# 
  1711  0E92                     	;# 
  1712  0E94                     	;# 
  1713  0E95                     	;# 
  1714  0E9C                     	;# 
  1715  0E9D                     	;# 
  1716  0E9E                     	;# 
  1717  0E9F                     	;# 
  1718  0EA0                     	;# 
  1719  0EA1                     	;# 
  1720  0EA2                     	;# 
  1721  0EA3                     	;# 
  1722  0EA4                     	;# 
  1723  0EA5                     	;# 
  1724  0EA6                     	;# 
  1725  0EA7                     	;# 
  1726  0F0F                     	;# 
  1727  0F10                     	;# 
  1728  0F11                     	;# 
  1729  0F12                     	;# 
  1730  0F13                     	;# 
  1731  0F14                     	;# 
  1732  0F15                     	;# 
  1733  0F16                     	;# 
  1734  0F17                     	;# 
  1735  0F18                     	;# 
  1736  0F19                     	;# 
  1737  0F1A                     	;# 
  1738  0F1B                     	;# 
  1739  0F1C                     	;# 
  1740  0F1D                     	;# 
  1741  0F1E                     	;# 
  1742  0F1F                     	;# 
  1743  0F20                     	;# 
  1744  0F21                     	;# 
  1745  0F22                     	;# 
  1746  0F23                     	;# 
  1747  0F24                     	;# 
  1748  0F25                     	;# 
  1749  0F26                     	;# 
  1750  0F27                     	;# 
  1751  0F28                     	;# 
  1752  0F29                     	;# 
  1753  0F2A                     	;# 
  1754  0F2B                     	;# 
  1755  0F2C                     	;# 
  1756  0F2D                     	;# 
  1757  0F2E                     	;# 
  1758  0F2F                     	;# 
  1759  0F30                     	;# 
  1760  0F31                     	;# 
  1761  0F32                     	;# 
  1762  0F33                     	;# 
  1763  0F34                     	;# 
  1764  0F35                     	;# 
  1765  0F36                     	;# 
  1766  0F37                     	;# 
  1767  0FE4                     	;# 
  1768  0FE5                     	;# 
  1769  0FE6                     	;# 
  1770  0FE7                     	;# 
  1771  0FE8                     	;# 
  1772  0FE9                     	;# 
  1773  0FEA                     	;# 
  1774  0FEB                     	;# 
  1775  0FED                     	;# 
  1776  0FEE                     	;# 
  1777  0FEF                     	;# 
  1778  0000                     	;# 
  1779  0001                     	;# 
  1780  0002                     	;# 
  1781  0003                     	;# 
  1782  0004                     	;# 
  1783  0005                     	;# 
  1784  0006                     	;# 
  1785  0007                     	;# 
  1786  0008                     	;# 
  1787  0009                     	;# 
  1788  000A                     	;# 
  1789  000B                     	;# 
  1790  000C                     	;# 
  1791  000D                     	;# 
  1792  000E                     	;# 
  1793  0010                     	;# 
  1794  0011                     	;# 
  1795  0012                     	;# 
  1796  0013                     	;# 
  1797  0014                     	;# 
  1798  0015                     	;# 
  1799  0016                     	;# 
  1800  0016                     	;# 
  1801  0017                     	;# 
  1802  0018                     	;# 
  1803  0019                     	;# 
  1804  001A                     	;# 
  1805  001A                     	;# 
  1806  001B                     	;# 
  1807  001B                     	;# 
  1808  001C                     	;# 
  1809  001D                     	;# 
  1810  001E                     	;# 
  1811  001F                     	;# 
  1812  008C                     	;# 
  1813  008D                     	;# 
  1814  008E                     	;# 
  1815  0090                     	;# 
  1816  0091                     	;# 
  1817  0092                     	;# 
  1818  0093                     	;# 
  1819  0094                     	;# 
  1820  0095                     	;# 
  1821  0096                     	;# 
  1822  0098                     	;# 
  1823  0099                     	;# 
  1824  009A                     	;# 
  1825  009B                     	;# 
  1826  009B                     	;# 
  1827  009C                     	;# 
  1828  009D                     	;# 
  1829  009E                     	;# 
  1830  009F                     	;# 
  1831  010C                     	;# 
  1832  010D                     	;# 
  1833  010E                     	;# 
  1834  0111                     	;# 
  1835  0112                     	;# 
  1836  0113                     	;# 
  1837  0114                     	;# 
  1838  0115                     	;# 
  1839  0116                     	;# 
  1840  0117                     	;# 
  1841  0118                     	;# 
  1842  0119                     	;# 
  1843  011C                     	;# 
  1844  018C                     	;# 
  1845  018D                     	;# 
  1846  018E                     	;# 
  1847  0191                     	;# 
  1848  0191                     	;# 
  1849  0192                     	;# 
  1850  0193                     	;# 
  1851  0193                     	;# 
  1852  0194                     	;# 
  1853  0195                     	;# 
  1854  0196                     	;# 
  1855  0197                     	;# 
  1856  0199                     	;# 
  1857  0199                     	;# 
  1858  0199                     	;# 
  1859  019A                     	;# 
  1860  019A                     	;# 
  1861  019A                     	;# 
  1862  019B                     	;# 
  1863  019B                     	;# 
  1864  019B                     	;# 
  1865  019B                     	;# 
  1866  019B                     	;# 
  1867  019C                     	;# 
  1868  019C                     	;# 
  1869  019C                     	;# 
  1870  019D                     	;# 
  1871  019D                     	;# 
  1872  019D                     	;# 
  1873  019E                     	;# 
  1874  019E                     	;# 
  1875  019E                     	;# 
  1876  019F                     	;# 
  1877  019F                     	;# 
  1878  019F                     	;# 
  1879  019F                     	;# 
  1880  019F                     	;# 
  1881  020C                     	;# 
  1882  020D                     	;# 
  1883  020E                     	;# 
  1884  0211                     	;# 
  1885  0211                     	;# 
  1886  0212                     	;# 
  1887  0212                     	;# 
  1888  0213                     	;# 
  1889  0213                     	;# 
  1890  0214                     	;# 
  1891  0214                     	;# 
  1892  0215                     	;# 
  1893  0215                     	;# 
  1894  0215                     	;# 
  1895  0215                     	;# 
  1896  0216                     	;# 
  1897  0216                     	;# 
  1898  0217                     	;# 
  1899  0217                     	;# 
  1900  028C                     	;# 
  1901  028D                     	;# 
  1902  028E                     	;# 
  1903  0291                     	;# 
  1904  0291                     	;# 
  1905  0292                     	;# 
  1906  0293                     	;# 
  1907  0294                     	;# 
  1908  0298                     	;# 
  1909  0298                     	;# 
  1910  0299                     	;# 
  1911  029A                     	;# 
  1912  029B                     	;# 
  1913  029E                     	;# 
  1914  030C                     	;# 
  1915  030D                     	;# 
  1916  030E                     	;# 
  1917  038C                     	;# 
  1918  038D                     	;# 
  1919  038E                     	;# 
  1920  0391                     	;# 
  1921  0392                     	;# 
  1922  0393                     	;# 
  1923  0394                     	;# 
  1924  0395                     	;# 
  1925  0396                     	;# 
  1926  0397                     	;# 
  1927  0398                     	;# 
  1928  0399                     	;# 
  1929  040E                     	;# 
  1930  0413                     	;# 
  1931  0413                     	;# 
  1932  0414                     	;# 
  1933  0414                     	;# 
  1934  0415                     	;# 
  1935  0416                     	;# 
  1936  0417                     	;# 
  1937  0418                     	;# 
  1938  041A                     	;# 
  1939  041A                     	;# 
  1940  041B                     	;# 
  1941  041B                     	;# 
  1942  041C                     	;# 
  1943  041D                     	;# 
  1944  041E                     	;# 
  1945  041F                     	;# 
  1946  0493                     	;# 
  1947  0494                     	;# 
  1948  0495                     	;# 
  1949  0496                     	;# 
  1950  049A                     	;# 
  1951  049B                     	;# 
  1952  049C                     	;# 
  1953  049D                     	;# 
  1954  058C                     	;# 
  1955  058C                     	;# 
  1956  058D                     	;# 
  1957  058E                     	;# 
  1958  058E                     	;# 
  1959  058F                     	;# 
  1960  0590                     	;# 
  1961  0590                     	;# 
  1962  0591                     	;# 
  1963  0592                     	;# 
  1964  0592                     	;# 
  1965  0593                     	;# 
  1966  0594                     	;# 
  1967  0594                     	;# 
  1968  0595                     	;# 
  1969  0596                     	;# 
  1970  0596                     	;# 
  1971  0597                     	;# 
  1972  0598                     	;# 
  1973  0599                     	;# 
  1974  059A                     	;# 
  1975  059B                     	;# 
  1976  059B                     	;# 
  1977  059C                     	;# 
  1978  059D                     	;# 
  1979  060C                     	;# 
  1980  060C                     	;# 
  1981  060D                     	;# 
  1982  060E                     	;# 
  1983  060F                     	;# 
  1984  060F                     	;# 
  1985  0610                     	;# 
  1986  0611                     	;# 
  1987  0612                     	;# 
  1988  0613                     	;# 
  1989  0614                     	;# 
  1990  0617                     	;# 
  1991  0618                     	;# 
  1992  0619                     	;# 
  1993  061A                     	;# 
  1994  061B                     	;# 
  1995  061C                     	;# 
  1996  0691                     	;# 
  1997  0692                     	;# 
  1998  0693                     	;# 
  1999  0694                     	;# 
  2000  0695                     	;# 
  2001  0696                     	;# 
  2002  0697                     	;# 
  2003  0699                     	;# 
  2004  069A                     	;# 
  2005  0711                     	;# 
  2006  0712                     	;# 
  2007  0713                     	;# 
  2008  0714                     	;# 
  2009  0715                     	;# 
  2010  0718                     	;# 
  2011  0718                     	;# 
  2012  0719                     	;# 
  2013  071A                     	;# 
  2014  071A                     	;# 
  2015  071B                     	;# 
  2016  071C                     	;# 
  2017  071D                     	;# 
  2018  0791                     	;# 
  2019  0791                     	;# 
  2020  0792                     	;# 
  2021  0793                     	;# 
  2022  0793                     	;# 
  2023  0794                     	;# 
  2024  0795                     	;# 
  2025  0795                     	;# 
  2026  0796                     	;# 
  2027  0797                     	;# 
  2028  0797                     	;# 
  2029  0798                     	;# 
  2030  0799                     	;# 
  2031  079A                     	;# 
  2032  080C                     	;# 
  2033  080C                     	;# 
  2034  080D                     	;# 
  2035  080E                     	;# 
  2036  080E                     	;# 
  2037  080F                     	;# 
  2038  0810                     	;# 
  2039  0810                     	;# 
  2040  0811                     	;# 
  2041  0812                     	;# 
  2042  0812                     	;# 
  2043  0813                     	;# 
  2044  0814                     	;# 
  2045  0815                     	;# 
  2046  0816                     	;# 
  2047  0817                     	;# 
  2048  0818                     	;# 
  2049  0819                     	;# 
  2050  081A                     	;# 
  2051  081A                     	;# 
  2052  081B                     	;# 
  2053  081C                     	;# 
  2054  081C                     	;# 
  2055  081D                     	;# 
  2056  088C                     	;# 
  2057  088D                     	;# 
  2058  088E                     	;# 
  2059  088F                     	;# 
  2060  088F                     	;# 
  2061  0890                     	;# 
  2062  0891                     	;# 
  2063  0892                     	;# 
  2064  0893                     	;# 
  2065  0893                     	;# 
  2066  0894                     	;# 
  2067  0895                     	;# 
  2068  0896                     	;# 
  2069  0897                     	;# 
  2070  0897                     	;# 
  2071  0898                     	;# 
  2072  0899                     	;# 
  2073  0D8C                     	;# 
  2074  0D8C                     	;# 
  2075  0D8D                     	;# 
  2076  0D8E                     	;# 
  2077  0D8F                     	;# 
  2078  0D8F                     	;# 
  2079  0D90                     	;# 
  2080  0D91                     	;# 
  2081  0D92                     	;# 
  2082  0D92                     	;# 
  2083  0D93                     	;# 
  2084  0D94                     	;# 
  2085  0D95                     	;# 
  2086  0D95                     	;# 
  2087  0D96                     	;# 
  2088  0D97                     	;# 
  2089  0D98                     	;# 
  2090  0D99                     	;# 
  2091  0D9A                     	;# 
  2092  0D9B                     	;# 
  2093  0D9C                     	;# 
  2094  0D9D                     	;# 
  2095  0D9E                     	;# 
  2096  0D9E                     	;# 
  2097  0D9F                     	;# 
  2098  0DA0                     	;# 
  2099  0DA1                     	;# 
  2100  0DA1                     	;# 
  2101  0DA2                     	;# 
  2102  0DA3                     	;# 
  2103  0DA4                     	;# 
  2104  0DA4                     	;# 
  2105  0DA5                     	;# 
  2106  0DA6                     	;# 
  2107  0DA7                     	;# 
  2108  0DA7                     	;# 
  2109  0DA8                     	;# 
  2110  0DA9                     	;# 
  2111  0DAA                     	;# 
  2112  0DAB                     	;# 
  2113  0DAC                     	;# 
  2114  0DAD                     	;# 
  2115  0DAE                     	;# 
  2116  0DAF                     	;# 
  2117  0E0F                     	;# 
  2118  0E10                     	;# 
  2119  0E11                     	;# 
  2120  0E12                     	;# 
  2121  0E13                     	;# 
  2122  0E14                     	;# 
  2123  0E15                     	;# 
  2124  0E16                     	;# 
  2125  0E17                     	;# 
  2126  0E18                     	;# 
  2127  0E19                     	;# 
  2128  0E1A                     	;# 
  2129  0E1B                     	;# 
  2130  0E1C                     	;# 
  2131  0E1D                     	;# 
  2132  0E1E                     	;# 
  2133  0E1F                     	;# 
  2134  0E20                     	;# 
  2135  0E21                     	;# 
  2136  0E22                     	;# 
  2137  0E23                     	;# 
  2138  0E24                     	;# 
  2139  0E25                     	;# 
  2140  0E26                     	;# 
  2141  0E27                     	;# 
  2142  0E28                     	;# 
  2143  0E29                     	;# 
  2144  0E2A                     	;# 
  2145  0E2B                     	;# 
  2146  0E2C                     	;# 
  2147  0E2D                     	;# 
  2148  0E2E                     	;# 
  2149  0E90                     	;# 
  2150  0E91                     	;# 
  2151  0E92                     	;# 
  2152  0E94                     	;# 
  2153  0E95                     	;# 
  2154  0E9C                     	;# 
  2155  0E9D                     	;# 
  2156  0E9E                     	;# 
  2157  0E9F                     	;# 
  2158  0EA0                     	;# 
  2159  0EA1                     	;# 
  2160  0EA2                     	;# 
  2161  0EA3                     	;# 
  2162  0EA4                     	;# 
  2163  0EA5                     	;# 
  2164  0EA6                     	;# 
  2165  0EA7                     	;# 
  2166  0F0F                     	;# 
  2167  0F10                     	;# 
  2168  0F11                     	;# 
  2169  0F12                     	;# 
  2170  0F13                     	;# 
  2171  0F14                     	;# 
  2172  0F15                     	;# 
  2173  0F16                     	;# 
  2174  0F17                     	;# 
  2175  0F18                     	;# 
  2176  0F19                     	;# 
  2177  0F1A                     	;# 
  2178  0F1B                     	;# 
  2179  0F1C                     	;# 
  2180  0F1D                     	;# 
  2181  0F1E                     	;# 
  2182  0F1F                     	;# 
  2183  0F20                     	;# 
  2184  0F21                     	;# 
  2185  0F22                     	;# 
  2186  0F23                     	;# 
  2187  0F24                     	;# 
  2188  0F25                     	;# 
  2189  0F26                     	;# 
  2190  0F27                     	;# 
  2191  0F28                     	;# 
  2192  0F29                     	;# 
  2193  0F2A                     	;# 
  2194  0F2B                     	;# 
  2195  0F2C                     	;# 
  2196  0F2D                     	;# 
  2197  0F2E                     	;# 
  2198  0F2F                     	;# 
  2199  0F30                     	;# 
  2200  0F31                     	;# 
  2201  0F32                     	;# 
  2202  0F33                     	;# 
  2203  0F34                     	;# 
  2204  0F35                     	;# 
  2205  0F36                     	;# 
  2206  0F37                     	;# 
  2207  0FE4                     	;# 
  2208  0FE5                     	;# 
  2209  0FE6                     	;# 
  2210  0FE7                     	;# 
  2211  0FE8                     	;# 
  2212  0FE9                     	;# 
  2213  0FEA                     	;# 
  2214  0FEB                     	;# 
  2215  0FED                     	;# 
  2216  0FEE                     	;# 
  2217  0FEF                     	;# 
  2218  0000                     	;# 
  2219  0001                     	;# 
  2220  0002                     	;# 
  2221  0003                     	;# 
  2222  0004                     	;# 
  2223  0005                     	;# 
  2224  0006                     	;# 
  2225  0007                     	;# 
  2226  0008                     	;# 
  2227  0009                     	;# 
  2228  000A                     	;# 
  2229  000B                     	;# 
  2230  000C                     	;# 
  2231  000D                     	;# 
  2232  000E                     	;# 
  2233  0010                     	;# 
  2234  0011                     	;# 
  2235  0012                     	;# 
  2236  0013                     	;# 
  2237  0014                     	;# 
  2238  0015                     	;# 
  2239  0016                     	;# 
  2240  0016                     	;# 
  2241  0017                     	;# 
  2242  0018                     	;# 
  2243  0019                     	;# 
  2244  001A                     	;# 
  2245  001A                     	;# 
  2246  001B                     	;# 
  2247  001B                     	;# 
  2248  001C                     	;# 
  2249  001D                     	;# 
  2250  001E                     	;# 
  2251  001F                     	;# 
  2252  008C                     	;# 
  2253  008D                     	;# 
  2254  008E                     	;# 
  2255  0090                     	;# 
  2256  0091                     	;# 
  2257  0092                     	;# 
  2258  0093                     	;# 
  2259  0094                     	;# 
  2260  0095                     	;# 
  2261  0096                     	;# 
  2262  0098                     	;# 
  2263  0099                     	;# 
  2264  009A                     	;# 
  2265  009B                     	;# 
  2266  009B                     	;# 
  2267  009C                     	;# 
  2268  009D                     	;# 
  2269  009E                     	;# 
  2270  009F                     	;# 
  2271  010C                     	;# 
  2272  010D                     	;# 
  2273  010E                     	;# 
  2274  0111                     	;# 
  2275  0112                     	;# 
  2276  0113                     	;# 
  2277  0114                     	;# 
  2278  0115                     	;# 
  2279  0116                     	;# 
  2280  0117                     	;# 
  2281  0118                     	;# 
  2282  0119                     	;# 
  2283  011C                     	;# 
  2284  018C                     	;# 
  2285  018D                     	;# 
  2286  018E                     	;# 
  2287  0191                     	;# 
  2288  0191                     	;# 
  2289  0192                     	;# 
  2290  0193                     	;# 
  2291  0193                     	;# 
  2292  0194                     	;# 
  2293  0195                     	;# 
  2294  0196                     	;# 
  2295  0197                     	;# 
  2296  0199                     	;# 
  2297  0199                     	;# 
  2298  0199                     	;# 
  2299  019A                     	;# 
  2300  019A                     	;# 
  2301  019A                     	;# 
  2302  019B                     	;# 
  2303  019B                     	;# 
  2304  019B                     	;# 
  2305  019B                     	;# 
  2306  019B                     	;# 
  2307  019C                     	;# 
  2308  019C                     	;# 
  2309  019C                     	;# 
  2310  019D                     	;# 
  2311  019D                     	;# 
  2312  019D                     	;# 
  2313  019E                     	;# 
  2314  019E                     	;# 
  2315  019E                     	;# 
  2316  019F                     	;# 
  2317  019F                     	;# 
  2318  019F                     	;# 
  2319  019F                     	;# 
  2320  019F                     	;# 
  2321  020C                     	;# 
  2322  020D                     	;# 
  2323  020E                     	;# 
  2324  0211                     	;# 
  2325  0211                     	;# 
  2326  0212                     	;# 
  2327  0212                     	;# 
  2328  0213                     	;# 
  2329  0213                     	;# 
  2330  0214                     	;# 
  2331  0214                     	;# 
  2332  0215                     	;# 
  2333  0215                     	;# 
  2334  0215                     	;# 
  2335  0215                     	;# 
  2336  0216                     	;# 
  2337  0216                     	;# 
  2338  0217                     	;# 
  2339  0217                     	;# 
  2340  028C                     	;# 
  2341  028D                     	;# 
  2342  028E                     	;# 
  2343  0291                     	;# 
  2344  0291                     	;# 
  2345  0292                     	;# 
  2346  0293                     	;# 
  2347  0294                     	;# 
  2348  0298                     	;# 
  2349  0298                     	;# 
  2350  0299                     	;# 
  2351  029A                     	;# 
  2352  029B                     	;# 
  2353  029E                     	;# 
  2354  030C                     	;# 
  2355  030D                     	;# 
  2356  030E                     	;# 
  2357  038C                     	;# 
  2358  038D                     	;# 
  2359  038E                     	;# 
  2360  0391                     	;# 
  2361  0392                     	;# 
  2362  0393                     	;# 
  2363  0394                     	;# 
  2364  0395                     	;# 
  2365  0396                     	;# 
  2366  0397                     	;# 
  2367  0398                     	;# 
  2368  0399                     	;# 
  2369  040E                     	;# 
  2370  0413                     	;# 
  2371  0413                     	;# 
  2372  0414                     	;# 
  2373  0414                     	;# 
  2374  0415                     	;# 
  2375  0416                     	;# 
  2376  0417                     	;# 
  2377  0418                     	;# 
  2378  041A                     	;# 
  2379  041A                     	;# 
  2380  041B                     	;# 
  2381  041B                     	;# 
  2382  041C                     	;# 
  2383  041D                     	;# 
  2384  041E                     	;# 
  2385  041F                     	;# 
  2386  0493                     	;# 
  2387  0494                     	;# 
  2388  0495                     	;# 
  2389  0496                     	;# 
  2390  049A                     	;# 
  2391  049B                     	;# 
  2392  049C                     	;# 
  2393  049D                     	;# 
  2394  058C                     	;# 
  2395  058C                     	;# 
  2396  058D                     	;# 
  2397  058E                     	;# 
  2398  058E                     	;# 
  2399  058F                     	;# 
  2400  0590                     	;# 
  2401  0590                     	;# 
  2402  0591                     	;# 
  2403  0592                     	;# 
  2404  0592                     	;# 
  2405  0593                     	;# 
  2406  0594                     	;# 
  2407  0594                     	;# 
  2408  0595                     	;# 
  2409  0596                     	;# 
  2410  0596                     	;# 
  2411  0597                     	;# 
  2412  0598                     	;# 
  2413  0599                     	;# 
  2414  059A                     	;# 
  2415  059B                     	;# 
  2416  059B                     	;# 
  2417  059C                     	;# 
  2418  059D                     	;# 
  2419  060C                     	;# 
  2420  060C                     	;# 
  2421  060D                     	;# 
  2422  060E                     	;# 
  2423  060F                     	;# 
  2424  060F                     	;# 
  2425  0610                     	;# 
  2426  0611                     	;# 
  2427  0612                     	;# 
  2428  0613                     	;# 
  2429  0614                     	;# 
  2430  0617                     	;# 
  2431  0618                     	;# 
  2432  0619                     	;# 
  2433  061A                     	;# 
  2434  061B                     	;# 
  2435  061C                     	;# 
  2436  0691                     	;# 
  2437  0692                     	;# 
  2438  0693                     	;# 
  2439  0694                     	;# 
  2440  0695                     	;# 
  2441  0696                     	;# 
  2442  0697                     	;# 
  2443  0699                     	;# 
  2444  069A                     	;# 
  2445  0711                     	;# 
  2446  0712                     	;# 
  2447  0713                     	;# 
  2448  0714                     	;# 
  2449  0715                     	;# 
  2450  0718                     	;# 
  2451  0718                     	;# 
  2452  0719                     	;# 
  2453  071A                     	;# 
  2454  071A                     	;# 
  2455  071B                     	;# 
  2456  071C                     	;# 
  2457  071D                     	;# 
  2458  0791                     	;# 
  2459  0791                     	;# 
  2460  0792                     	;# 
  2461  0793                     	;# 
  2462  0793                     	;# 
  2463  0794                     	;# 
  2464  0795                     	;# 
  2465  0795                     	;# 
  2466  0796                     	;# 
  2467  0797                     	;# 
  2468  0797                     	;# 
  2469  0798                     	;# 
  2470  0799                     	;# 
  2471  079A                     	;# 
  2472  080C                     	;# 
  2473  080C                     	;# 
  2474  080D                     	;# 
  2475  080E                     	;# 
  2476  080E                     	;# 
  2477  080F                     	;# 
  2478  0810                     	;# 
  2479  0810                     	;# 
  2480  0811                     	;# 
  2481  0812                     	;# 
  2482  0812                     	;# 
  2483  0813                     	;# 
  2484  0814                     	;# 
  2485  0815                     	;# 
  2486  0816                     	;# 
  2487  0817                     	;# 
  2488  0818                     	;# 
  2489  0819                     	;# 
  2490  081A                     	;# 
  2491  081A                     	;# 
  2492  081B                     	;# 
  2493  081C                     	;# 
  2494  081C                     	;# 
  2495  081D                     	;# 
  2496  088C                     	;# 
  2497  088D                     	;# 
  2498  088E                     	;# 
  2499  088F                     	;# 
  2500  088F                     	;# 
  2501  0890                     	;# 
  2502  0891                     	;# 
  2503  0892                     	;# 
  2504  0893                     	;# 
  2505  0893                     	;# 
  2506  0894                     	;# 
  2507  0895                     	;# 
  2508  0896                     	;# 
  2509  0897                     	;# 
  2510  0897                     	;# 
  2511  0898                     	;# 
  2512  0899                     	;# 
  2513  0D8C                     	;# 
  2514  0D8C                     	;# 
  2515  0D8D                     	;# 
  2516  0D8E                     	;# 
  2517  0D8F                     	;# 
  2518  0D8F                     	;# 
  2519  0D90                     	;# 
  2520  0D91                     	;# 
  2521  0D92                     	;# 
  2522  0D92                     	;# 
  2523  0D93                     	;# 
  2524  0D94                     	;# 
  2525  0D95                     	;# 
  2526  0D95                     	;# 
  2527  0D96                     	;# 
  2528  0D97                     	;# 
  2529  0D98                     	;# 
  2530  0D99                     	;# 
  2531  0D9A                     	;# 
  2532  0D9B                     	;# 
  2533  0D9C                     	;# 
  2534  0D9D                     	;# 
  2535  0D9E                     	;# 
  2536  0D9E                     	;# 
  2537  0D9F                     	;# 
  2538  0DA0                     	;# 
  2539  0DA1                     	;# 
  2540  0DA1                     	;# 
  2541  0DA2                     	;# 
  2542  0DA3                     	;# 
  2543  0DA4                     	;# 
  2544  0DA4                     	;# 
  2545  0DA5                     	;# 
  2546  0DA6                     	;# 
  2547  0DA7                     	;# 
  2548  0DA7                     	;# 
  2549  0DA8                     	;# 
  2550  0DA9                     	;# 
  2551  0DAA                     	;# 
  2552  0DAB                     	;# 
  2553  0DAC                     	;# 
  2554  0DAD                     	;# 
  2555  0DAE                     	;# 
  2556  0DAF                     	;# 
  2557  0E0F                     	;# 
  2558  0E10                     	;# 
  2559  0E11                     	;# 
  2560  0E12                     	;# 
  2561  0E13                     	;# 
  2562  0E14                     	;# 
  2563  0E15                     	;# 
  2564  0E16                     	;# 
  2565  0E17                     	;# 
  2566  0E18                     	;# 
  2567  0E19                     	;# 
  2568  0E1A                     	;# 
  2569  0E1B                     	;# 
  2570  0E1C                     	;# 
  2571  0E1D                     	;# 
  2572  0E1E                     	;# 
  2573  0E1F                     	;# 
  2574  0E20                     	;# 
  2575  0E21                     	;# 
  2576  0E22                     	;# 
  2577  0E23                     	;# 
  2578  0E24                     	;# 
  2579  0E25                     	;# 
  2580  0E26                     	;# 
  2581  0E27                     	;# 
  2582  0E28                     	;# 
  2583  0E29                     	;# 
  2584  0E2A                     	;# 
  2585  0E2B                     	;# 
  2586  0E2C                     	;# 
  2587  0E2D                     	;# 
  2588  0E2E                     	;# 
  2589  0E90                     	;# 
  2590  0E91                     	;# 
  2591  0E92                     	;# 
  2592  0E94                     	;# 
  2593  0E95                     	;# 
  2594  0E9C                     	;# 
  2595  0E9D                     	;# 
  2596  0E9E                     	;# 
  2597  0E9F                     	;# 
  2598  0EA0                     	;# 
  2599  0EA1                     	;# 
  2600  0EA2                     	;# 
  2601  0EA3                     	;# 
  2602  0EA4                     	;# 
  2603  0EA5                     	;# 
  2604  0EA6                     	;# 
  2605  0EA7                     	;# 
  2606  0F0F                     	;# 
  2607  0F10                     	;# 
  2608  0F11                     	;# 
  2609  0F12                     	;# 
  2610  0F13                     	;# 
  2611  0F14                     	;# 
  2612  0F15                     	;# 
  2613  0F16                     	;# 
  2614  0F17                     	;# 
  2615  0F18                     	;# 
  2616  0F19                     	;# 
  2617  0F1A                     	;# 
  2618  0F1B                     	;# 
  2619  0F1C                     	;# 
  2620  0F1D                     	;# 
  2621  0F1E                     	;# 
  2622  0F1F                     	;# 
  2623  0F20                     	;# 
  2624  0F21                     	;# 
  2625  0F22                     	;# 
  2626  0F23                     	;# 
  2627  0F24                     	;# 
  2628  0F25                     	;# 
  2629  0F26                     	;# 
  2630  0F27                     	;# 
  2631  0F28                     	;# 
  2632  0F29                     	;# 
  2633  0F2A                     	;# 
  2634  0F2B                     	;# 
  2635  0F2C                     	;# 
  2636  0F2D                     	;# 
  2637  0F2E                     	;# 
  2638  0F2F                     	;# 
  2639  0F30                     	;# 
  2640  0F31                     	;# 
  2641  0F32                     	;# 
  2642  0F33                     	;# 
  2643  0F34                     	;# 
  2644  0F35                     	;# 
  2645  0F36                     	;# 
  2646  0F37                     	;# 
  2647  0FE4                     	;# 
  2648  0FE5                     	;# 
  2649  0FE6                     	;# 
  2650  0FE7                     	;# 
  2651  0FE8                     	;# 
  2652  0FE9                     	;# 
  2653  0FEA                     	;# 
  2654  0FEB                     	;# 
  2655  0FED                     	;# 
  2656  0FEE                     	;# 
  2657  0FEF                     	;# 
  2658                           
  2659                           	psect	stringtext
  2660  07DA                     __pstringtext:	
  2661  07DA                     _dpowers:	
  2662  07DA  3401               	retlw	1
  2663  07DB  3400               	retlw	0
  2664  07DC  3400               	retlw	0
  2665  07DD  3400               	retlw	0
  2666  07DE  340A               	retlw	10
  2667  07DF  3400               	retlw	0
  2668  07E0  3400               	retlw	0
  2669  07E1  3400               	retlw	0
  2670  07E2  3464               	retlw	100
  2671  07E3  3400               	retlw	0
  2672  07E4  3400               	retlw	0
  2673  07E5  3400               	retlw	0
  2674  07E6  34E8               	retlw	232
  2675  07E7  3403               	retlw	3
  2676  07E8  3400               	retlw	0
  2677  07E9  3400               	retlw	0
  2678  07EA  3410               	retlw	16
  2679  07EB  3427               	retlw	39
  2680  07EC  3400               	retlw	0
  2681  07ED  3400               	retlw	0
  2682  07EE  34A0               	retlw	160
  2683  07EF  3486               	retlw	134
  2684  07F0  3401               	retlw	1
  2685  07F1  3400               	retlw	0
  2686  07F2  3440               	retlw	64
  2687  07F3  3442               	retlw	66
  2688  07F4  340F               	retlw	15
  2689  07F5  3400               	retlw	0
  2690  07F6  3480               	retlw	128
  2691  07F7  3496               	retlw	150
  2692  07F8  3498               	retlw	152
  2693  07F9  3400               	retlw	0
  2694  07FA  3400               	retlw	0
  2695  07FB  34E1               	retlw	225
  2696  07FC  34F5               	retlw	245
  2697  07FD  3405               	retlw	5
  2698  07FE  3400               	retlw	0
  2699  07FF  34CA               	retlw	202
  2700  0800  349A               	retlw	154
  2701  0801  343B               	retlw	59
  2702  0802                     __end_of_dpowers:	
  2703  0802                     STR_3:	
  2704  0802  342D               	retlw	45	;'-'
  2705  0803  3432               	retlw	50	;'2'
  2706  0804  3431               	retlw	49	;'1'
  2707  0805  3434               	retlw	52	;'4'
  2708  0806  3437               	retlw	55	;'7'
  2709  0807  3434               	retlw	52	;'4'
  2710  0808  3438               	retlw	56	;'8'
  2711  0809  3433               	retlw	51	;'3'
  2712  080A  3436               	retlw	54	;'6'
  2713  080B  3434               	retlw	52	;'4'
  2714  080C  3438               	retlw	56	;'8'
  2715  080D  3400               	retlw	0
  2716  080E                     STR_6:	
  2717  080E  3431               	retlw	49	;'1'
  2718  080F  3432               	retlw	50	;'2'
  2719  0810  3430               	retlw	48	;'0'
  2720  0811  3433               	retlw	51	;'3'
  2721  0812  3437               	retlw	55	;'7'
  2722  0813  3436               	retlw	54	;'6'
  2723  0814  3439               	retlw	57	;'9'
  2724  0815  3437               	retlw	55	;'7'
  2725  0816  3438               	retlw	56	;'8'
  2726  0817  3430               	retlw	48	;'0'
  2727  0818  3400               	retlw	0
  2728  0819                     STR_4:	
  2729  0819  3432               	retlw	50	;'2'
  2730  081A  3431               	retlw	49	;'1'
  2731  081B  3433               	retlw	51	;'3'
  2732  081C  3436               	retlw	54	;'6'
  2733  081D  3437               	retlw	55	;'7'
  2734  081E  3434               	retlw	52	;'4'
  2735  081F  3437               	retlw	55	;'7'
  2736  0820  3438               	retlw	56	;'8'
  2737  0821  3438               	retlw	56	;'8'
  2738  0822  3430               	retlw	48	;'0'
  2739  0823  3400               	retlw	0
  2740  0824                     STR_5:	
  2741  0824  342D               	retlw	45	;'-'
  2742  0825  3438               	retlw	56	;'8'
  2743  0826  3434               	retlw	52	;'4'
  2744  0827  3433               	retlw	51	;'3'
  2745  0828  3439               	retlw	57	;'9'
  2746  0829  3439               	retlw	57	;'9'
  2747  082A  3435               	retlw	53	;'5'
  2748  082B  3439               	retlw	57	;'9'
  2749  082C  3431               	retlw	49	;'1'
  2750  082D  3435               	retlw	53	;'5'
  2751  082E  3400               	retlw	0
  2752  082F                     STR_2:	
  2753  082F  3432               	retlw	50	;'2'
  2754  0830  3431               	retlw	49	;'1'
  2755  0831  3434               	retlw	52	;'4'
  2756  0832  3437               	retlw	55	;'7'
  2757  0833  3434               	retlw	52	;'4'
  2758  0834  3438               	retlw	56	;'8'
  2759  0835  3433               	retlw	51	;'3'
  2760  0836  3436               	retlw	54	;'6'
  2761  0837  3434               	retlw	52	;'4'
  2762  0838  3437               	retlw	55	;'7'
  2763  0839  3400               	retlw	0
  2764  083A                     STR_7:	
  2765  083A  3425               	retlw	37	;'%'
  2766  083B  346C               	retlw	108	;'l'
  2767  083C  3464               	retlw	100	;'d'
  2768  083D  3400               	retlw	0
  2769  0817                     
  2770                           ; #config settings
  2771  0000                     
  2772                           	psect	nvBANK0
  2773  0068                     __pnvBANK0:	
  2774  0068                     _timer1ReloadVal:	
  2775  0068                     	ds	2
  2776  006A                     _eusartTxBufferRemaining:	
  2777  006A                     	ds	1
  2778  0010                     _PIR1bits	set	16
  2779  0018                     _T1CON	set	24
  2780  0018                     _T1CONbits	set	24
  2781  0019                     _T1GCON	set	25
  2782  0017                     _TMR1H	set	23
  2783  0016                     _TMR1L	set	22
  2784  005F                     _GIE	set	95
  2785  0095                     _OPTION_REGbits	set	149
  2786  0099                     _OSCCON	set	153
  2787  0098                     _OSCTUNE	set	152
  2788  0090                     _PIE1bits	set	144
  2789  008C                     _TRISA	set	140
  2790  008D                     _TRISB	set	141
  2791  008E                     _TRISC	set	142
  2792  010C                     _LATA	set	268
  2793  010D                     _LATB	set	269
  2794  010E                     _LATC	set	270
  2795  0860                     _LATA0	set	2144
  2796  018C                     _ANSELA	set	396
  2797  018D                     _ANSELB	set	397
  2798  018E                     _ANSELC	set	398
  2799  019F                     _BAUD1CON	set	415
  2800  0199                     _RC1REG	set	409
  2801  019D                     _RC1STA	set	413
  2802  019D                     _RC1STAbits	set	413
  2803  019C                     _SPBRGH	set	412
  2804  019B                     _SPBRGL	set	411
  2805  019A                     _TX1REG	set	410
  2806  019E                     _TX1STA	set	414
  2807  020C                     _WPUA	set	524
  2808  020D                     _WPUB	set	525
  2809  020E                     _WPUC	set	526
  2810  0E0F                     _PPSLOCK	set	3599
  2811  0E0F                     _PPSLOCKbits	set	3599
  2812  0E9F                     _RB7PPS	set	3743
  2813                           
  2814                           	psect	cinit
  2815  001C                     start_initialization:	
  2816  001C                     __initialization:	
  2817                           
  2818                           ; Clear objects allocated to BANK0
  2819  001C  3020               	movlw	low __pbssBANK0
  2820  001D  0084               	movwf	4
  2821  001E  3000               	movlw	high __pbssBANK0
  2822  001F  0085               	movwf	5
  2823  0020  302A               	movlw	42
  2824  0021  3186  2664  3180   	fcall	clear_ram0
  2825                           
  2826                           ; Clear objects allocated to BANK1
  2827  0024  30A0               	movlw	low __pbssBANK1
  2828  0025  0084               	movwf	4
  2829  0026  3000               	movlw	high __pbssBANK1
  2830  0027  0085               	movwf	5
  2831  0028  3044               	movlw	68
  2832  0029  3186  2664  3180   	fcall	clear_ram0
  2833  002C                     end_of_initialization:	
  2834                           ;End of C runtime variable initialization code
  2835                           
  2836  002C                     __end_of__initialization:	
  2837  002C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2838  002D  0020               	movlb	0
  2839  002E  282F               	ljmp	_main	;jump to C main() function
  2840  002F                     __pmaintext:	
  2841 ;;
  2842 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2843 ;;
  2844 ;; *************** function _main *****************
  2845 ;; Defined at:
  2846 ;;		line 126 in file "main.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;		None
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;		None
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      void 
  2853 ;; Registers used:
  2854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : B1F/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2864 ;;Total ram usage:        0 bytes
  2865 ;; Hardware stack levels required when called:    5
  2866 ;; This function calls:
  2867 ;;		_SYSTEM_Initialize
  2868 ;;		_TEST_SetUp
  2869 ;;		_TEST_TearDown
  2870 ;;		_test_IntToStr
  2871 ;;		_test_IntToStr_Int16PerfTest
  2872 ;;		_test_IntToStr_Int32PerfTest
  2873 ;;		_test_IntToStr_Int8PerfTest
  2874 ;;		_test_UintToStr_Uint16PerfTest
  2875 ;;		_test_UintToStr_Uint32PerfTest
  2876 ;;		_test_UintToStr_Uint8PerfTest
  2877 ;;		_test_sprintf_Int32PerfTest
  2878 ;; This function is called by:
  2879 ;;		Startup code after reset
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           
  2884                           ;psect for function _main
  2885  002F                     _main:	
  2886                           
  2887                           ;main.c: 128: SYSTEM_Initialize();
  2888                           
  2889                           ;incstack = 0
  2890                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2891  002F  207A  3180         	fcall	_SYSTEM_Initialize
  2892                           
  2893                           ;main.c: 130: TEST_SetUp(); test_IntToStr(); TEST_TearDown();
  2894  0031  2063  3180         	fcall	_TEST_SetUp
  2895  0033  20CB  3180         	fcall	_test_IntToStr
  2896  0035  206D  3180         	fcall	_TEST_TearDown
  2897                           
  2898                           ;main.c: 131: TEST_SetUp(); test_UintToStr_Uint8PerfTest(); TEST_TearDown();
  2899  0037  2063  3180         	fcall	_TEST_SetUp
  2900  0039  2181  3180         	fcall	_test_UintToStr_Uint8PerfTest
  2901  003B  206D  3180         	fcall	_TEST_TearDown
  2902                           
  2903                           ;main.c: 132: TEST_SetUp(); test_UintToStr_Uint16PerfTest(); TEST_TearDown();
  2904  003D  2063  3180         	fcall	_TEST_SetUp
  2905  003F  2173  3180         	fcall	_test_UintToStr_Uint16PerfTest
  2906  0041  206D  3180         	fcall	_TEST_TearDown
  2907                           
  2908                           ;main.c: 133: TEST_SetUp(); test_UintToStr_Uint32PerfTest(); TEST_TearDown();
  2909  0043  2063  3180         	fcall	_TEST_SetUp
  2910  0045  217A  3180         	fcall	_test_UintToStr_Uint32PerfTest
  2911  0047  206D  3180         	fcall	_TEST_TearDown
  2912                           
  2913                           ;main.c: 134: TEST_SetUp(); test_IntToStr_Int8PerfTest(); TEST_TearDown();
  2914  0049  2063  3180         	fcall	_TEST_SetUp
  2915  004B  216A  3180         	fcall	_test_IntToStr_Int8PerfTest
  2916  004D  206D  3180         	fcall	_TEST_TearDown
  2917                           
  2918                           ;main.c: 135: TEST_SetUp(); test_IntToStr_Int16PerfTest(); TEST_TearDown();
  2919  004F  2063  3180         	fcall	_TEST_SetUp
  2920  0051  2159  3180         	fcall	_test_IntToStr_Int16PerfTest
  2921  0053  206D  3180         	fcall	_TEST_TearDown
  2922                           
  2923                           ;main.c: 136: TEST_SetUp(); test_IntToStr_Int32PerfTest(); TEST_TearDown();
  2924  0055  2063  3180         	fcall	_TEST_SetUp
  2925  0057  2162  3180         	fcall	_test_IntToStr_Int32PerfTest
  2926  0059  206D  3180         	fcall	_TEST_TearDown
  2927                           
  2928                           ;main.c: 137: TEST_SetUp(); test_sprintf_Int32PerfTest(); TEST_TearDown();
  2929  005B  2063  3180         	fcall	_TEST_SetUp
  2930  005D  2188  3180         	fcall	_test_sprintf_Int32PerfTest
  2931  005F  206D  3180         	fcall	_TEST_TearDown
  2932  0061                     l2044:	
  2933                           
  2934                           ;main.c: 140: __builtin_software_breakpoint();
  2935  0061  0003               	dw	3
  2936  0062  2861               	goto	l2044
  2937  0063                     __end_of_main:	
  2938  0063                     __ptext17:	
  2939 ;; *************** function _TEST_SetUp *****************
  2940 ;; Defined at:
  2941 ;;		line 58 in file "main.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;		None
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;		None
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      void 
  2948 ;; Registers used:
  2949 ;;		wreg, status,2, status,0, pclath, cstack
  2950 ;; Tracked objects:
  2951 ;;		On entry : 1E/1
  2952 ;;		On exit  : 1F/2
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2959 ;;Total ram usage:        0 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    3
  2962 ;; This function calls:
  2963 ;;		_TMR1_StartTimer
  2964 ;;		_TMR1_StopTimer
  2965 ;;		_TMR1_WriteTimer
  2966 ;; This function is called by:
  2967 ;;		_main
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           
  2972                           ;psect for function _TEST_SetUp
  2973  0063                     _TEST_SetUp:	
  2974                           
  2975                           ;main.c: 59: TMR1_StopTimer();
  2976                           
  2977                           ;incstack = 0
  2978                           ; Regs used in _TEST_SetUp: [wreg+status,2+status,0+pclath+cstack]
  2979  0063  20BA  3180         	fcall	_TMR1_StopTimer
  2980                           
  2981                           ;main.c: 60: TMR1_WriteTimer(0);
  2982  0065  01F0               	clrf	TMR1_WriteTimer@timerVal
  2983  0066  01F1               	clrf	TMR1_WriteTimer@timerVal+1
  2984  0067  20BD  3180         	fcall	_TMR1_WriteTimer
  2985                           
  2986                           ;main.c: 61: TMR1_StartTimer();
  2987  0069  21B7               	fcall	_TMR1_StartTimer
  2988  006A  0022               	movlb	2	; select bank2
  2989  006B  140C               	bsf	12,0	;volatile
  2990  006C  0008               	return
  2991  006D                     __end_of_TEST_SetUp:	
  2992  006D                     __ptext15:	
  2993 ;; *************** function _TEST_TearDown *****************
  2994 ;; Defined at:
  2995 ;;		line 65 in file "main.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;		None
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;		None
  3000 ;; Return value:  Size  Location     Type
  3001 ;;                  1    wreg      void 
  3002 ;; Registers used:
  3003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3004 ;; Tracked objects:
  3005 ;;		On entry : 1D/2
  3006 ;;		On exit  : 1F/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3013 ;;Total ram usage:        0 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    3
  3016 ;; This function calls:
  3017 ;;		_TMR1_ReadTimer
  3018 ;; This function is called by:
  3019 ;;		_main
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           
  3024                           ;psect for function _TEST_TearDown
  3025  006D                     _TEST_TearDown:	
  3026                           
  3027                           ;incstack = 0
  3028                           ; Regs used in _TEST_TearDown: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3029                           ;main.c: 66: do { LATA0 = 0; } while(0);
  3030  006D  0022               	movlb	2	; select bank2
  3031  006E  100C               	bcf	12,0	;volatile
  3032                           
  3033                           ;main.c: 67: testLength[testCount] = TMR1_ReadTimer();
  3034  006F  21B9               	fcall	_TMR1_ReadTimer
  3035  0070  352B               	lslf	_testCount,w
  3036  0071  3EA0               	addlw	(low (_testLength| 0))& (0+255)
  3037  0072  0086               	movwf	6
  3038  0073  0187               	clrf	7
  3039  0074  0870               	movf	?_TMR1_ReadTimer,w
  3040  0075  3FC0               	movwi [0]fsr1
  3041  0076  0871               	movf	?_TMR1_ReadTimer+1,w
  3042  0077  3FC1               	movwi [1]fsr1
  3043                           
  3044                           ;main.c: 68: testCount++;
  3045  0078  0AAB               	incf	_testCount,f
  3046  0079  0008               	return
  3047  007A                     __end_of_TEST_TearDown:	
  3048  007A                     __ptext20:	
  3049 ;; *************** function _SYSTEM_Initialize *****************
  3050 ;; Defined at:
  3051 ;;		line 76 in file "mcc_generated_files/mcc.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;		None
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;		None
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  1    wreg      void 
  3058 ;; Registers used:
  3059 ;;		wreg, status,2, status,0, pclath, cstack
  3060 ;; Tracked objects:
  3061 ;;		On entry : B1F/0
  3062 ;;		On exit  : 1F/1
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3069 ;;Total ram usage:        0 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; Hardware stack levels required when called:    4
  3072 ;; This function calls:
  3073 ;;		_EUSART_Initialize
  3074 ;;		_OSCILLATOR_Initialize
  3075 ;;		_PIN_MANAGER_Initialize
  3076 ;;		_TMR1_Initialize
  3077 ;; This function is called by:
  3078 ;;		_main
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           
  3083                           ;psect for function _SYSTEM_Initialize
  3084  007A                     _SYSTEM_Initialize:	
  3085                           
  3086                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  3087                           
  3088                           ;incstack = 0
  3089                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3090  007A  2086  3180         	fcall	_PIN_MANAGER_Initialize
  3091                           
  3092                           ;mcc.c: 80: OSCILLATOR_Initialize();
  3093  007C  2081  3180         	fcall	_OSCILLATOR_Initialize
  3094                           
  3095                           ;mcc.c: 81: TMR1_Initialize();
  3096  007E  21AA  3180         	fcall	_TMR1_Initialize
  3097                           
  3098                           ;mcc.c: 82: EUSART_Initialize();
  3099  0080  2994               	ljmp	l1824
  3100  0081                     __end_of_SYSTEM_Initialize:	
  3101  0081                     __ptext24:	
  3102 ;; *************** function _OSCILLATOR_Initialize *****************
  3103 ;; Defined at:
  3104 ;;		line 85 in file "mcc_generated_files/mcc.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;		None
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  1    wreg      void 
  3111 ;; Registers used:
  3112 ;;		wreg, status,2
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 1F/1
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3122 ;;Total ram usage:        0 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:    2
  3125 ;; This function calls:
  3126 ;;		Nothing
  3127 ;; This function is called by:
  3128 ;;		_SYSTEM_Initialize
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           
  3133                           ;psect for function _OSCILLATOR_Initialize
  3134  0081                     _OSCILLATOR_Initialize:	
  3135                           
  3136                           ;mcc.c: 88: OSCCON = 0x70;
  3137                           
  3138                           ;incstack = 0
  3139                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3140  0081  3070               	movlw	112
  3141  0082  0021               	movlb	1	; select bank1
  3142  0083  0099               	movwf	25	;volatile
  3143                           
  3144                           ;mcc.c: 90: OSCTUNE = 0x00;
  3145  0084  0198               	clrf	24	;volatile
  3146  0085  0008               	return
  3147  0086                     __end_of_OSCILLATOR_Initialize:	
  3148  0086                     __ptext23:	
  3149 ;; *************** function _PIN_MANAGER_Initialize *****************
  3150 ;; Defined at:
  3151 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  state           1    0[COMMON] unsigned char 
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      void 
  3158 ;; Registers used:
  3159 ;;		wreg, status,2
  3160 ;; Tracked objects:
  3161 ;;		On entry : B1F/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3168 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3169 ;;Total ram usage:        1 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    2
  3172 ;; This function calls:
  3173 ;;		Nothing
  3174 ;; This function is called by:
  3175 ;;		_SYSTEM_Initialize
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           
  3180                           ;psect for function _PIN_MANAGER_Initialize
  3181  0086                     _PIN_MANAGER_Initialize:	
  3182                           
  3183                           ;pin_manager.c: 52: LATB = 0x0;
  3184                           
  3185                           ;incstack = 0
  3186                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3187  0086  0022               	movlb	2	; select bank2
  3188  0087  018D               	clrf	13	;volatile
  3189                           
  3190                           ;pin_manager.c: 53: LATA = 0x0;
  3191  0088  018C               	clrf	12	;volatile
  3192                           
  3193                           ;pin_manager.c: 54: LATC = 0x0;
  3194  0089  018E               	clrf	14	;volatile
  3195                           
  3196                           ;pin_manager.c: 55: WPUA = 0x3E;
  3197  008A  303E               	movlw	62
  3198  008B  0024               	movlb	4	; select bank4
  3199  008C  008C               	movwf	12	;volatile
  3200                           
  3201                           ;pin_manager.c: 56: WPUB = 0xF0;
  3202  008D  30F0               	movlw	240
  3203  008E  008D               	movwf	13	;volatile
  3204                           
  3205                           ;pin_manager.c: 57: WPUC = 0xFF;
  3206  008F  30FF               	movlw	255
  3207  0090  008E               	movwf	14	;volatile
  3208                           
  3209                           ;pin_manager.c: 58: ANSELA = 0x16;
  3210  0091  3016               	movlw	22
  3211  0092  0023               	movlb	3	; select bank3
  3212  0093  008C               	movwf	12	;volatile
  3213                           
  3214                           ;pin_manager.c: 59: ANSELB = 0xF0;
  3215  0094  30F0               	movlw	240
  3216  0095  008D               	movwf	13	;volatile
  3217                           
  3218                           ;pin_manager.c: 60: ANSELC = 0xCF;
  3219  0096  30CF               	movlw	207
  3220  0097  008E               	movwf	14	;volatile
  3221                           
  3222                           ;pin_manager.c: 61: TRISB = 0x70;
  3223  0098  3070               	movlw	112
  3224  0099  0021               	movlb	1	; select bank1
  3225  009A  008D               	movwf	13	;volatile
  3226                           
  3227                           ;pin_manager.c: 62: TRISC = 0xFF;
  3228  009B  30FF               	movlw	255
  3229  009C  008E               	movwf	14	;volatile
  3230                           
  3231                           ;pin_manager.c: 63: TRISA = 0x36;
  3232  009D  3036               	movlw	54
  3233  009E  008C               	movwf	12	;volatile
  3234                           
  3235                           ;pin_manager.c: 65: OPTION_REGbits.nWPUEN = 0x1;
  3236  009F  1795               	bsf	21,7	;volatile
  3237                           
  3238                           ;pin_manager.c: 68: bool state = GIE;
  3239  00A0  3000               	movlw	0
  3240  00A1  1B8B               	btfsc	11,7	;volatile
  3241  00A2  3001               	movlw	1
  3242  00A3  00F0               	movwf	PIN_MANAGER_Initialize@state
  3243                           
  3244                           ;pin_manager.c: 69: GIE = 0;
  3245  00A4  138B               	bcf	11,7	;volatile
  3246                           
  3247                           ;pin_manager.c: 70: PPSLOCK = 0x55;
  3248  00A5  3055               	movlw	85
  3249  00A6  003C               	movlb	28	; select bank28
  3250  00A7  008F               	movwf	15	;volatile
  3251                           
  3252                           ;pin_manager.c: 71: PPSLOCK = 0xAA;
  3253  00A8  30AA               	movlw	170
  3254  00A9  008F               	movwf	15	;volatile
  3255                           
  3256                           ;pin_manager.c: 72: PPSLOCKbits.PPSLOCKED = 0x00;
  3257  00AA  100F               	bcf	15,0	;volatile
  3258                           
  3259                           ;pin_manager.c: 74: RB7PPS = 0x12;
  3260  00AB  3012               	movlw	18
  3261  00AC  003D               	movlb	29	; select bank29
  3262  00AD  009F               	movwf	31	;volatile
  3263                           
  3264                           ;pin_manager.c: 76: PPSLOCK = 0x55;
  3265  00AE  3055               	movlw	85
  3266  00AF  003C               	movlb	28	; select bank28
  3267  00B0  008F               	movwf	15	;volatile
  3268                           
  3269                           ;pin_manager.c: 77: PPSLOCK = 0xAA;
  3270  00B1  30AA               	movlw	170
  3271  00B2  008F               	movwf	15	;volatile
  3272                           
  3273                           ;pin_manager.c: 78: PPSLOCKbits.PPSLOCKED = 0x01;
  3274  00B3  140F               	bsf	15,0	;volatile
  3275                           
  3276                           ;pin_manager.c: 80: GIE = state;
  3277  00B4  1C70               	btfss	PIN_MANAGER_Initialize@state,0
  3278  00B5  28B8               	goto	u670
  3279  00B6  178B               	bsf	11,7	;volatile
  3280  00B7  0008               	return
  3281  00B8                     u670:	
  3282  00B8  138B               	bcf	11,7	;volatile
  3283  00B9  0008               	return
  3284  00BA                     __end_of_PIN_MANAGER_Initialize:	
  3285  00BA                     __ptext19:	
  3286 ;; *************** function _TMR1_StopTimer *****************
  3287 ;; Defined at:
  3288 ;;		line 94 in file "mcc_generated_files/tmr1.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;		None
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		None
  3297 ;; Tracked objects:
  3298 ;;		On entry : 1E/1
  3299 ;;		On exit  : 1F/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3306 ;;Total ram usage:        0 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    2
  3309 ;; This function calls:
  3310 ;;		Nothing
  3311 ;; This function is called by:
  3312 ;;		_TEST_SetUp
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           
  3317                           ;psect for function _TMR1_StopTimer
  3318  00BA                     _TMR1_StopTimer:	
  3319                           
  3320                           ;tmr1.c: 97: T1CONbits.TMR1ON = 0;
  3321                           
  3322                           ;incstack = 0
  3323                           ; Regs used in _TMR1_StopTimer: []
  3324  00BA  0020               	movlb	0	; select bank0
  3325  00BB  1018               	bcf	24,0	;volatile
  3326  00BC  0008               	return
  3327  00BD                     __end_of_TMR1_StopTimer:	
  3328  00BD                     __ptext18:	
  3329 ;; *************** function _TMR1_WriteTimer *****************
  3330 ;; Defined at:
  3331 ;;		line 109 in file "mcc_generated_files/tmr1.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  timerVal        2    0[COMMON] unsigned int 
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;		None
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  1    wreg      void 
  3338 ;; Registers used:
  3339 ;;		wreg
  3340 ;; Tracked objects:
  3341 ;;		On entry : 1F/0
  3342 ;;		On exit  : 1F/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3345 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3348 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3349 ;;Total ram usage:        2 bytes
  3350 ;; Hardware stack levels used:    1
  3351 ;; Hardware stack levels required when called:    2
  3352 ;; This function calls:
  3353 ;;		Nothing
  3354 ;; This function is called by:
  3355 ;;		_TEST_SetUp
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           
  3360                           ;psect for function _TMR1_WriteTimer
  3361  00BD                     _TMR1_WriteTimer:	
  3362                           
  3363                           ;tmr1.c: 111: if (T1CONbits.nT1SYNC == 1)
  3364                           
  3365                           ;incstack = 0
  3366                           ; Regs used in _TMR1_WriteTimer: [wreg]
  3367  00BD  1D18               	btfss	24,2	;volatile
  3368  00BE  28C6               	goto	l1850
  3369                           
  3370                           ;tmr1.c: 112: {
  3371                           ;tmr1.c: 114: T1CONbits.TMR1ON = 0;
  3372  00BF  1018               	bcf	24,0	;volatile
  3373                           
  3374                           ;tmr1.c: 117: TMR1H = (timerVal >> 8);
  3375  00C0  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  3376  00C1  0097               	movwf	23	;volatile
  3377                           
  3378                           ;tmr1.c: 118: TMR1L = timerVal;
  3379  00C2  0870               	movf	TMR1_WriteTimer@timerVal,w
  3380  00C3  0096               	movwf	22	;volatile
  3381                           
  3382                           ;tmr1.c: 121: T1CONbits.TMR1ON =1;
  3383  00C4  1418               	bsf	24,0	;volatile
  3384                           
  3385                           ;tmr1.c: 122: }
  3386  00C5  0008               	return
  3387  00C6                     l1850:	
  3388                           
  3389                           ;tmr1.c: 123: else
  3390                           ;tmr1.c: 124: {
  3391                           ;tmr1.c: 126: TMR1H = (timerVal >> 8);
  3392  00C6  0871               	movf	TMR1_WriteTimer@timerVal+1,w
  3393  00C7  0097               	movwf	23	;volatile
  3394                           
  3395                           ;tmr1.c: 127: TMR1L = timerVal;
  3396  00C8  0870               	movf	TMR1_WriteTimer@timerVal,w
  3397  00C9  0096               	movwf	22	;volatile
  3398  00CA  0008               	return
  3399  00CB                     __end_of_TMR1_WriteTimer:	
  3400  00CB                     __ptext11:	
  3401 ;; *************** function _test_IntToStr *****************
  3402 ;; Defined at:
  3403 ;;		line 75 in file "main.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;		None
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;		None
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      void 
  3410 ;; Registers used:
  3411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3412 ;; Tracked objects:
  3413 ;;		On entry : 1F/2
  3414 ;;		On exit  : 1D/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3421 ;;Total ram usage:        0 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    4
  3424 ;; This function calls:
  3425 ;;		_FAST_IntToStr
  3426 ;;		_TEST_ASSERT_EQUAL_STRING
  3427 ;; This function is called by:
  3428 ;;		_main
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           
  3433                           ;psect for function _test_IntToStr
  3434  00CB                     _test_IntToStr:	
  3435                           
  3436                           ;main.c: 77: FAST_IntToStr(str, 0);
  3437                           
  3438                           ;incstack = 0
  3439                           ; Regs used in _test_IntToStr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3440  00CB  0020               	movlb	0	; select bank0
  3441  00CC  302C               	movlw	(low (_str| 0))& (0+255)
  3442  00CD  01CA               	clrf	FAST_IntToStr@num
  3443  00CE  01CB               	clrf	FAST_IntToStr@num+1
  3444  00CF  01CC               	clrf	FAST_IntToStr@num+2
  3445  00D0  01CD               	clrf	FAST_IntToStr@num+3
  3446  00D1  213A  3180         	fcall	_FAST_IntToStr
  3447                           
  3448                           ;main.c: 78: TEST_ASSERT_EQUAL_STRING("0", str);
  3449  00D3  3017               	movlw	low ((STR_6+9)| (0+32768))
  3450  00D4  00F0               	movwf	TEST_ASSERT_EQUAL_STRING@a
  3451  00D5  3088               	movlw	high ((STR_6+9)| (0+32768))
  3452  00D6  00F1               	movwf	TEST_ASSERT_EQUAL_STRING@a+1
  3453  00D7  302C               	movlw	(low (_str| 0))& (0+255)
  3454  00D8  00F2               	movwf	TEST_ASSERT_EQUAL_STRING@b
  3455  00D9  2158  3180         	fcall	_TEST_ASSERT_EQUAL_STRING
  3456                           
  3457                           ;main.c: 81: FAST_IntToStr(str, (2147483647L));
  3458  00DB  307F               	movlw	127
  3459  00DC  0020               	movlb	0	; select bank0
  3460  00DD  00CD               	movwf	FAST_IntToStr@num+3
  3461  00DE  30FF               	movlw	255
  3462  00DF  00CC               	movwf	FAST_IntToStr@num+2
  3463  00E0  00CB               	movwf	FAST_IntToStr@num+1
  3464  00E1  00CA               	movwf	FAST_IntToStr@num
  3465  00E2  302C               	movlw	(low (_str| 0))& (0+255)
  3466  00E3  213A  3180         	fcall	_FAST_IntToStr
  3467                           
  3468                           ;main.c: 82: TEST_ASSERT_EQUAL_STRING("2147483647", str);
  3469  00E5  302F               	movlw	low (STR_2| (0+32768))
  3470  00E6  00F0               	movwf	TEST_ASSERT_EQUAL_STRING@a
  3471  00E7  3088               	movlw	high (STR_2| (0+32768))
  3472  00E8  00F1               	movwf	TEST_ASSERT_EQUAL_STRING@a+1
  3473  00E9  302C               	movlw	(low (_str| 0))& (0+255)
  3474  00EA  00F2               	movwf	TEST_ASSERT_EQUAL_STRING@b
  3475  00EB  2158  3180         	fcall	_TEST_ASSERT_EQUAL_STRING
  3476                           
  3477                           ;main.c: 83: FAST_IntToStr(str, (-2147483648L));
  3478  00ED  3080               	movlw	128
  3479  00EE  0020               	movlb	0	; select bank0
  3480  00EF  00CD               	movwf	FAST_IntToStr@num+3
  3481  00F0  3000               	movlw	0
  3482  00F1  00CC               	movwf	FAST_IntToStr@num+2
  3483  00F2  00CB               	movwf	FAST_IntToStr@num+1
  3484  00F3  00CA               	movwf	FAST_IntToStr@num
  3485  00F4  302C               	movlw	(low (_str| 0))& (0+255)
  3486  00F5  213A  3180         	fcall	_FAST_IntToStr
  3487                           
  3488                           ;main.c: 84: TEST_ASSERT_EQUAL_STRING("-2147483648", str);
  3489  00F7  3002               	movlw	low (STR_3| (0+32768))
  3490  00F8  00F0               	movwf	TEST_ASSERT_EQUAL_STRING@a
  3491  00F9  3088               	movlw	high (STR_3| (0+32768))
  3492  00FA  00F1               	movwf	TEST_ASSERT_EQUAL_STRING@a+1
  3493  00FB  302C               	movlw	(low (_str| 0))& (0+255)
  3494  00FC  00F2               	movwf	TEST_ASSERT_EQUAL_STRING@b
  3495  00FD  2158  3180         	fcall	_TEST_ASSERT_EQUAL_STRING
  3496                           
  3497                           ;main.c: 87: FAST_IntToStr(str, 2136747880);
  3498  00FF  307F               	movlw	127
  3499  0100  0020               	movlb	0	; select bank0
  3500  0101  00CD               	movwf	FAST_IntToStr@num+3
  3501  0102  305C               	movlw	92
  3502  0103  00CC               	movwf	FAST_IntToStr@num+2
  3503  0104  302F               	movlw	47
  3504  0105  00CB               	movwf	FAST_IntToStr@num+1
  3505  0106  3068               	movlw	104
  3506  0107  00CA               	movwf	FAST_IntToStr@num
  3507  0108  302C               	movlw	(low (_str| 0))& (0+255)
  3508  0109  213A  3180         	fcall	_FAST_IntToStr
  3509                           
  3510                           ;main.c: 88: TEST_ASSERT_EQUAL_STRING("2136747880", str);
  3511  010B  3019               	movlw	low (STR_4| (0+32768))
  3512  010C  00F0               	movwf	TEST_ASSERT_EQUAL_STRING@a
  3513  010D  3088               	movlw	high (STR_4| (0+32768))
  3514  010E  00F1               	movwf	TEST_ASSERT_EQUAL_STRING@a+1
  3515  010F  302C               	movlw	(low (_str| 0))& (0+255)
  3516  0110  00F2               	movwf	TEST_ASSERT_EQUAL_STRING@b
  3517  0111  2158  3180         	fcall	_TEST_ASSERT_EQUAL_STRING
  3518                           
  3519                           ;main.c: 89: FAST_IntToStr(str, -843995915);
  3520  0113  30CD               	movlw	205
  3521  0114  0020               	movlb	0	; select bank0
  3522  0115  00CD               	movwf	FAST_IntToStr@num+3
  3523  0116  30B1               	movlw	177
  3524  0117  00CC               	movwf	FAST_IntToStr@num+2
  3525  0118  30A4               	movlw	164
  3526  0119  00CB               	movwf	FAST_IntToStr@num+1
  3527  011A  30F5               	movlw	245
  3528  011B  00CA               	movwf	FAST_IntToStr@num
  3529  011C  302C               	movlw	(low (_str| 0))& (0+255)
  3530  011D  213A  3180         	fcall	_FAST_IntToStr
  3531                           
  3532                           ;main.c: 90: TEST_ASSERT_EQUAL_STRING("-843995915", str);
  3533  011F  3024               	movlw	low (STR_5| (0+32768))
  3534  0120  00F0               	movwf	TEST_ASSERT_EQUAL_STRING@a
  3535  0121  3088               	movlw	high (STR_5| (0+32768))
  3536  0122  00F1               	movwf	TEST_ASSERT_EQUAL_STRING@a+1
  3537  0123  302C               	movlw	(low (_str| 0))& (0+255)
  3538  0124  00F2               	movwf	TEST_ASSERT_EQUAL_STRING@b
  3539  0125  2158  3180         	fcall	_TEST_ASSERT_EQUAL_STRING
  3540                           
  3541                           ;main.c: 91: FAST_IntToStr(str, 1203769780);
  3542  0127  3047               	movlw	71
  3543  0128  0020               	movlb	0	; select bank0
  3544  0129  00CD               	movwf	FAST_IntToStr@num+3
  3545  012A  30C0               	movlw	192
  3546  012B  00CC               	movwf	FAST_IntToStr@num+2
  3547  012C  3011               	movlw	17
  3548  012D  00CB               	movwf	FAST_IntToStr@num+1
  3549  012E  30B4               	movlw	180
  3550  012F  00CA               	movwf	FAST_IntToStr@num
  3551  0130  302C               	movlw	(low (_str| 0))& (0+255)
  3552  0131  213A  3180         	fcall	_FAST_IntToStr
  3553                           
  3554                           ;main.c: 92: TEST_ASSERT_EQUAL_STRING("1203769780", str);
  3555  0133  300E               	movlw	low (STR_6| (0+32768))
  3556  0134  00F0               	movwf	TEST_ASSERT_EQUAL_STRING@a
  3557  0135  3088               	movlw	high (STR_6| (0+32768))
  3558  0136  00F1               	movwf	TEST_ASSERT_EQUAL_STRING@a+1
  3559  0137  302C               	movlw	(low (_str| 0))& (0+255)
  3560  0138  00F2               	movwf	TEST_ASSERT_EQUAL_STRING@b
  3561  0139  2958               	ljmp	l229
  3562  013A                     __end_of_test_IntToStr:	
  3563  013A                     __ptext13:	
  3564 ;; *************** function _FAST_IntToStr *****************
  3565 ;; Defined at:
  3566 ;;		line 163 in file "../src/fast_int_to_str.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;  str             1    wreg     PTR unsigned char 
  3569 ;;		 -> str(30), 
  3570 ;;  num             4    0[BANK0 ] long 
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  str             1   11[COMMON] PTR unsigned char 
  3573 ;;		 -> str(30), 
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      void 
  3576 ;; Registers used:
  3577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3578 ;; Tracked objects:
  3579 ;;		On entry : 1F/0
  3580 ;;		On exit  : 1D/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3583 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3586 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3587 ;;Total ram usage:        5 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    3
  3590 ;; This function calls:
  3591 ;;		_FAST_UintToStr
  3592 ;; This function is called by:
  3593 ;;		_test_IntToStr
  3594 ;;		_test_IntToStr_Int8PerfTest
  3595 ;;		_test_IntToStr_Int16PerfTest
  3596 ;;		_test_IntToStr_Int32PerfTest
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           
  3601                           ;psect for function _FAST_IntToStr
  3602  013A                     _FAST_IntToStr:	
  3603                           
  3604                           ;incstack = 0
  3605                           ; Regs used in _FAST_IntToStr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3606                           ;FAST_IntToStr@str stored from wreg
  3607  013A  00FB               	movwf	FAST_IntToStr@str
  3608                           
  3609                           ;fast_int_to_str.c: 164: if (0 > num) {
  3610  013B  1FCD               	btfss	FAST_IntToStr@num+3,7
  3611  013C  294E               	goto	l1860
  3612                           
  3613                           ;fast_int_to_str.c: 165: *str = '-';
  3614  013D  087B               	movf	FAST_IntToStr@str,w
  3615  013E  0086               	movwf	6
  3616  013F  302D               	movlw	45
  3617  0140  0187               	clrf	7
  3618  0141  0081               	movwf	1
  3619                           
  3620                           ;fast_int_to_str.c: 166: str++;
  3621  0142  0AFB               	incf	FAST_IntToStr@str,f
  3622                           
  3623                           ;fast_int_to_str.c: 167: num = -num;
  3624  0143  09CA               	comf	FAST_IntToStr@num,f
  3625  0144  09CB               	comf	FAST_IntToStr@num+1,f
  3626  0145  09CC               	comf	FAST_IntToStr@num+2,f
  3627  0146  09CD               	comf	FAST_IntToStr@num+3,f
  3628  0147  0ACA               	incf	FAST_IntToStr@num,f
  3629  0148  1903               	skipnz
  3630  0149  0ACB               	incf	FAST_IntToStr@num+1,f
  3631  014A  1903               	skipnz
  3632  014B  0ACC               	incf	FAST_IntToStr@num+2,f
  3633  014C  1903               	skipnz
  3634  014D  0ACD               	incf	FAST_IntToStr@num+3,f
  3635  014E                     l1860:	
  3636                           
  3637                           ;fast_int_to_str.c: 168: }
  3638                           ;fast_int_to_str.c: 169: FAST_UintToStr(str, num);
  3639  014E  084D               	movf	FAST_IntToStr@num+3,w
  3640  014F  00F3               	movwf	FAST_UintToStr@num+3
  3641  0150  084C               	movf	FAST_IntToStr@num+2,w
  3642  0151  00F2               	movwf	FAST_UintToStr@num+2
  3643  0152  084B               	movf	FAST_IntToStr@num+1,w
  3644  0153  00F1               	movwf	FAST_UintToStr@num+1
  3645  0154  084A               	movf	FAST_IntToStr@num,w
  3646  0155  00F0               	movwf	FAST_UintToStr@num
  3647  0156  087B               	movf	FAST_IntToStr@str,w
  3648  0157  2B1E               	ljmp	_FAST_UintToStr
  3649  0158                     __end_of_FAST_IntToStr:	
  3650  0158                     __ptext12:	
  3651 ;; *************** function _TEST_ASSERT_EQUAL_STRING *****************
  3652 ;; Defined at:
  3653 ;;		line 71 in file "main.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;  a               2    0[COMMON] PTR const unsigned char 
  3656 ;;		 -> STR_6(11), STR_5(11), STR_4(11), STR_3(12), 
  3657 ;;		 -> STR_2(11), STR_1(2), 
  3658 ;;  b               1    2[COMMON] PTR const unsigned char 
  3659 ;;		 -> str(30), 
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;		None
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  1    wreg      void 
  3664 ;; Registers used:
  3665 ;;		None
  3666 ;; Tracked objects:
  3667 ;;		On entry : 1D/2
  3668 ;;		On exit  : 1D/0
  3669 ;;		Unchanged: 1D/0
  3670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3671 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3674 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3675 ;;Total ram usage:        3 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    2
  3678 ;; This function calls:
  3679 ;;		Nothing
  3680 ;; This function is called by:
  3681 ;;		_test_IntToStr
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           
  3686                           ;psect for function _TEST_ASSERT_EQUAL_STRING
  3687  0158                     _TEST_ASSERT_EQUAL_STRING:	
  3688  0158                     l229:	
  3689                           ;incstack = 0
  3690                           ; Regs used in _TEST_ASSERT_EQUAL_STRING: []
  3691                           
  3692  0158  0008               	return
  3693  0159                     __end_of_TEST_ASSERT_EQUAL_STRING:	
  3694  0159                     __ptext10:	
  3695 ;; *************** function _test_IntToStr_Int16PerfTest *****************
  3696 ;; Defined at:
  3697 ;;		line 111 in file "main.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;		None
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;		None
  3702 ;; Return value:  Size  Location     Type
  3703 ;;                  1    wreg      void 
  3704 ;; Registers used:
  3705 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3706 ;; Tracked objects:
  3707 ;;		On entry : 1F/2
  3708 ;;		On exit  : 1D/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3715 ;;Total ram usage:        0 bytes
  3716 ;; Hardware stack levels used:    1
  3717 ;; Hardware stack levels required when called:    4
  3718 ;; This function calls:
  3719 ;;		_FAST_IntToStr
  3720 ;; This function is called by:
  3721 ;;		_main
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           
  3726                           ;psect for function _test_IntToStr_Int16PerfTest
  3727  0159                     _test_IntToStr_Int16PerfTest:	
  3728                           
  3729                           ;main.c: 112: FAST_IntToStr(str, (-32768));
  3730                           
  3731                           ;incstack = 0
  3732                           ; Regs used in _test_IntToStr_Int16PerfTest: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  3733  0159  30FF               	movlw	255
  3734  015A  0020               	movlb	0	; select bank0
  3735  015B  00CD               	movwf	FAST_IntToStr@num+3
  3736  015C  00CC               	movwf	FAST_IntToStr@num+2
  3737  015D  3080               	movlw	128
  3738  015E  00CB               	movwf	FAST_IntToStr@num+1
  3739  015F  302C               	movlw	(low (_str| 0))& (0+255)
  3740  0160  01CA               	clrf	FAST_IntToStr@num
  3741  0161  293A               	ljmp	_FAST_IntToStr
  3742  0162                     __end_of_test_IntToStr_Int16PerfTest:	
  3743  0162                     __ptext9:	
  3744 ;; *************** function _test_IntToStr_Int32PerfTest *****************
  3745 ;; Defined at:
  3746 ;;		line 115 in file "main.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;		None
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;		None
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  1    wreg      void 
  3753 ;; Registers used:
  3754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 1F/2
  3757 ;;		On exit  : 1D/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3764 ;;Total ram usage:        0 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; Hardware stack levels required when called:    4
  3767 ;; This function calls:
  3768 ;;		_FAST_IntToStr
  3769 ;; This function is called by:
  3770 ;;		_main
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774                           
  3775                           ;psect for function _test_IntToStr_Int32PerfTest
  3776  0162                     _test_IntToStr_Int32PerfTest:	
  3777                           
  3778                           ;main.c: 116: FAST_IntToStr(str, (-2147483648L));
  3779                           
  3780                           ;incstack = 0
  3781                           ; Regs used in _test_IntToStr_Int32PerfTest: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  3782  0162  3080               	movlw	128
  3783  0163  0020               	movlb	0	; select bank0
  3784  0164  00CD               	movwf	FAST_IntToStr@num+3
  3785  0165  302C               	movlw	(low (_str| 0))& (0+255)
  3786  0166  01CC               	clrf	FAST_IntToStr@num+2
  3787  0167  01CB               	clrf	FAST_IntToStr@num+1
  3788  0168  01CA               	clrf	FAST_IntToStr@num
  3789  0169  293A               	ljmp	_FAST_IntToStr
  3790  016A                     __end_of_test_IntToStr_Int32PerfTest:	
  3791  016A                     __ptext8:	
  3792 ;; *************** function _test_IntToStr_Int8PerfTest *****************
  3793 ;; Defined at:
  3794 ;;		line 107 in file "main.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;		None
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  1    wreg      void 
  3801 ;; Registers used:
  3802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3803 ;; Tracked objects:
  3804 ;;		On entry : 1F/2
  3805 ;;		On exit  : 1D/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3812 ;;Total ram usage:        0 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    4
  3815 ;; This function calls:
  3816 ;;		_FAST_IntToStr
  3817 ;; This function is called by:
  3818 ;;		_main
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           
  3823                           ;psect for function _test_IntToStr_Int8PerfTest
  3824  016A                     _test_IntToStr_Int8PerfTest:	
  3825                           
  3826                           ;main.c: 108: FAST_IntToStr(str, (-128));
  3827                           
  3828                           ;incstack = 0
  3829                           ; Regs used in _test_IntToStr_Int8PerfTest: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3830  016A  30FF               	movlw	255
  3831  016B  0020               	movlb	0	; select bank0
  3832  016C  00CD               	movwf	FAST_IntToStr@num+3
  3833  016D  00CC               	movwf	FAST_IntToStr@num+2
  3834  016E  00CB               	movwf	FAST_IntToStr@num+1
  3835  016F  3080               	movlw	128
  3836  0170  00CA               	movwf	FAST_IntToStr@num
  3837  0171  302C               	movlw	(low (_str| 0))& (0+255)
  3838  0172  293A               	ljmp	_FAST_IntToStr
  3839  0173                     __end_of_test_IntToStr_Int8PerfTest:	
  3840  0173                     __ptext7:	
  3841 ;; *************** function _test_UintToStr_Uint16PerfTest *****************
  3842 ;; Defined at:
  3843 ;;		line 99 in file "main.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;		None
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;		None
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  1    wreg      void 
  3850 ;; Registers used:
  3851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 1F/2
  3854 ;;		On exit  : 1D/0
  3855 ;;		Unchanged: 1D/0
  3856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3861 ;;Total ram usage:        0 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    3
  3864 ;; This function calls:
  3865 ;;		_FAST_UintToStr
  3866 ;; This function is called by:
  3867 ;;		_main
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           
  3872                           ;psect for function _test_UintToStr_Uint16PerfTest
  3873  0173                     _test_UintToStr_Uint16PerfTest:	
  3874                           
  3875                           ;main.c: 100: FAST_UintToStr(str, (65535U));
  3876                           
  3877                           ;incstack = 0
  3878                           ; Regs used in _test_UintToStr_Uint16PerfTest: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  3879  0173  30FF               	movlw	255
  3880  0174  01F3               	clrf	FAST_UintToStr@num+3
  3881  0175  01F2               	clrf	FAST_UintToStr@num+2
  3882  0176  00F1               	movwf	FAST_UintToStr@num+1
  3883  0177  00F0               	movwf	FAST_UintToStr@num
  3884  0178  302C               	movlw	(low (_str| 0))& (0+255)
  3885  0179  2B1E               	ljmp	_FAST_UintToStr
  3886  017A                     __end_of_test_UintToStr_Uint16PerfTest:	
  3887  017A                     __ptext6:	
  3888 ;; *************** function _test_UintToStr_Uint32PerfTest *****************
  3889 ;; Defined at:
  3890 ;;		line 103 in file "main.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 1F/2
  3901 ;;		On exit  : 1D/0
  3902 ;;		Unchanged: 1D/0
  3903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    3
  3911 ;; This function calls:
  3912 ;;		_FAST_UintToStr
  3913 ;; This function is called by:
  3914 ;;		_main
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           
  3919                           ;psect for function _test_UintToStr_Uint32PerfTest
  3920  017A                     _test_UintToStr_Uint32PerfTest:	
  3921                           
  3922                           ;main.c: 104: FAST_UintToStr(str, (4294967295UL));
  3923                           
  3924                           ;incstack = 0
  3925                           ; Regs used in _test_UintToStr_Uint32PerfTest: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  3926  017A  30FF               	movlw	255
  3927  017B  00F0               	movwf	FAST_UintToStr@num
  3928  017C  00F1               	movwf	FAST_UintToStr@num+1
  3929  017D  00F2               	movwf	FAST_UintToStr@num+2
  3930  017E  00F3               	movwf	FAST_UintToStr@num+3
  3931  017F  302C               	movlw	(low (_str| 0))& (0+255)
  3932  0180  2B1E               	ljmp	_FAST_UintToStr
  3933  0181                     __end_of_test_UintToStr_Uint32PerfTest:	
  3934  0181                     __ptext5:	
  3935 ;; *************** function _test_UintToStr_Uint8PerfTest *****************
  3936 ;; Defined at:
  3937 ;;		line 95 in file "main.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;		None
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;		None
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  1    wreg      void 
  3944 ;; Registers used:
  3945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3946 ;; Tracked objects:
  3947 ;;		On entry : 1F/2
  3948 ;;		On exit  : 1D/0
  3949 ;;		Unchanged: 1D/0
  3950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;Total ram usage:        0 bytes
  3956 ;; Hardware stack levels used:    1
  3957 ;; Hardware stack levels required when called:    3
  3958 ;; This function calls:
  3959 ;;		_FAST_UintToStr
  3960 ;; This function is called by:
  3961 ;;		_main
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           
  3966                           ;psect for function _test_UintToStr_Uint8PerfTest
  3967  0181                     _test_UintToStr_Uint8PerfTest:	
  3968                           
  3969                           ;main.c: 96: FAST_UintToStr(str, (255));
  3970                           
  3971                           ;incstack = 0
  3972                           ; Regs used in _test_UintToStr_Uint8PerfTest: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  3973  0181  30FF               	movlw	255
  3974  0182  00F0               	movwf	FAST_UintToStr@num
  3975  0183  302C               	movlw	(low (_str| 0))& (0+255)
  3976  0184  01F1               	clrf	FAST_UintToStr@num+1
  3977  0185  01F2               	clrf	FAST_UintToStr@num+2
  3978  0186  01F3               	clrf	FAST_UintToStr@num+3
  3979  0187  2B1E               	ljmp	_FAST_UintToStr
  3980  0188                     __end_of_test_UintToStr_Uint8PerfTest:	
  3981  0188                     __ptext1:	
  3982 ;; *************** function _test_sprintf_Int32PerfTest *****************
  3983 ;; Defined at:
  3984 ;;		line 119 in file "main.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;		None
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      void 
  3991 ;; Registers used:
  3992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3993 ;; Tracked objects:
  3994 ;;		On entry : 1F/2
  3995 ;;		On exit  : 1F/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4002 ;;Total ram usage:        0 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    4
  4005 ;; This function calls:
  4006 ;;		_sprintf
  4007 ;; This function is called by:
  4008 ;;		_main
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           
  4013                           ;psect for function _test_sprintf_Int32PerfTest
  4014  0188                     _test_sprintf_Int32PerfTest:	
  4015                           
  4016                           ;main.c: 120: sprintf(str, "%ld", (-2147483648L));
  4017                           
  4018                           ;incstack = 0
  4019                           ; Regs used in _test_sprintf_Int32PerfTest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4020  0188  303A               	movlw	low (STR_7| (0+32768))
  4021  0189  0020               	movlb	0	; select bank0
  4022  018A  00D2               	movwf	sprintf@f
  4023  018B  3088               	movlw	high (STR_7| (0+32768))
  4024  018C  00D3               	movwf	sprintf@f+1
  4025  018D  3080               	movlw	128
  4026  018E  00D7               	movwf	?_sprintf+5
  4027  018F  302C               	movlw	(low (_str| 0))& (0+255)
  4028  0190  01D6               	clrf	?_sprintf+4
  4029  0191  01D5               	clrf	?_sprintf+3
  4030  0192  01D4               	clrf	?_sprintf+2
  4031  0193  29C4               	ljmp	_sprintf
  4032  0194                     __end_of_test_sprintf_Int32PerfTest:	
  4033  0194                     __ptext25:	
  4034 ;; *************** function _EUSART_Initialize *****************
  4035 ;; Defined at:
  4036 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;		None
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;		None
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  1    wreg      void 
  4043 ;; Registers used:
  4044 ;;		wreg, status,2
  4045 ;; Tracked objects:
  4046 ;;		On entry : 1F/0
  4047 ;;		On exit  : 1F/1
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4054 ;;Total ram usage:        0 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    2
  4057 ;; This function calls:
  4058 ;;		Nothing
  4059 ;; This function is called by:
  4060 ;;		_SYSTEM_Initialize
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           
  4065                           ;psect for function _EUSART_Initialize
  4066  0194                     _EUSART_Initialize:	
  4067  0194                     l1824:	
  4068                           ;incstack = 0
  4069                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4070                           
  4071                           
  4072                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  4073  0194  0021               	movlb	1	; select bank1
  4074  0195  1290               	bcf	16,5	;volatile
  4075                           
  4076                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  4077  0196  1210               	bcf	16,4	;volatile
  4078                           
  4079                           ;eusart.c: 84: BAUD1CON = 0x08;
  4080  0197  3008               	movlw	8
  4081  0198  0023               	movlb	3	; select bank3
  4082  0199  009F               	movwf	31	;volatile
  4083                           
  4084                           ;eusart.c: 87: RC1STA = 0x80;
  4085  019A  3080               	movlw	128
  4086  019B  009D               	movwf	29	;volatile
  4087                           
  4088                           ;eusart.c: 90: TX1STA = 0x24;
  4089  019C  3024               	movlw	36
  4090  019D  009E               	movwf	30	;volatile
  4091                           
  4092                           ;eusart.c: 93: SPBRGL = 0x44;
  4093  019E  3044               	movlw	68
  4094  019F  009B               	movwf	27	;volatile
  4095                           
  4096                           ;eusart.c: 100: eusartTxHead = 0;
  4097  01A0  019C               	clrf	28	;volatile
  4098                           
  4099                           ;eusart.c: 101: eusartTxTail = 0;
  4100  01A1  0020               	movlb	0	; select bank0
  4101  01A2  3008               	movlw	8
  4102  01A3  01AA               	clrf	_eusartTxTail
  4103                           
  4104                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  4105  01A4  00EA               	movwf	_eusartTxBufferRemaining	;volatile
  4106                           
  4107                           ;eusart.c: 105: eusartRxTail = 0;
  4108  01A5  01A9               	clrf	_eusartRxHead
  4109                           
  4110                           ;eusart.c: 106: eusartRxCount = 0;
  4111  01A6  01A8               	clrf	_eusartRxCount	;volatile
  4112                           
  4113                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  4114  01A7  0021               	movlb	1	; select bank1
  4115  01A8  1690               	bsf	16,5	;volatile
  4116  01A9  0008               	return
  4117  01AA                     __end_of_EUSART_Initialize:	
  4118  01AA                     __ptext21:	
  4119 ;; *************** function _TMR1_Initialize *****************
  4120 ;; Defined at:
  4121 ;;		line 62 in file "mcc_generated_files/tmr1.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;		None
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0, pclath, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 1F/1
  4132 ;;		On exit  : 1F/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4139 ;;Total ram usage:        0 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    3
  4142 ;; This function calls:
  4143 ;;		_TMR1_StartTimer
  4144 ;; This function is called by:
  4145 ;;		_SYSTEM_Initialize
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           
  4150                           ;psect for function _TMR1_Initialize
  4151  01AA                     _TMR1_Initialize:	
  4152                           
  4153                           ;tmr1.c: 67: T1CON = 0x30;
  4154                           
  4155                           ;incstack = 0
  4156                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4157  01AA  3030               	movlw	48
  4158  01AB  0020               	movlb	0	; select bank0
  4159  01AC  0098               	movwf	24	;volatile
  4160                           
  4161                           ;tmr1.c: 70: T1GCON = 0x00;
  4162  01AD  0199               	clrf	25	;volatile
  4163                           
  4164                           ;tmr1.c: 73: TMR1H = 0x00;
  4165  01AE  0197               	clrf	23	;volatile
  4166                           
  4167                           ;tmr1.c: 76: TMR1L = 0x00;
  4168  01AF  0196               	clrf	22	;volatile
  4169                           
  4170                           ;tmr1.c: 79: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  4171  01B0  0817               	movf	23,w	;volatile
  4172  01B1  00E9               	movwf	_timer1ReloadVal+1	;volatile
  4173  01B2  01E8               	clrf	_timer1ReloadVal	;volatile
  4174  01B3  0816               	movf	22,w	;volatile
  4175  01B4  04E8               	iorwf	_timer1ReloadVal,f	;volatile
  4176                           
  4177                           ;tmr1.c: 82: PIR1bits.TMR1IF = 0;
  4178  01B5  1010               	bcf	16,0	;volatile
  4179                           
  4180                           ;tmr1.c: 85: TMR1_StartTimer();
  4181  01B6  29B7               	ljmp	l1440
  4182  01B7                     __end_of_TMR1_Initialize:	
  4183  01B7                     __ptext22:	
  4184 ;; *************** function _TMR1_StartTimer *****************
  4185 ;; Defined at:
  4186 ;;		line 88 in file "mcc_generated_files/tmr1.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;		None
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;		None
  4191 ;; Return value:  Size  Location     Type
  4192 ;;                  1    wreg      void 
  4193 ;; Registers used:
  4194 ;;		None
  4195 ;; Tracked objects:
  4196 ;;		On entry : 1F/0
  4197 ;;		On exit  : 1F/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;Total ram usage:        0 bytes
  4205 ;; Hardware stack levels used:    1
  4206 ;; Hardware stack levels required when called:    2
  4207 ;; This function calls:
  4208 ;;		Nothing
  4209 ;; This function is called by:
  4210 ;;		_TMR1_Initialize
  4211 ;;		_TEST_SetUp
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           
  4216                           ;psect for function _TMR1_StartTimer
  4217  01B7                     _TMR1_StartTimer:	
  4218  01B7                     l1440:	
  4219                           ;incstack = 0
  4220                           ; Regs used in _TMR1_StartTimer: []
  4221                           
  4222                           
  4223                           ;tmr1.c: 91: T1CONbits.TMR1ON = 1;
  4224  01B7  1418               	bsf	24,0	;volatile
  4225  01B8  0008               	return
  4226  01B9                     __end_of_TMR1_StartTimer:	
  4227  01B9                     __ptext16:	
  4228 ;; *************** function _TMR1_ReadTimer *****************
  4229 ;; Defined at:
  4230 ;;		line 100 in file "mcc_generated_files/tmr1.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;		None
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;  readVal         2    2[COMMON] unsigned int 
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  2    0[COMMON] unsigned int 
  4237 ;; Registers used:
  4238 ;;		wreg
  4239 ;; Tracked objects:
  4240 ;;		On entry : 1F/2
  4241 ;;		On exit  : 1F/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4244 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4247 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;Total ram usage:        4 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    2
  4251 ;; This function calls:
  4252 ;;		Nothing
  4253 ;; This function is called by:
  4254 ;;		_TEST_TearDown
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           
  4259                           ;psect for function _TMR1_ReadTimer
  4260  01B9                     _TMR1_ReadTimer:	
  4261                           
  4262                           ;tmr1.c: 102: uint16_t readVal;
  4263                           ;tmr1.c: 104: readVal = (TMR1H << 8) | TMR1L;
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _TMR1_ReadTimer: [wreg]
  4267  01B9  0020               	movlb	0	; select bank0
  4268  01BA  0817               	movf	23,w	;volatile
  4269  01BB  00F3               	movwf	TMR1_ReadTimer@readVal+1
  4270  01BC  01F2               	clrf	TMR1_ReadTimer@readVal
  4271  01BD  0816               	movf	22,w	;volatile
  4272  01BE  04F2               	iorwf	TMR1_ReadTimer@readVal,f
  4273                           
  4274                           ;tmr1.c: 106: return readVal;
  4275  01BF  0873               	movf	TMR1_ReadTimer@readVal+1,w
  4276  01C0  00F1               	movwf	?_TMR1_ReadTimer+1
  4277  01C1  0872               	movf	TMR1_ReadTimer@readVal,w
  4278  01C2  00F0               	movwf	?_TMR1_ReadTimer
  4279  01C3  0008               	return
  4280  01C4                     __end_of_TMR1_ReadTimer:	
  4281  01C4                     __ptext2:	
  4282 ;; *************** function _sprintf *****************
  4283 ;; Defined at:
  4284 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  sp              1    wreg     PTR unsigned char 
  4287 ;;		 -> str(30), 
  4288 ;;  f               2    8[BANK0 ] PTR const unsigned char 
  4289 ;;		 -> STR_7(4), 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  sp              1   28[BANK0 ] PTR unsigned char 
  4292 ;;		 -> str(30), 
  4293 ;;  val             4   24[BANK0 ] unsigned long 
  4294 ;;  tmpval          4    0        struct .
  4295 ;;  prec            2   20[BANK0 ] int 
  4296 ;;  cp              2    0        PTR const unsigned char 
  4297 ;;  len             2    0        unsigned int 
  4298 ;;  c               1   29[BANK0 ] char 
  4299 ;;  flag            1   23[BANK0 ] unsigned char 
  4300 ;;  ap              1   22[BANK0 ] PTR void [1]
  4301 ;;		 -> ?_sprintf(2), 
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  2    8[BANK0 ] int 
  4304 ;; Registers used:
  4305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 1F/0
  4308 ;;		On exit  : 1F/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4311 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4314 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4315 ;;Total ram usage:       22 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    3
  4318 ;; This function calls:
  4319 ;;		___lldiv
  4320 ;;		___llmod
  4321 ;; This function is called by:
  4322 ;;		_test_sprintf_Int32PerfTest
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           
  4327                           ;psect for function _sprintf
  4328  01C4                     _sprintf:	
  4329                           
  4330                           ;incstack = 0
  4331                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4332                           ;sprintf@sp stored from wreg
  4333  01C4  00E6               	movwf	sprintf@sp
  4334                           
  4335                           ;doprnt.c: 494: va_list ap;
  4336                           ;doprnt.c: 499: signed char c;
  4337                           ;doprnt.c: 504: int prec;
  4338                           ;doprnt.c: 508: unsigned char flag;
  4339                           ;doprnt.c: 523: union {
  4340                           ;doprnt.c: 524: unsigned long vd;
  4341                           ;doprnt.c: 525: double integ;
  4342                           ;doprnt.c: 526: } tmpval;
  4343                           ;doprnt.c: 528: unsigned long val;
  4344                           ;doprnt.c: 529: unsigned len;
  4345                           ;doprnt.c: 530: const char * cp;
  4346                           ;doprnt.c: 533: *ap = __va_start();
  4347  01C5  3054               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  4348  01C6  00E0               	movwf	sprintf@ap
  4349  01C7                     l1918:	
  4350                           ;doprnt.c: 536: while(c = *f++) {
  4351                           
  4352  01C7  0853               	movf	sprintf@f+1,w
  4353  01C8  00D9               	movwf	??_sprintf+1
  4354  01C9  0852               	movf	sprintf@f,w
  4355  01CA  00D8               	movwf	??_sprintf
  4356  01CB  0AD2               	incf	sprintf@f,f
  4357  01CC  1903               	skipnz
  4358  01CD  0AD3               	incf	sprintf@f+1,f
  4359  01CE  0084               	movwf	4
  4360  01CF  0859               	movf	??_sprintf+1,w
  4361  01D0  0085               	movwf	5
  4362  01D1  0800               	movf	0,w	;code access
  4363  01D2  00E7               	movwf	sprintf@c
  4364  01D3  0867               	movf	sprintf@c,w
  4365  01D4  1903               	btfsc	3,2
  4366  01D5  2AA4               	goto	l1920
  4367                           
  4368                           ;doprnt.c: 538: if(c != '%')
  4369  01D6  3025               	movlw	37
  4370  01D7  0667               	xorwf	sprintf@c,w
  4371  01D8  1903               	btfsc	3,2
  4372  01D9  29E1               	goto	l1870
  4373                           
  4374                           ;doprnt.c: 540: {
  4375                           ;doprnt.c: 541: ((*sp++ = (c)));
  4376  01DA  0866               	movf	sprintf@sp,w
  4377  01DB  0086               	movwf	6
  4378  01DC  0187               	clrf	7
  4379  01DD  0867               	movf	sprintf@c,w
  4380  01DE  0081               	movwf	1
  4381  01DF  0AE6               	incf	sprintf@sp,f
  4382                           
  4383                           ;doprnt.c: 542: continue;
  4384  01E0  29C7               	goto	l1918
  4385  01E1                     l1870:	
  4386                           
  4387                           ;doprnt.c: 543: }
  4388                           ;doprnt.c: 548: flag = 0;
  4389  01E1  01E1               	clrf	sprintf@flag
  4390  01E2  29E4               	goto	l1874
  4391  01E3                     l367:	
  4392                           ;doprnt.c: 641: case 'l':
  4393                           
  4394                           
  4395                           ;doprnt.c: 643: flag |= 0x10;
  4396  01E3  1661               	bsf	sprintf@flag,4
  4397  01E4                     l1874:	
  4398                           ;doprnt.c: 644: goto loop;
  4399                           
  4400  01E4  0853               	movf	sprintf@f+1,w
  4401  01E5  00D9               	movwf	??_sprintf+1
  4402  01E6  0852               	movf	sprintf@f,w
  4403  01E7  00D8               	movwf	??_sprintf
  4404  01E8  0AD2               	incf	sprintf@f,f
  4405  01E9  1903               	skipnz
  4406  01EA  0AD3               	incf	sprintf@f+1,f
  4407  01EB  0084               	movwf	4
  4408  01EC  0859               	movf	??_sprintf+1,w
  4409  01ED  0085               	movwf	5
  4410  01EE  0800               	movf	0,w	;code access
  4411  01EF  00E7               	movwf	sprintf@c
  4412                           
  4413                           ; Switch size 1, requested type "speed"
  4414                           ; Number of cases is 4, Range of values is 0 to 108
  4415                           ; switch strategies available:
  4416                           ; Name         Instructions Cycles
  4417                           ; direct_byte          224     6 (fixed)
  4418                           ; simple_byte           13     7 (average)
  4419                           ; jumptable            260     6 (fixed)
  4420                           ;	Chosen strategy is direct_byte
  4421  01F0  0084               	movwf	4
  4422  01F1  306D               	movlw	109
  4423  01F2  0204               	subwf	4,w
  4424  01F3  1803               	skipnc
  4425  01F4  29C7               	goto	l1918
  4426  01F5  3187               	movlp	high S2066
  4427  01F6  3504               	lslf	4,w
  4428  01F7  3E00               	addlw	low S2066
  4429  01F8  0082               	movwf	2
  4430  01F9                     l370:	
  4431                           
  4432                           ;doprnt.c: 1253: {
  4433                           ;doprnt.c: 1255: if(flag & 0x10)
  4434  01F9  1E61               	btfss	sprintf@flag,4
  4435  01FA  2A09               	goto	l1880
  4436                           
  4437                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4438  01FB  0860               	movf	sprintf@ap,w
  4439  01FC  0086               	movwf	6
  4440  01FD  0187               	clrf	7
  4441  01FE  3F40               	moviw [0]fsr1
  4442  01FF  00E2               	movwf	sprintf@val
  4443  0200  3F41               	moviw [1]fsr1
  4444  0201  00E3               	movwf	sprintf@val+1
  4445  0202  3F42               	moviw [2]fsr1
  4446  0203  00E4               	movwf	sprintf@val+2
  4447  0204  3F43               	moviw [3]fsr1
  4448  0205  00E5               	movwf	sprintf@val+3
  4449  0206  3004               	movlw	4
  4450  0207  07E0               	addwf	sprintf@ap,f
  4451  0208  2A1B               	goto	l1884
  4452  0209                     l1880:	
  4453                           
  4454                           ;doprnt.c: 1257: else
  4455                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4456  0209  0860               	movf	sprintf@ap,w
  4457  020A  0086               	movwf	6
  4458  020B  0187               	clrf	7
  4459  020C  3F40               	moviw [0]fsr1
  4460  020D  00D8               	movwf	??_sprintf
  4461  020E  3F41               	moviw [1]fsr1
  4462  020F  00D9               	movwf	??_sprintf+1
  4463  0210  0858               	movf	??_sprintf,w
  4464  0211  00E2               	movwf	sprintf@val
  4465  0212  0859               	movf	??_sprintf+1,w
  4466  0213  00E3               	movwf	sprintf@val+1
  4467  0214  0D89               	rlf	9,f
  4468  0215  3B89               	subwfb	9,f
  4469  0216  0989               	comf	9,f
  4470  0217  00E4               	movwf	sprintf@val+2
  4471  0218  00E5               	movwf	sprintf@val+3
  4472  0219  0AE0               	incf	sprintf@ap,f
  4473  021A  0AE0               	incf	sprintf@ap,f
  4474  021B                     l1884:	
  4475                           
  4476                           ;doprnt.c: 1261: if((long)val < 0) {
  4477  021B  1FE5               	btfss	sprintf@val+3,7
  4478  021C  2A2A               	goto	l1890
  4479                           
  4480                           ;doprnt.c: 1262: flag |= 0x03;
  4481  021D  3003               	movlw	3
  4482  021E  04E1               	iorwf	sprintf@flag,f
  4483                           
  4484                           ;doprnt.c: 1263: val = -val;
  4485  021F  09E2               	comf	sprintf@val,f
  4486  0220  09E3               	comf	sprintf@val+1,f
  4487  0221  09E4               	comf	sprintf@val+2,f
  4488  0222  09E5               	comf	sprintf@val+3,f
  4489  0223  0AE2               	incf	sprintf@val,f
  4490  0224  1903               	skipnz
  4491  0225  0AE3               	incf	sprintf@val+1,f
  4492  0226  1903               	skipnz
  4493  0227  0AE4               	incf	sprintf@val+2,f
  4494  0228  1903               	skipnz
  4495  0229  0AE5               	incf	sprintf@val+3,f
  4496  022A                     l1890:	
  4497                           
  4498                           ;doprnt.c: 1264: }
  4499                           ;doprnt.c: 1266: }
  4500                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4501  022A  01E7               	clrf	sprintf@c
  4502  022B  0AE7               	incf	sprintf@c,f
  4503  022C                     l1894:	
  4504                           
  4505                           ;doprnt.c: 1306: if(val < dpowers[c])
  4506  022C  0867               	movf	sprintf@c,w
  4507  022D  00D8               	movwf	??_sprintf
  4508  022E  30DA               	movlw	low (_dpowers| (0+32768))
  4509  022F  01D9               	clrf	??_sprintf+1
  4510  0230  35D8               	lslf	??_sprintf,f
  4511  0231  0DD9               	rlf	??_sprintf+1,f
  4512  0232  35D8               	lslf	??_sprintf,f
  4513  0233  0DD9               	rlf	??_sprintf+1,f
  4514  0234  0758               	addwf	??_sprintf,w
  4515  0235  0084               	movwf	4
  4516  0236  3087               	movlw	high (_dpowers| (0+32768))
  4517  0237  3D59               	addwfc	??_sprintf+1,w
  4518  0238  0085               	movwf	5
  4519  0239  3F00               	moviw [0]fsr0
  4520  023A  00DA               	movwf	??_sprintf+2
  4521  023B  3F01               	moviw [1]fsr0
  4522  023C  00DB               	movwf	??_sprintf+3
  4523  023D  3F02               	moviw [2]fsr0
  4524  023E  00DC               	movwf	??_sprintf+4
  4525  023F  3F03               	moviw [3]fsr0
  4526  0240  00DD               	movwf	??_sprintf+5
  4527  0241  0265               	subwf	sprintf@val+3,w
  4528  0242  1D03               	skipz
  4529  0243  2A4E               	goto	u1585
  4530  0244  085C               	movf	??_sprintf+4,w
  4531  0245  0264               	subwf	sprintf@val+2,w
  4532  0246  1D03               	skipz
  4533  0247  2A4E               	goto	u1585
  4534  0248  085B               	movf	??_sprintf+3,w
  4535  0249  0263               	subwf	sprintf@val+1,w
  4536  024A  1D03               	skipz
  4537  024B  2A4E               	goto	u1585
  4538  024C  085A               	movf	??_sprintf+2,w
  4539  024D  0262               	subwf	sprintf@val,w
  4540  024E                     u1585:	
  4541  024E  1C03               	btfss	3,0
  4542  024F  2A55               	goto	l1902
  4543  0250  300A               	movlw	10
  4544  0251  0AE7               	incf	sprintf@c,f
  4545  0252  0667               	xorwf	sprintf@c,w
  4546  0253  1D03               	btfss	3,2
  4547  0254  2A2C               	goto	l1894
  4548  0255                     l1902:	
  4549                           
  4550                           ;doprnt.c: 1422: {
  4551                           ;doprnt.c: 1438: if(flag & 0x03)
  4552  0255  0861               	movf	sprintf@flag,w
  4553  0256  3903               	andlw	3
  4554  0257  1903               	btfsc	3,2
  4555  0258  2A5F               	goto	l1908
  4556                           
  4557                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4558  0259  0866               	movf	sprintf@sp,w
  4559  025A  0086               	movwf	6
  4560  025B  302D               	movlw	45
  4561  025C  0187               	clrf	7
  4562  025D  0081               	movwf	1
  4563  025E  0AE6               	incf	sprintf@sp,f
  4564  025F                     l1908:	
  4565                           
  4566                           ;doprnt.c: 1469: }
  4567                           ;doprnt.c: 1472: prec = c;
  4568  025F  0867               	movf	sprintf@c,w
  4569  0260  00DE               	movwf	sprintf@prec
  4570  0261  01DF               	clrf	sprintf@prec+1
  4571  0262  1BDE               	btfsc	sprintf@prec,7
  4572  0263  03DF               	decf	sprintf@prec+1,f
  4573  0264                     l1916:	
  4574                           ;doprnt.c: 1474: while(prec--) {
  4575                           
  4576  0264  30FF               	movlw	-1
  4577  0265  07DE               	addwf	sprintf@prec,f
  4578  0266  1C03               	skipc
  4579  0267  03DF               	decf	sprintf@prec+1,f
  4580  0268  0F5E               	incfsz	sprintf@prec,w
  4581  0269  2A6D               	goto	l1910
  4582  026A  0A5F               	incf	sprintf@prec+1,w
  4583  026B  1903               	btfsc	3,2
  4584  026C  29C7               	goto	l1918
  4585  026D                     l1910:	
  4586                           
  4587                           ;doprnt.c: 1478: {
  4588                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4589  026D  300A               	movlw	10
  4590  026E  00CA               	movwf	___llmod@divisor
  4591  026F  01CB               	clrf	___llmod@divisor+1
  4592  0270  01CC               	clrf	___llmod@divisor+2
  4593  0271  01CD               	clrf	___llmod@divisor+3
  4594  0272  085F               	movf	sprintf@prec+1,w
  4595  0273  0085               	movwf	5
  4596  0274  085E               	movf	sprintf@prec,w
  4597  0275  0084               	movwf	4
  4598  0276  30DA               	movlw	low (_dpowers| (0+32768))
  4599  0277  3584               	lslf	4,f
  4600  0278  0D85               	rlf	5,f
  4601  0279  3584               	lslf	4,f
  4602  027A  0D85               	rlf	5,f
  4603  027B  0784               	addwf	4,f
  4604  027C  3087               	movlw	high (_dpowers| (0+32768))
  4605  027D  3D85               	addwfc	5,f
  4606  027E  3F00               	moviw [0]fsr0
  4607  027F  00F0               	movwf	___lldiv@divisor
  4608  0280  3F01               	moviw [1]fsr0
  4609  0281  00F1               	movwf	___lldiv@divisor+1
  4610  0282  3F02               	moviw [2]fsr0
  4611  0283  00F2               	movwf	___lldiv@divisor+2
  4612  0284  3F03               	moviw [3]fsr0
  4613  0285  00F3               	movwf	___lldiv@divisor+3
  4614  0286  0865               	movf	sprintf@val+3,w
  4615  0287  00F7               	movwf	___lldiv@dividend+3
  4616  0288  0864               	movf	sprintf@val+2,w
  4617  0289  00F6               	movwf	___lldiv@dividend+2
  4618  028A  0863               	movf	sprintf@val+1,w
  4619  028B  00F5               	movwf	___lldiv@dividend+1
  4620  028C  0862               	movf	sprintf@val,w
  4621  028D  00F4               	movwf	___lldiv@dividend
  4622  028E  22A9  3180         	fcall	___lldiv
  4623  0290  0873               	movf	?___lldiv+3,w
  4624  0291  00D1               	movwf	___llmod@dividend+3
  4625  0292  0872               	movf	?___lldiv+2,w
  4626  0293  00D0               	movwf	___llmod@dividend+2
  4627  0294  0871               	movf	?___lldiv+1,w
  4628  0295  00CF               	movwf	___llmod@dividend+1
  4629  0296  0870               	movf	?___lldiv,w
  4630  0297  00CE               	movwf	___llmod@dividend
  4631  0298  22E8  3180         	fcall	___llmod
  4632  029A  084A               	movf	?___llmod,w
  4633  029B  3E30               	addlw	48
  4634  029C  00E7               	movwf	sprintf@c
  4635                           
  4636                           ;doprnt.c: 1523: }
  4637                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4638  029D  0866               	movf	sprintf@sp,w
  4639  029E  0086               	movwf	6
  4640  029F  0187               	clrf	7
  4641  02A0  0867               	movf	sprintf@c,w
  4642  02A1  0081               	movwf	1
  4643  02A2  0AE6               	incf	sprintf@sp,f
  4644  02A3  2A64               	goto	l1916
  4645  02A4                     l1920:	
  4646                           
  4647                           ;doprnt.c: 1538: *sp = 0;
  4648  02A4  0866               	movf	sprintf@sp,w
  4649  02A5  0086               	movwf	6
  4650  02A6  0187               	clrf	7
  4651  02A7  0181               	clrf	1
  4652  02A8  0008               	return
  4653  02A9                     __end_of_sprintf:	
  4654  02A9                     __ptext4:	
  4655 ;; *************** function ___lldiv *****************
  4656 ;; Defined at:
  4657 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  divisor         4    0[COMMON] unsigned long 
  4660 ;;  dividend        4    4[COMMON] unsigned long 
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  quotient        4    8[COMMON] unsigned long 
  4663 ;;  counter         1   12[COMMON] unsigned char 
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  4    0[COMMON] unsigned long 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, status,0
  4668 ;; Tracked objects:
  4669 ;;		On entry : 1F/0
  4670 ;;		On exit  : 1F/0
  4671 ;;		Unchanged: 1F/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4673 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;Total ram usage:       13 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    2
  4680 ;; This function calls:
  4681 ;;		Nothing
  4682 ;; This function is called by:
  4683 ;;		_sprintf
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           
  4688                           ;psect for function ___lldiv
  4689  02A9                     ___lldiv:	
  4690                           
  4691                           ;incstack = 0
  4692                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4693  02A9  01F8               	clrf	___lldiv@quotient
  4694  02AA  01F9               	clrf	___lldiv@quotient+1
  4695  02AB  01FA               	clrf	___lldiv@quotient+2
  4696  02AC  01FB               	clrf	___lldiv@quotient+3
  4697  02AD  0873               	movf	___lldiv@divisor+3,w
  4698  02AE  0472               	iorwf	___lldiv@divisor+2,w
  4699  02AF  0471               	iorwf	___lldiv@divisor+1,w
  4700  02B0  0470               	iorwf	___lldiv@divisor,w
  4701  02B1  1903               	skipnz
  4702  02B2  2ADF               	goto	l1784
  4703  02B3  01FC               	clrf	___lldiv@counter
  4704  02B4                     L2:	
  4705  02B4  0AFC               	incf	___lldiv@counter,f
  4706  02B5  1BF3               	btfsc	___lldiv@divisor+3,7
  4707  02B6  2ABC               	goto	l1772
  4708  02B7  35F0               	lslf	___lldiv@divisor,f
  4709  02B8  0DF1               	rlf	___lldiv@divisor+1,f
  4710  02B9  0DF2               	rlf	___lldiv@divisor+2,f
  4711  02BA  0DF3               	rlf	___lldiv@divisor+3,f
  4712  02BB  2AB4               	goto	L2
  4713  02BC                     l1772:	
  4714  02BC  35F8               	lslf	___lldiv@quotient,f
  4715  02BD  0DF9               	rlf	___lldiv@quotient+1,f
  4716  02BE  0DFA               	rlf	___lldiv@quotient+2,f
  4717  02BF  0DFB               	rlf	___lldiv@quotient+3,f
  4718  02C0  0873               	movf	___lldiv@divisor+3,w
  4719  02C1  0277               	subwf	___lldiv@dividend+3,w
  4720  02C2  1D03               	skipz
  4721  02C3  2ACE               	goto	u1475
  4722  02C4  0872               	movf	___lldiv@divisor+2,w
  4723  02C5  0276               	subwf	___lldiv@dividend+2,w
  4724  02C6  1D03               	skipz
  4725  02C7  2ACE               	goto	u1475
  4726  02C8  0871               	movf	___lldiv@divisor+1,w
  4727  02C9  0275               	subwf	___lldiv@dividend+1,w
  4728  02CA  1D03               	skipz
  4729  02CB  2ACE               	goto	u1475
  4730  02CC  0870               	movf	___lldiv@divisor,w
  4731  02CD  0274               	subwf	___lldiv@dividend,w
  4732  02CE                     u1475:	
  4733  02CE  1C03               	skipc
  4734  02CF  2AD9               	goto	l1780
  4735  02D0  0870               	movf	___lldiv@divisor,w
  4736  02D1  02F4               	subwf	___lldiv@dividend,f
  4737  02D2  0871               	movf	___lldiv@divisor+1,w
  4738  02D3  3BF5               	subwfb	___lldiv@dividend+1,f
  4739  02D4  0872               	movf	___lldiv@divisor+2,w
  4740  02D5  3BF6               	subwfb	___lldiv@dividend+2,f
  4741  02D6  0873               	movf	___lldiv@divisor+3,w
  4742  02D7  3BF7               	subwfb	___lldiv@dividend+3,f
  4743  02D8  1478               	bsf	___lldiv@quotient,0
  4744  02D9                     l1780:	
  4745  02D9  36F3               	lsrf	___lldiv@divisor+3,f
  4746  02DA  0CF2               	rrf	___lldiv@divisor+2,f
  4747  02DB  0CF1               	rrf	___lldiv@divisor+1,f
  4748  02DC  0CF0               	rrf	___lldiv@divisor,f
  4749  02DD  0BFC               	decfsz	___lldiv@counter,f
  4750  02DE  2ABC               	goto	l1772
  4751  02DF                     l1784:	
  4752  02DF  087B               	movf	___lldiv@quotient+3,w
  4753  02E0  00F3               	movwf	?___lldiv+3
  4754  02E1  087A               	movf	___lldiv@quotient+2,w
  4755  02E2  00F2               	movwf	?___lldiv+2
  4756  02E3  0879               	movf	___lldiv@quotient+1,w
  4757  02E4  00F1               	movwf	?___lldiv+1
  4758  02E5  0878               	movf	___lldiv@quotient,w
  4759  02E6  00F0               	movwf	?___lldiv
  4760  02E7  0008               	return
  4761  02E8                     __end_of___lldiv:	
  4762  02E8                     __ptext3:	
  4763 ;; *************** function ___llmod *****************
  4764 ;; Defined at:
  4765 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  divisor         4    0[BANK0 ] unsigned long 
  4768 ;;  dividend        4    4[BANK0 ] unsigned long 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  counter         1   13[COMMON] unsigned char 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  4    0[BANK0 ] unsigned long 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0
  4775 ;; Tracked objects:
  4776 ;;		On entry : 1F/0
  4777 ;;		On exit  : 1F/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4780 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;Total ram usage:        9 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    2
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_sprintf
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           
  4795                           ;psect for function ___llmod
  4796  02E8                     ___llmod:	
  4797                           
  4798                           ;incstack = 0
  4799                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4800  02E8  084D               	movf	___llmod@divisor+3,w
  4801  02E9  044C               	iorwf	___llmod@divisor+2,w
  4802  02EA  044B               	iorwf	___llmod@divisor+1,w
  4803  02EB  044A               	iorwf	___llmod@divisor,w
  4804  02EC  1903               	skipnz
  4805  02ED  2B15               	goto	l1804
  4806  02EE  01FD               	clrf	___llmod@counter
  4807  02EF                     L1:	
  4808  02EF  0AFD               	incf	___llmod@counter,f
  4809  02F0  1BCD               	btfsc	___llmod@divisor+3,7
  4810  02F1  2AF7               	goto	l1796
  4811  02F2  35CA               	lslf	___llmod@divisor,f
  4812  02F3  0DCB               	rlf	___llmod@divisor+1,f
  4813  02F4  0DCC               	rlf	___llmod@divisor+2,f
  4814  02F5  0DCD               	rlf	___llmod@divisor+3,f
  4815  02F6  2AEF               	goto	L1
  4816  02F7                     l1796:	
  4817  02F7  084D               	movf	___llmod@divisor+3,w
  4818  02F8  0251               	subwf	___llmod@dividend+3,w
  4819  02F9  1D03               	skipz
  4820  02FA  2B05               	goto	u1515
  4821  02FB  084C               	movf	___llmod@divisor+2,w
  4822  02FC  0250               	subwf	___llmod@dividend+2,w
  4823  02FD  1D03               	skipz
  4824  02FE  2B05               	goto	u1515
  4825  02FF  084B               	movf	___llmod@divisor+1,w
  4826  0300  024F               	subwf	___llmod@dividend+1,w
  4827  0301  1D03               	skipz
  4828  0302  2B05               	goto	u1515
  4829  0303  084A               	movf	___llmod@divisor,w
  4830  0304  024E               	subwf	___llmod@dividend,w
  4831  0305                     u1515:	
  4832  0305  1C03               	skipc
  4833  0306  2B0F               	goto	l1800
  4834  0307  084A               	movf	___llmod@divisor,w
  4835  0308  02CE               	subwf	___llmod@dividend,f
  4836  0309  084B               	movf	___llmod@divisor+1,w
  4837  030A  3BCF               	subwfb	___llmod@dividend+1,f
  4838  030B  084C               	movf	___llmod@divisor+2,w
  4839  030C  3BD0               	subwfb	___llmod@dividend+2,f
  4840  030D  084D               	movf	___llmod@divisor+3,w
  4841  030E  3BD1               	subwfb	___llmod@dividend+3,f
  4842  030F                     l1800:	
  4843  030F  36CD               	lsrf	___llmod@divisor+3,f
  4844  0310  0CCC               	rrf	___llmod@divisor+2,f
  4845  0311  0CCB               	rrf	___llmod@divisor+1,f
  4846  0312  0CCA               	rrf	___llmod@divisor,f
  4847  0313  0BFD               	decfsz	___llmod@counter,f
  4848  0314  2AF7               	goto	l1796
  4849  0315                     l1804:	
  4850  0315  0851               	movf	___llmod@dividend+3,w
  4851  0316  00CD               	movwf	?___llmod+3
  4852  0317  0850               	movf	___llmod@dividend+2,w
  4853  0318  00CC               	movwf	?___llmod+2
  4854  0319  084F               	movf	___llmod@dividend+1,w
  4855  031A  00CB               	movwf	?___llmod+1
  4856  031B  084E               	movf	___llmod@dividend,w
  4857  031C  00CA               	movwf	?___llmod
  4858  031D  0008               	return
  4859  031E                     __end_of___llmod:	
  4860  031E                     __ptext14:	
  4861 ;; *************** function _FAST_UintToStr *****************
  4862 ;; Defined at:
  4863 ;;		line 172 in file "../src/fast_int_to_str.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  str             1    wreg     PTR unsigned char 
  4866 ;;		 -> str(30), 
  4867 ;;  num             4    0[COMMON] unsigned long 
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;  str             1    5[COMMON] PTR unsigned char 
  4870 ;;		 -> str(30), 
  4871 ;;  fNum            4    7[COMMON] struct .
  4872 ;;  ch              1    6[COMMON] unsigned char 
  4873 ;;  leedIn          1    4[COMMON] unsigned char 
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  1    wreg      void 
  4876 ;; Registers used:
  4877 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4878 ;; Tracked objects:
  4879 ;;		On entry : 1D/2
  4880 ;;		On exit  : 1D/0
  4881 ;;		Unchanged: 1D/0
  4882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4883 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4886 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4887 ;;Total ram usage:       11 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    2
  4890 ;; This function calls:
  4891 ;;		Nothing
  4892 ;; This function is called by:
  4893 ;;		_test_UintToStr_Uint8PerfTest
  4894 ;;		_test_UintToStr_Uint16PerfTest
  4895 ;;		_test_UintToStr_Uint32PerfTest
  4896 ;;		_FAST_IntToStr
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           
  4901                           ;psect for function _FAST_UintToStr
  4902  031E                     _FAST_UintToStr:	
  4903                           
  4904                           ;incstack = 0
  4905                           ; Regs used in _FAST_UintToStr: [wreg+fsr1l+fsr1h+status,2+status,0]
  4906                           ;FAST_UintToStr@str stored from wreg
  4907  031E  00F5               	movwf	FAST_UintToStr@str
  4908                           
  4909                           ;fast_int_to_str.c: 173: fast_int_t fNum;
  4910                           ;fast_int_to_str.c: 174: fNum.u32 = num;
  4911  031F  0873               	movf	FAST_UintToStr@num+3,w
  4912  0320  00FA               	movwf	FAST_UintToStr@fNum+3
  4913  0321  0872               	movf	FAST_UintToStr@num+2,w
  4914  0322  00F9               	movwf	FAST_UintToStr@fNum+2
  4915  0323  0871               	movf	FAST_UintToStr@num+1,w
  4916  0324  00F8               	movwf	FAST_UintToStr@fNum+1
  4917  0325  0870               	movf	FAST_UintToStr@num,w
  4918  0326  00F7               	movwf	FAST_UintToStr@fNum
  4919                           
  4920                           ;fast_int_to_str.c: 175: char ch = 0;
  4921  0327  01F6               	clrf	FAST_UintToStr@ch
  4922                           
  4923                           ;fast_int_to_str.c: 176: bool leedIn = 1;
  4924  0328  01F4               	clrf	FAST_UintToStr@leedIn
  4925  0329  0AF4               	incf	FAST_UintToStr@leedIn,f
  4926                           
  4927                           ;fast_int_to_str.c: 178: if ((255) >= num)
  4928  032A  0873               	movf	FAST_UintToStr@num+3,w
  4929  032B  1D03               	btfss	3,2
  4930  032C  2B34               	goto	l1454
  4931  032D  0872               	movf	FAST_UintToStr@num+2,w
  4932  032E  1D03               	btfss	3,2
  4933  032F  2B34               	goto	l1454
  4934  0330  3001               	movlw	1
  4935  0331  0271               	subwf	FAST_UintToStr@num+1,w
  4936  0332  1C03               	btfss	3,0
  4937  0333  2DCF               	goto	l1702
  4938  0334                     l1454:	
  4939  0334  0873               	movf	FAST_UintToStr@num+3,w
  4940  0335  1D03               	btfss	3,2
  4941  0336  2B3B               	goto	l1460
  4942  0337  3001               	movlw	1
  4943  0338  0272               	subwf	FAST_UintToStr@num+2,w
  4944  0339  1C03               	btfss	3,0
  4945  033A  2CE9               	goto	l1614
  4946  033B                     l1460:	
  4947                           
  4948                           ;fast_int_to_str.c: 188: if (fNum.u32 >= 4000000000UL) {
  4949  033B  3028               	movlw	40
  4950  033C  0278               	subwf	FAST_UintToStr@fNum+1,w
  4951  033D  306B               	movlw	107
  4952  033E  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  4953  033F  30EE               	movlw	238
  4954  0340  3B7A               	subwfb	FAST_UintToStr@fNum+3,w
  4955  0341  1C03               	btfss	3,0
  4956  0342  2B4E               	goto	l1466
  4957                           
  4958                           ;fast_int_to_str.c: 189: fNum.u32 -= 4000000000UL;
  4959  0343  3000               	movlw	0
  4960  0344  02F7               	subwf	FAST_UintToStr@fNum,f
  4961  0345  3028               	movlw	40
  4962  0346  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  4963  0347  306B               	movlw	107
  4964  0348  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  4965  0349  30EE               	movlw	238
  4966  034A  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  4967                           
  4968                           ;fast_int_to_str.c: 190: ch = 4;
  4969  034B  3004               	movlw	4
  4970  034C  00F6               	movwf	FAST_UintToStr@ch
  4971                           
  4972                           ;fast_int_to_str.c: 191: } else {
  4973  034D  2B71               	goto	l276
  4974  034E                     l1466:	
  4975                           
  4976                           ;fast_int_to_str.c: 192: if (fNum.u32 >= 2000000000UL) {
  4977  034E  3094               	movlw	148
  4978  034F  0278               	subwf	FAST_UintToStr@fNum+1,w
  4979  0350  3035               	movlw	53
  4980  0351  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  4981  0352  3077               	movlw	119
  4982  0353  3B7A               	subwfb	FAST_UintToStr@fNum+3,w
  4983  0354  1C03               	btfss	3,0
  4984  0355  2B60               	goto	l1472
  4985                           
  4986                           ;fast_int_to_str.c: 193: fNum.u32 -= 2000000000UL;
  4987  0356  3000               	movlw	0
  4988  0357  02F7               	subwf	FAST_UintToStr@fNum,f
  4989  0358  3094               	movlw	148
  4990  0359  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  4991  035A  3035               	movlw	53
  4992  035B  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  4993  035C  3077               	movlw	119
  4994  035D  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  4995                           
  4996                           ;fast_int_to_str.c: 194: ch = 2;
  4997  035E  3002               	movlw	2
  4998  035F  00F6               	movwf	FAST_UintToStr@ch
  4999  0360                     l1472:	
  5000                           
  5001                           ;fast_int_to_str.c: 195: }
  5002                           ;fast_int_to_str.c: 196: if (fNum.u32 >= 1000000000UL) {
  5003  0360  30CA               	movlw	202
  5004  0361  0278               	subwf	FAST_UintToStr@fNum+1,w
  5005  0362  309A               	movlw	154
  5006  0363  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5007  0364  303B               	movlw	59
  5008  0365  3B7A               	subwfb	FAST_UintToStr@fNum+3,w
  5009  0366  1C03               	btfss	3,0
  5010  0367  2B71               	goto	l276
  5011                           
  5012                           ;fast_int_to_str.c: 197: fNum.u32 -= 1000000000UL;
  5013  0368  3000               	movlw	0
  5014  0369  02F7               	subwf	FAST_UintToStr@fNum,f
  5015  036A  30CA               	movlw	202
  5016  036B  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5017  036C  309A               	movlw	154
  5018  036D  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5019  036E  303B               	movlw	59
  5020  036F  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5021                           
  5022                           ;fast_int_to_str.c: 198: ch |= 1;
  5023  0370  1476               	bsf	FAST_UintToStr@ch,0
  5024  0371                     l276:	
  5025                           
  5026                           ;fast_int_to_str.c: 199: }
  5027                           ;fast_int_to_str.c: 200: }
  5028                           ;fast_int_to_str.c: 201: if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };
  5029  0371  0876               	movf	FAST_UintToStr@ch,w
  5030  0372  1903               	btfsc	3,2
  5031  0373  2B7C               	goto	l1486
  5032  0374  0875               	movf	FAST_UintToStr@str,w
  5033  0375  0086               	movwf	6
  5034  0376  0187               	clrf	7
  5035  0377  0876               	movf	FAST_UintToStr@ch,w
  5036  0378  3E30               	addlw	48
  5037  0379  0081               	movwf	1
  5038  037A  0AF5               	incf	FAST_UintToStr@str,f
  5039  037B  01F4               	clrf	FAST_UintToStr@leedIn
  5040  037C                     l1486:	
  5041  037C  3008               	movlw	8
  5042                           
  5043                           ;fast_int_to_str.c: 203: ch = 0; if (fNum.u32 >= 8*100000000UL) { fNum.u32 -= 8*10000000
      +                          0UL; ch = (char) 8; } else { if (fNum.u32 >= 4*100000000UL) { fNum.u32 -= 4*100000000UL;
      +                           ch = (char) 4; } if (fNum.u32 >= 2*100000000UL) { fNum.u32 -= 2*100000000UL; ch |= (cha
      +                          r) 2; } } i
  5044  037D  01F6               	clrf	FAST_UintToStr@ch
  5045  037E  0278               	subwf	FAST_UintToStr@fNum+1,w
  5046  037F  30AF               	movlw	175
  5047  0380  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5048  0381  302F               	movlw	47
  5049  0382  3B7A               	subwfb	FAST_UintToStr@fNum+3,w
  5050  0383  1C03               	btfss	3,0
  5051  0384  2B90               	goto	l1494
  5052  0385  3000               	movlw	0
  5053  0386  02F7               	subwf	FAST_UintToStr@fNum,f
  5054  0387  3008               	movlw	8
  5055  0388  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5056  0389  30AF               	movlw	175
  5057  038A  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5058  038B  302F               	movlw	47
  5059  038C  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5060  038D  3008               	movlw	8
  5061  038E  00F6               	movwf	FAST_UintToStr@ch
  5062  038F  2BB3               	goto	l283
  5063  0390                     l1494:	
  5064  0390  3084               	movlw	132
  5065  0391  0278               	subwf	FAST_UintToStr@fNum+1,w
  5066  0392  30D7               	movlw	215
  5067  0393  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5068  0394  3017               	movlw	23
  5069  0395  3B7A               	subwfb	FAST_UintToStr@fNum+3,w
  5070  0396  1C03               	btfss	3,0
  5071  0397  2BA2               	goto	l1500
  5072  0398  3000               	movlw	0
  5073  0399  02F7               	subwf	FAST_UintToStr@fNum,f
  5074  039A  3084               	movlw	132
  5075  039B  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5076  039C  30D7               	movlw	215
  5077  039D  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5078  039E  3017               	movlw	23
  5079  039F  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5080  03A0  3004               	movlw	4
  5081  03A1  00F6               	movwf	FAST_UintToStr@ch
  5082  03A2                     l1500:	
  5083  03A2  30C2               	movlw	194
  5084  03A3  0278               	subwf	FAST_UintToStr@fNum+1,w
  5085  03A4  30EB               	movlw	235
  5086  03A5  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5087  03A6  300B               	movlw	11
  5088  03A7  3B7A               	subwfb	FAST_UintToStr@fNum+3,w
  5089  03A8  1C03               	btfss	3,0
  5090  03A9  2BB3               	goto	l283
  5091  03AA  3000               	movlw	0
  5092  03AB  02F7               	subwf	FAST_UintToStr@fNum,f
  5093  03AC  30C2               	movlw	194
  5094  03AD  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5095  03AE  30EB               	movlw	235
  5096  03AF  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5097  03B0  300B               	movlw	11
  5098  03B1  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5099  03B2  14F6               	bsf	FAST_UintToStr@ch,1
  5100  03B3                     l283:	
  5101  03B3  30E1               	movlw	225
  5102  03B4  0278               	subwf	FAST_UintToStr@fNum+1,w
  5103  03B5  30F5               	movlw	245
  5104  03B6  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5105  03B7  3005               	movlw	5
  5106  03B8  3B7A               	subwfb	FAST_UintToStr@fNum+3,w
  5107  03B9  1C03               	btfss	3,0
  5108  03BA  2BC4               	goto	l286
  5109  03BB  3000               	movlw	0
  5110  03BC  02F7               	subwf	FAST_UintToStr@fNum,f
  5111  03BD  30E1               	movlw	225
  5112  03BE  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5113  03BF  30F5               	movlw	245
  5114  03C0  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5115  03C1  3005               	movlw	5
  5116  03C2  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5117  03C3  1476               	bsf	FAST_UintToStr@ch,0
  5118  03C4                     l286:	
  5119                           
  5120                           ;fast_int_to_str.c: 204: if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };
  5121  03C4  0876               	movf	FAST_UintToStr@ch,w
  5122  03C5  1D03               	btfss	3,2
  5123  03C6  2BCA               	goto	l1512
  5124  03C7  0874               	movf	FAST_UintToStr@leedIn,w
  5125  03C8  1D03               	btfss	3,2
  5126  03C9  2BD2               	goto	l1518
  5127  03CA                     l1512:	
  5128  03CA  0875               	movf	FAST_UintToStr@str,w
  5129  03CB  0086               	movwf	6
  5130  03CC  0187               	clrf	7
  5131  03CD  0876               	movf	FAST_UintToStr@ch,w
  5132  03CE  3E30               	addlw	48
  5133  03CF  0081               	movwf	1
  5134  03D0  0AF5               	incf	FAST_UintToStr@str,f
  5135  03D1  01F4               	clrf	FAST_UintToStr@leedIn
  5136  03D2                     l1518:	
  5137  03D2  30B4               	movlw	180
  5138                           
  5139                           ;fast_int_to_str.c: 206: ch = 0; if (fNum.u32 >= 8*10000000UL) { fNum.u32 -= 8*10000000U
      +                          L; ch = (char) 8; } else { if (fNum.u32 >= 4*10000000UL) { fNum.u32 -= 4*10000000UL; ch 
      +                          = (char) 4; } if (fNum.u32 >= 2*10000000UL) { fNum.u32 -= 2*10000000UL; ch |= (char) 2; 
      +                          } } if (fNu
  5140  03D3  01F6               	clrf	FAST_UintToStr@ch
  5141  03D4  0278               	subwf	FAST_UintToStr@fNum+1,w
  5142  03D5  30C4               	movlw	196
  5143  03D6  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5144  03D7  3004               	movlw	4
  5145  03D8  3B7A               	subwfb	FAST_UintToStr@fNum+3,w
  5146  03D9  1C03               	btfss	3,0
  5147  03DA  2BE6               	goto	l1526
  5148  03DB  3000               	movlw	0
  5149  03DC  02F7               	subwf	FAST_UintToStr@fNum,f
  5150  03DD  30B4               	movlw	180
  5151  03DE  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5152  03DF  30C4               	movlw	196
  5153  03E0  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5154  03E1  3004               	movlw	4
  5155  03E2  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5156  03E3  3008               	movlw	8
  5157  03E4  00F6               	movwf	FAST_UintToStr@ch
  5158  03E5  2C09               	goto	l291
  5159  03E6                     l1526:	
  5160  03E6  305A               	movlw	90
  5161  03E7  0278               	subwf	FAST_UintToStr@fNum+1,w
  5162  03E8  3062               	movlw	98
  5163  03E9  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5164  03EA  3002               	movlw	2
  5165  03EB  3B7A               	subwfb	FAST_UintToStr@fNum+3,w
  5166  03EC  1C03               	btfss	3,0
  5167  03ED  2BF8               	goto	l1532
  5168  03EE  3000               	movlw	0
  5169  03EF  02F7               	subwf	FAST_UintToStr@fNum,f
  5170  03F0  305A               	movlw	90
  5171  03F1  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5172  03F2  3062               	movlw	98
  5173  03F3  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5174  03F4  3002               	movlw	2
  5175  03F5  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5176  03F6  3004               	movlw	4
  5177  03F7  00F6               	movwf	FAST_UintToStr@ch
  5178  03F8                     l1532:	
  5179  03F8  302D               	movlw	45
  5180  03F9  0278               	subwf	FAST_UintToStr@fNum+1,w
  5181  03FA  3031               	movlw	49
  5182  03FB  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5183  03FC  3001               	movlw	1
  5184  03FD  3B7A               	subwfb	FAST_UintToStr@fNum+3,w
  5185  03FE  1C03               	btfss	3,0
  5186  03FF  2C09               	goto	l291
  5187  0400  3000               	movlw	0
  5188  0401  02F7               	subwf	FAST_UintToStr@fNum,f
  5189  0402  302D               	movlw	45
  5190  0403  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5191  0404  3031               	movlw	49
  5192  0405  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5193  0406  3001               	movlw	1
  5194  0407  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5195  0408  14F6               	bsf	FAST_UintToStr@ch,1
  5196  0409                     l291:	
  5197  0409  087A               	movf	FAST_UintToStr@fNum+3,w
  5198  040A  3080               	movlw	128
  5199  040B  1D03               	btfss	3,2
  5200  040C  2C15               	goto	L3
  5201  040D  0277               	subwf	FAST_UintToStr@fNum,w
  5202  040E  3096               	movlw	150
  5203  040F  3B78               	subwfb	FAST_UintToStr@fNum+1,w
  5204  0410  3098               	movlw	152
  5205  0411  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5206  0412  1C03               	btfss	3,0
  5207  0413  2C1D               	goto	l294
  5208  0414  3080               	movlw	128
  5209  0415                     L3:	
  5210  0415  02F7               	subwf	FAST_UintToStr@fNum,f
  5211  0416  3096               	movlw	150
  5212  0417  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5213  0418  3098               	movlw	152
  5214  0419  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5215  041A  3000               	movlw	0
  5216  041B  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5217  041C  1476               	bsf	FAST_UintToStr@ch,0
  5218  041D                     l294:	
  5219                           
  5220                           ;fast_int_to_str.c: 207: if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };
  5221  041D  0876               	movf	FAST_UintToStr@ch,w
  5222  041E  1D03               	btfss	3,2
  5223  041F  2C23               	goto	l1544
  5224  0420  0874               	movf	FAST_UintToStr@leedIn,w
  5225  0421  1D03               	btfss	3,2
  5226  0422  2C2B               	goto	l1550
  5227  0423                     l1544:	
  5228  0423  0875               	movf	FAST_UintToStr@str,w
  5229  0424  0086               	movwf	6
  5230  0425  0187               	clrf	7
  5231  0426  0876               	movf	FAST_UintToStr@ch,w
  5232  0427  3E30               	addlw	48
  5233  0428  0081               	movwf	1
  5234  0429  0AF5               	incf	FAST_UintToStr@str,f
  5235  042A  01F4               	clrf	FAST_UintToStr@leedIn
  5236  042B                     l1550:	
  5237                           
  5238                           ;fast_int_to_str.c: 209: ch = 0; if (fNum.u32 >= 8*1000000UL) { fNum.u32 -= 8*1000000UL;
      +                           ch = (char) 8; } else { if (fNum.u32 >= 4*1000000UL) { fNum.u32 -= 4*1000000UL; ch = (c
      +                          har) 4; } if (fNum.u32 >= 2*1000000UL) { fNum.u32 -= 2*1000000UL; ch |= (char) 2; } } if
      +                           (fNum.u32 
  5239  042B  01F6               	clrf	FAST_UintToStr@ch
  5240  042C  087A               	movf	FAST_UintToStr@fNum+3,w
  5241  042D  1D03               	btfss	3,2
  5242  042E  2C35               	goto	l1554
  5243  042F  3012               	movlw	18
  5244  0430  0278               	subwf	FAST_UintToStr@fNum+1,w
  5245  0431  307A               	movlw	122
  5246  0432  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5247  0433  1C03               	btfss	3,0
  5248  0434  2C40               	goto	l1558
  5249  0435                     l1554:	
  5250  0435  3000               	movlw	0
  5251  0436  02F7               	subwf	FAST_UintToStr@fNum,f
  5252  0437  3012               	movlw	18
  5253  0438  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5254  0439  307A               	movlw	122
  5255  043A  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5256  043B  3000               	movlw	0
  5257  043C  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5258  043D  3008               	movlw	8
  5259  043E  00F6               	movwf	FAST_UintToStr@ch
  5260  043F  2C67               	goto	l299
  5261  0440                     l1558:	
  5262  0440  087A               	movf	FAST_UintToStr@fNum+3,w
  5263  0441  1D03               	btfss	3,2
  5264  0442  2C49               	goto	l1560
  5265  0443  3009               	movlw	9
  5266  0444  0278               	subwf	FAST_UintToStr@fNum+1,w
  5267  0445  303D               	movlw	61
  5268  0446  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5269  0447  1C03               	btfss	3,0
  5270  0448  2C53               	goto	l1564
  5271  0449                     l1560:	
  5272  0449  3000               	movlw	0
  5273  044A  02F7               	subwf	FAST_UintToStr@fNum,f
  5274  044B  3009               	movlw	9
  5275  044C  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5276  044D  303D               	movlw	61
  5277  044E  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5278  044F  3000               	movlw	0
  5279  0450  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5280  0451  3004               	movlw	4
  5281  0452  00F6               	movwf	FAST_UintToStr@ch
  5282  0453                     l1564:	
  5283  0453  087A               	movf	FAST_UintToStr@fNum+3,w
  5284  0454  3080               	movlw	128
  5285  0455  1D03               	btfss	3,2
  5286  0456  2C5F               	goto	L4
  5287  0457  0277               	subwf	FAST_UintToStr@fNum,w
  5288  0458  3084               	movlw	132
  5289  0459  3B78               	subwfb	FAST_UintToStr@fNum+1,w
  5290  045A  301E               	movlw	30
  5291  045B  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5292  045C  1C03               	btfss	3,0
  5293  045D  2C67               	goto	l299
  5294  045E  3080               	movlw	128
  5295  045F                     L4:	
  5296  045F  02F7               	subwf	FAST_UintToStr@fNum,f
  5297  0460  3084               	movlw	132
  5298  0461  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5299  0462  301E               	movlw	30
  5300  0463  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5301  0464  3000               	movlw	0
  5302  0465  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5303  0466  14F6               	bsf	FAST_UintToStr@ch,1
  5304  0467                     l299:	
  5305  0467  087A               	movf	FAST_UintToStr@fNum+3,w
  5306  0468  3040               	movlw	64
  5307  0469  1D03               	btfss	3,2
  5308  046A  2C73               	goto	L5
  5309  046B  0277               	subwf	FAST_UintToStr@fNum,w
  5310  046C  3042               	movlw	66
  5311  046D  3B78               	subwfb	FAST_UintToStr@fNum+1,w
  5312  046E  300F               	movlw	15
  5313  046F  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5314  0470  1C03               	btfss	3,0
  5315  0471  2C7B               	goto	l302
  5316  0472  3040               	movlw	64
  5317  0473                     L5:	
  5318  0473  02F7               	subwf	FAST_UintToStr@fNum,f
  5319  0474  3042               	movlw	66
  5320  0475  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5321  0476  300F               	movlw	15
  5322  0477  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5323  0478  3000               	movlw	0
  5324  0479  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5325  047A  1476               	bsf	FAST_UintToStr@ch,0
  5326  047B                     l302:	
  5327                           
  5328                           ;fast_int_to_str.c: 210: if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };
  5329  047B  0876               	movf	FAST_UintToStr@ch,w
  5330  047C  1D03               	btfss	3,2
  5331  047D  2C81               	goto	l1576
  5332  047E  0874               	movf	FAST_UintToStr@leedIn,w
  5333  047F  1D03               	btfss	3,2
  5334  0480  2C89               	goto	l1582
  5335  0481                     l1576:	
  5336  0481  0875               	movf	FAST_UintToStr@str,w
  5337  0482  0086               	movwf	6
  5338  0483  0187               	clrf	7
  5339  0484  0876               	movf	FAST_UintToStr@ch,w
  5340  0485  3E30               	addlw	48
  5341  0486  0081               	movwf	1
  5342  0487  0AF5               	incf	FAST_UintToStr@str,f
  5343  0488  01F4               	clrf	FAST_UintToStr@leedIn
  5344  0489                     l1582:	
  5345                           
  5346                           ;fast_int_to_str.c: 212: ch = 0; if (fNum.u32 >= 8*100000UL) { fNum.u32 -= 8*100000UL; c
      +                          h = (char) 8; } else { if (fNum.u32 >= 4*100000UL) { fNum.u32 -= 4*100000UL; ch = (char)
      +                           4; } if (fNum.u32 >= 2*100000UL) { fNum.u32 -= 2*100000UL; ch |= (char) 2; } } if (fNum
      +                          .u32 >= 1*1
  5347  0489  01F6               	clrf	FAST_UintToStr@ch
  5348  048A  087A               	movf	FAST_UintToStr@fNum+3,w
  5349  048B  1D03               	btfss	3,2
  5350  048C  2C93               	goto	l1586
  5351  048D  3035               	movlw	53
  5352  048E  0278               	subwf	FAST_UintToStr@fNum+1,w
  5353  048F  300C               	movlw	12
  5354  0490  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5355  0491  1C03               	btfss	3,0
  5356  0492  2C9E               	goto	l1590
  5357  0493                     l1586:	
  5358  0493  3000               	movlw	0
  5359  0494  02F7               	subwf	FAST_UintToStr@fNum,f
  5360  0495  3035               	movlw	53
  5361  0496  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5362  0497  300C               	movlw	12
  5363  0498  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5364  0499  3000               	movlw	0
  5365  049A  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5366  049B  3008               	movlw	8
  5367  049C  00F6               	movwf	FAST_UintToStr@ch
  5368  049D  2CC7               	goto	l307
  5369  049E                     l1590:	
  5370  049E  087A               	movf	FAST_UintToStr@fNum+3,w
  5371  049F  3080               	movlw	128
  5372  04A0  1D03               	btfss	3,2
  5373  04A1  2CAA               	goto	L6
  5374  04A2  0277               	subwf	FAST_UintToStr@fNum,w
  5375  04A3  301A               	movlw	26
  5376  04A4  3B78               	subwfb	FAST_UintToStr@fNum+1,w
  5377  04A5  3006               	movlw	6
  5378  04A6  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5379  04A7  1C03               	btfss	3,0
  5380  04A8  2CB3               	goto	l1596
  5381  04A9  3080               	movlw	128
  5382  04AA                     L6:	
  5383  04AA  02F7               	subwf	FAST_UintToStr@fNum,f
  5384  04AB  301A               	movlw	26
  5385  04AC  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5386  04AD  3006               	movlw	6
  5387  04AE  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5388  04AF  3000               	movlw	0
  5389  04B0  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5390  04B1  3004               	movlw	4
  5391  04B2  00F6               	movwf	FAST_UintToStr@ch
  5392  04B3                     l1596:	
  5393  04B3  087A               	movf	FAST_UintToStr@fNum+3,w
  5394  04B4  3040               	movlw	64
  5395  04B5  1D03               	btfss	3,2
  5396  04B6  2CBF               	goto	L7
  5397  04B7  0277               	subwf	FAST_UintToStr@fNum,w
  5398  04B8  300D               	movlw	13
  5399  04B9  3B78               	subwfb	FAST_UintToStr@fNum+1,w
  5400  04BA  3003               	movlw	3
  5401  04BB  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5402  04BC  1C03               	btfss	3,0
  5403  04BD  2CC7               	goto	l307
  5404  04BE  3040               	movlw	64
  5405  04BF                     L7:	
  5406  04BF  02F7               	subwf	FAST_UintToStr@fNum,f
  5407  04C0  300D               	movlw	13
  5408  04C1  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5409  04C2  3003               	movlw	3
  5410  04C3  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5411  04C4  3000               	movlw	0
  5412  04C5  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5413  04C6  14F6               	bsf	FAST_UintToStr@ch,1
  5414  04C7                     l307:	
  5415  04C7  087A               	movf	FAST_UintToStr@fNum+3,w
  5416  04C8  30A0               	movlw	160
  5417  04C9  1D03               	btfss	3,2
  5418  04CA  2CD3               	goto	L8
  5419  04CB  0277               	subwf	FAST_UintToStr@fNum,w
  5420  04CC  3086               	movlw	134
  5421  04CD  3B78               	subwfb	FAST_UintToStr@fNum+1,w
  5422  04CE  3001               	movlw	1
  5423  04CF  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5424  04D0  1C03               	btfss	3,0
  5425  04D1  2CDB               	goto	l310
  5426  04D2  30A0               	movlw	160
  5427  04D3                     L8:	
  5428  04D3  02F7               	subwf	FAST_UintToStr@fNum,f
  5429  04D4  3086               	movlw	134
  5430  04D5  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5431  04D6  3001               	movlw	1
  5432  04D7  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5433  04D8  3000               	movlw	0
  5434  04D9  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5435  04DA  1476               	bsf	FAST_UintToStr@ch,0
  5436  04DB                     l310:	
  5437                           
  5438                           ;fast_int_to_str.c: 213: if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };
  5439  04DB  0876               	movf	FAST_UintToStr@ch,w
  5440  04DC  1D03               	btfss	3,2
  5441  04DD  2CE1               	goto	l1608
  5442  04DE  0874               	movf	FAST_UintToStr@leedIn,w
  5443  04DF  1D03               	btfss	3,2
  5444  04E0  2CE9               	goto	l1614
  5445  04E1                     l1608:	
  5446  04E1  0875               	movf	FAST_UintToStr@str,w
  5447  04E2  0086               	movwf	6
  5448  04E3  0187               	clrf	7
  5449  04E4  0876               	movf	FAST_UintToStr@ch,w
  5450  04E5  3E30               	addlw	48
  5451  04E6  0081               	movwf	1
  5452  04E7  0AF5               	incf	FAST_UintToStr@str,f
  5453  04E8  01F4               	clrf	FAST_UintToStr@leedIn
  5454  04E9                     l1614:	
  5455                           
  5456                           ;fast_int_to_str.c: 216: ch = 0; if (fNum.u32 >= 8*10000UL) { fNum.u32 -= 8*10000UL; ch 
      +                          = (char) 8; } else { if (fNum.u32 >= 4*10000UL) { fNum.u32 -= 4*10000UL; ch = (char) 4; 
      +                          } if (fNum.u32 >= 2*10000UL) { fNum.u32 -= 2*10000UL; ch |= (char) 2; } } if (fNum.u32 >
      +                          = 1*10000UL
  5457  04E9  01F6               	clrf	FAST_UintToStr@ch
  5458  04EA  087A               	movf	FAST_UintToStr@fNum+3,w
  5459  04EB  3080               	movlw	128
  5460  04EC  1D03               	btfss	3,2
  5461  04ED  2CF6               	goto	L9
  5462  04EE  0277               	subwf	FAST_UintToStr@fNum,w
  5463  04EF  3038               	movlw	56
  5464  04F0  3B78               	subwfb	FAST_UintToStr@fNum+1,w
  5465  04F1  3001               	movlw	1
  5466  04F2  3B79               	subwfb	FAST_UintToStr@fNum+2,w
  5467  04F3  1C03               	btfss	3,0
  5468  04F4  2D00               	goto	l1622
  5469  04F5  3080               	movlw	128
  5470  04F6                     L9:	
  5471  04F6  02F7               	subwf	FAST_UintToStr@fNum,f
  5472  04F7  3038               	movlw	56
  5473  04F8  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5474  04F9  3001               	movlw	1
  5475  04FA  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5476  04FB  3000               	movlw	0
  5477  04FC  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5478  04FD  3008               	movlw	8
  5479  04FE  00F6               	movwf	FAST_UintToStr@ch
  5480  04FF  2D29               	goto	l315
  5481  0500                     l1622:	
  5482  0500  087A               	movf	FAST_UintToStr@fNum+3,w
  5483  0501  1D03               	btfss	3,2
  5484  0502  2D0C               	goto	l1624
  5485  0503  0879               	movf	FAST_UintToStr@fNum+2,w
  5486  0504  3040               	movlw	64
  5487  0505  1D03               	btfss	3,2
  5488  0506  2D0D               	goto	L10
  5489  0507  0277               	subwf	FAST_UintToStr@fNum,w
  5490  0508  309C               	movlw	156
  5491  0509  3B78               	subwfb	FAST_UintToStr@fNum+1,w
  5492  050A  1C03               	btfss	3,0
  5493  050B  2D15               	goto	l1628
  5494  050C                     l1624:	
  5495  050C  3040               	movlw	64
  5496  050D                     L10:	
  5497  050D  02F7               	subwf	FAST_UintToStr@fNum,f
  5498  050E  309C               	movlw	156
  5499  050F  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5500  0510  3000               	movlw	0
  5501  0511  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5502  0512  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5503  0513  3004               	movlw	4
  5504  0514  00F6               	movwf	FAST_UintToStr@ch
  5505  0515                     l1628:	
  5506  0515  087A               	movf	FAST_UintToStr@fNum+3,w
  5507  0516  1D03               	btfss	3,2
  5508  0517  2D21               	goto	l1630
  5509  0518  0879               	movf	FAST_UintToStr@fNum+2,w
  5510  0519  3020               	movlw	32
  5511  051A  1D03               	btfss	3,2
  5512  051B  2D22               	goto	L11
  5513  051C  0277               	subwf	FAST_UintToStr@fNum,w
  5514  051D  304E               	movlw	78
  5515  051E  3B78               	subwfb	FAST_UintToStr@fNum+1,w
  5516  051F  1C03               	btfss	3,0
  5517  0520  2D29               	goto	l315
  5518  0521                     l1630:	
  5519  0521  3020               	movlw	32
  5520  0522                     L11:	
  5521  0522  02F7               	subwf	FAST_UintToStr@fNum,f
  5522  0523  304E               	movlw	78
  5523  0524  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5524  0525  3000               	movlw	0
  5525  0526  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5526  0527  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5527  0528  14F6               	bsf	FAST_UintToStr@ch,1
  5528  0529                     l315:	
  5529  0529  087A               	movf	FAST_UintToStr@fNum+3,w
  5530  052A  1D03               	btfss	3,2
  5531  052B  2D35               	goto	l1634
  5532  052C  0879               	movf	FAST_UintToStr@fNum+2,w
  5533  052D  3010               	movlw	16
  5534  052E  1D03               	btfss	3,2
  5535  052F  2D36               	goto	L12
  5536  0530  0277               	subwf	FAST_UintToStr@fNum,w
  5537  0531  3027               	movlw	39
  5538  0532  3B78               	subwfb	FAST_UintToStr@fNum+1,w
  5539  0533  1C03               	btfss	3,0
  5540  0534  2D3D               	goto	l318
  5541  0535                     l1634:	
  5542  0535  3010               	movlw	16
  5543  0536                     L12:	
  5544  0536  02F7               	subwf	FAST_UintToStr@fNum,f
  5545  0537  3027               	movlw	39
  5546  0538  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5547  0539  3000               	movlw	0
  5548  053A  3BF9               	subwfb	FAST_UintToStr@fNum+2,f
  5549  053B  3BFA               	subwfb	FAST_UintToStr@fNum+3,f
  5550  053C  1476               	bsf	FAST_UintToStr@ch,0
  5551  053D                     l318:	
  5552                           
  5553                           ;fast_int_to_str.c: 217: if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };
  5554  053D  0876               	movf	FAST_UintToStr@ch,w
  5555  053E  1D03               	btfss	3,2
  5556  053F  2D43               	goto	l1640
  5557  0540  0874               	movf	FAST_UintToStr@leedIn,w
  5558  0541  1D03               	btfss	3,2
  5559  0542  2D4B               	goto	l1646
  5560  0543                     l1640:	
  5561  0543  0875               	movf	FAST_UintToStr@str,w
  5562  0544  0086               	movwf	6
  5563  0545  0187               	clrf	7
  5564  0546  0876               	movf	FAST_UintToStr@ch,w
  5565  0547  3E30               	addlw	48
  5566  0548  0081               	movwf	1
  5567  0549  0AF5               	incf	FAST_UintToStr@str,f
  5568  054A  01F4               	clrf	FAST_UintToStr@leedIn
  5569  054B                     l1646:	
  5570  054B  301F               	movlw	31
  5571                           
  5572                           ;fast_int_to_str.c: 219: ch = 0; if (fNum.u16 >= 8*1000UL) { fNum.u16 -= 8*1000UL; ch = 
      +                          (char) 8; } else { if (fNum.u16 >= 4*1000UL) { fNum.u16 -= 4*1000UL; ch = (char) 4; } if
      +                           (fNum.u16 >= 2*1000UL) { fNum.u16 -= 2*1000UL; ch |= (char) 2; } } if (fNum.u16 >= 1*10
      +                          00UL) { fNu
  5573  054C  01F6               	clrf	FAST_UintToStr@ch
  5574  054D  0278               	subwf	FAST_UintToStr@fNum+1,w
  5575  054E  3040               	movlw	64
  5576  054F  1903               	skipnz
  5577  0550  0277               	subwf	FAST_UintToStr@fNum,w
  5578  0551  1C03               	skipc
  5579  0552  2D5A               	goto	l1652
  5580  0553  3040               	movlw	64
  5581  0554  02F7               	subwf	FAST_UintToStr@fNum,f
  5582  0555  301F               	movlw	31
  5583  0556  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5584  0557  3008               	movlw	8
  5585  0558  00F6               	movwf	FAST_UintToStr@ch
  5586  0559  2D73               	goto	l323
  5587  055A                     l1652:	
  5588  055A  300F               	movlw	15
  5589  055B  0278               	subwf	FAST_UintToStr@fNum+1,w
  5590  055C  30A0               	movlw	160
  5591  055D  1903               	skipnz
  5592  055E  0277               	subwf	FAST_UintToStr@fNum,w
  5593  055F  1C03               	skipc
  5594  0560  2D67               	goto	l324
  5595  0561  30A0               	movlw	160
  5596  0562  02F7               	subwf	FAST_UintToStr@fNum,f
  5597  0563  300F               	movlw	15
  5598  0564  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5599  0565  3004               	movlw	4
  5600  0566  00F6               	movwf	FAST_UintToStr@ch
  5601  0567                     l324:	
  5602  0567  3007               	movlw	7
  5603  0568  0278               	subwf	FAST_UintToStr@fNum+1,w
  5604  0569  30D0               	movlw	208
  5605  056A  1903               	skipnz
  5606  056B  0277               	subwf	FAST_UintToStr@fNum,w
  5607  056C  1C03               	skipc
  5608  056D  2D73               	goto	l323
  5609  056E  30D0               	movlw	208
  5610  056F  02F7               	subwf	FAST_UintToStr@fNum,f
  5611  0570  3007               	movlw	7
  5612  0571  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5613  0572  14F6               	bsf	FAST_UintToStr@ch,1
  5614  0573                     l323:	
  5615  0573  3003               	movlw	3
  5616  0574  0278               	subwf	FAST_UintToStr@fNum+1,w
  5617  0575  30E8               	movlw	232
  5618  0576  1903               	skipnz
  5619  0577  0277               	subwf	FAST_UintToStr@fNum,w
  5620  0578  1C03               	skipc
  5621  0579  2D7F               	goto	l1664
  5622  057A  30E8               	movlw	232
  5623  057B  02F7               	subwf	FAST_UintToStr@fNum,f
  5624  057C  3003               	movlw	3
  5625  057D  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5626  057E  1476               	bsf	FAST_UintToStr@ch,0
  5627  057F                     l1664:	
  5628                           
  5629                           ;fast_int_to_str.c: 220: if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };
  5630  057F  0876               	movf	FAST_UintToStr@ch,w
  5631  0580  1D03               	btfss	3,2
  5632  0581  2D85               	goto	l1668
  5633  0582  0874               	movf	FAST_UintToStr@leedIn,w
  5634  0583  1D03               	btfss	3,2
  5635  0584  2D8D               	goto	l1674
  5636  0585                     l1668:	
  5637  0585  0875               	movf	FAST_UintToStr@str,w
  5638  0586  0086               	movwf	6
  5639  0587  0187               	clrf	7
  5640  0588  0876               	movf	FAST_UintToStr@ch,w
  5641  0589  3E30               	addlw	48
  5642  058A  0081               	movwf	1
  5643  058B  0AF5               	incf	FAST_UintToStr@str,f
  5644  058C  01F4               	clrf	FAST_UintToStr@leedIn
  5645  058D                     l1674:	
  5646  058D  3003               	movlw	3
  5647                           
  5648                           ;fast_int_to_str.c: 222: ch = 0; if (fNum.u16 >= 8*100UL) { fNum.u16 -= 8*100UL; ch = (c
      +                          har) 8; } else { if (fNum.u16 >= 4*100UL) { fNum.u16 -= 4*100UL; ch = (char) 4; } if (fN
      +                          um.u16 >= 2*100UL) { fNum.u16 -= 2*100UL; ch |= (char) 2; } } if (fNum.u16 >= 1*100UL) {
      +                           fNum.u16 -
  5649  058E  01F6               	clrf	FAST_UintToStr@ch
  5650  058F  0278               	subwf	FAST_UintToStr@fNum+1,w
  5651  0590  3020               	movlw	32
  5652  0591  1903               	skipnz
  5653  0592  0277               	subwf	FAST_UintToStr@fNum,w
  5654  0593  1C03               	skipc
  5655  0594  2D9C               	goto	l1680
  5656  0595  3020               	movlw	32
  5657  0596  02F7               	subwf	FAST_UintToStr@fNum,f
  5658  0597  3003               	movlw	3
  5659  0598  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5660  0599  3008               	movlw	8
  5661  059A  00F6               	movwf	FAST_UintToStr@ch
  5662  059B  2DB5               	goto	l331
  5663  059C                     l1680:	
  5664  059C  3001               	movlw	1
  5665  059D  0278               	subwf	FAST_UintToStr@fNum+1,w
  5666  059E  3090               	movlw	144
  5667  059F  1903               	skipnz
  5668  05A0  0277               	subwf	FAST_UintToStr@fNum,w
  5669  05A1  1C03               	skipc
  5670  05A2  2DA9               	goto	l332
  5671  05A3  3090               	movlw	144
  5672  05A4  02F7               	subwf	FAST_UintToStr@fNum,f
  5673  05A5  3001               	movlw	1
  5674  05A6  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5675  05A7  3004               	movlw	4
  5676  05A8  00F6               	movwf	FAST_UintToStr@ch
  5677  05A9                     l332:	
  5678  05A9  3000               	movlw	0
  5679  05AA  0278               	subwf	FAST_UintToStr@fNum+1,w
  5680  05AB  30C8               	movlw	200
  5681  05AC  1903               	skipnz
  5682  05AD  0277               	subwf	FAST_UintToStr@fNum,w
  5683  05AE  1C03               	skipc
  5684  05AF  2DB5               	goto	l331
  5685  05B0  30C8               	movlw	200
  5686  05B1  02F7               	subwf	FAST_UintToStr@fNum,f
  5687  05B2  3000               	movlw	0
  5688  05B3  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5689  05B4  14F6               	bsf	FAST_UintToStr@ch,1
  5690  05B5                     l331:	
  5691  05B5  3000               	movlw	0
  5692  05B6  0278               	subwf	FAST_UintToStr@fNum+1,w
  5693  05B7  3064               	movlw	100
  5694  05B8  1903               	skipnz
  5695  05B9  0277               	subwf	FAST_UintToStr@fNum,w
  5696  05BA  1C03               	skipc
  5697  05BB  2DC1               	goto	l1692
  5698  05BC  3064               	movlw	100
  5699  05BD  02F7               	subwf	FAST_UintToStr@fNum,f
  5700  05BE  3000               	movlw	0
  5701  05BF  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5702  05C0  1476               	bsf	FAST_UintToStr@ch,0
  5703  05C1                     l1692:	
  5704                           
  5705                           ;fast_int_to_str.c: 223: if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };
  5706  05C1  0876               	movf	FAST_UintToStr@ch,w
  5707  05C2  1D03               	btfss	3,2
  5708  05C3  2DC7               	goto	l1696
  5709  05C4  0874               	movf	FAST_UintToStr@leedIn,w
  5710  05C5  1D03               	btfss	3,2
  5711  05C6  2DCF               	goto	l1702
  5712  05C7                     l1696:	
  5713  05C7  0875               	movf	FAST_UintToStr@str,w
  5714  05C8  0086               	movwf	6
  5715  05C9  0187               	clrf	7
  5716  05CA  0876               	movf	FAST_UintToStr@ch,w
  5717  05CB  3E30               	addlw	48
  5718  05CC  0081               	movwf	1
  5719  05CD  0AF5               	incf	FAST_UintToStr@str,f
  5720  05CE  01F4               	clrf	FAST_UintToStr@leedIn
  5721  05CF                     l1702:	
  5722  05CF  3000               	movlw	0
  5723                           
  5724                           ;fast_int_to_str.c: 226: ch = 0; if (fNum.u16 >= 8*10UL) { fNum.u16 -= 8*10UL; ch = (cha
      +                          r) 8; } else { if (fNum.u16 >= 4*10UL) { fNum.u16 -= 4*10UL; ch = (char) 4; } if (fNum.u
      +                          16 >= 2*10UL) { fNum.u16 -= 2*10UL; ch |= (char) 2; } } if (fNum.u16 >= 1*10UL) { fNum.u
      +                          16 -= 1*10U
  5725  05D0  01F6               	clrf	FAST_UintToStr@ch
  5726  05D1  0278               	subwf	FAST_UintToStr@fNum+1,w
  5727  05D2  3050               	movlw	80
  5728  05D3  1903               	skipnz
  5729  05D4  0277               	subwf	FAST_UintToStr@fNum,w
  5730  05D5  1C03               	skipc
  5731  05D6  2DDE               	goto	l1708
  5732  05D7  3050               	movlw	80
  5733  05D8  02F7               	subwf	FAST_UintToStr@fNum,f
  5734  05D9  3000               	movlw	0
  5735  05DA  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5736  05DB  3008               	movlw	8
  5737  05DC  00F6               	movwf	FAST_UintToStr@ch
  5738  05DD  2DF7               	goto	l339
  5739  05DE                     l1708:	
  5740  05DE  3000               	movlw	0
  5741  05DF  0278               	subwf	FAST_UintToStr@fNum+1,w
  5742  05E0  3028               	movlw	40
  5743  05E1  1903               	skipnz
  5744  05E2  0277               	subwf	FAST_UintToStr@fNum,w
  5745  05E3  1C03               	skipc
  5746  05E4  2DEB               	goto	l340
  5747  05E5  3028               	movlw	40
  5748  05E6  02F7               	subwf	FAST_UintToStr@fNum,f
  5749  05E7  3000               	movlw	0
  5750  05E8  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5751  05E9  3004               	movlw	4
  5752  05EA  00F6               	movwf	FAST_UintToStr@ch
  5753  05EB                     l340:	
  5754  05EB  3000               	movlw	0
  5755  05EC  0278               	subwf	FAST_UintToStr@fNum+1,w
  5756  05ED  3014               	movlw	20
  5757  05EE  1903               	skipnz
  5758  05EF  0277               	subwf	FAST_UintToStr@fNum,w
  5759  05F0  1C03               	skipc
  5760  05F1  2DF7               	goto	l339
  5761  05F2  3014               	movlw	20
  5762  05F3  02F7               	subwf	FAST_UintToStr@fNum,f
  5763  05F4  3000               	movlw	0
  5764  05F5  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5765  05F6  14F6               	bsf	FAST_UintToStr@ch,1
  5766  05F7                     l339:	
  5767  05F7  3000               	movlw	0
  5768  05F8  0278               	subwf	FAST_UintToStr@fNum+1,w
  5769  05F9  300A               	movlw	10
  5770  05FA  1903               	skipnz
  5771  05FB  0277               	subwf	FAST_UintToStr@fNum,w
  5772  05FC  1C03               	skipc
  5773  05FD  2E03               	goto	l1720
  5774  05FE  300A               	movlw	10
  5775  05FF  02F7               	subwf	FAST_UintToStr@fNum,f
  5776  0600  3000               	movlw	0
  5777  0601  3BF8               	subwfb	FAST_UintToStr@fNum+1,f
  5778  0602  1476               	bsf	FAST_UintToStr@ch,0
  5779  0603                     l1720:	
  5780                           
  5781                           ;fast_int_to_str.c: 227: if (ch || !leedIn) { *str = ch + '0'; str++; leedIn = 0; };
  5782  0603  0876               	movf	FAST_UintToStr@ch,w
  5783  0604  1D03               	btfss	3,2
  5784  0605  2E09               	goto	l1724
  5785  0606  0874               	movf	FAST_UintToStr@leedIn,w
  5786  0607  1D03               	btfss	3,2
  5787  0608  2E10               	goto	l1730
  5788  0609                     l1724:	
  5789  0609  0875               	movf	FAST_UintToStr@str,w
  5790  060A  0086               	movwf	6
  5791  060B  0187               	clrf	7
  5792  060C  0876               	movf	FAST_UintToStr@ch,w
  5793  060D  3E30               	addlw	48
  5794  060E  0081               	movwf	1
  5795  060F  0AF5               	incf	FAST_UintToStr@str,f
  5796  0610                     l1730:	
  5797  0610  3008               	movlw	8
  5798                           
  5799                           ;fast_int_to_str.c: 229: ch = 0; if (fNum.u8 >= 8*1UL) { fNum.u8 -= 8*1UL; ch = (char) 8
      +                          ; } else { if (fNum.u8 >= 4*1UL) { fNum.u8 -= 4*1UL; ch = (char) 4; } if (fNum.u8 >= 2*1
      +                          UL) { fNum.u8 -= 2*1UL; ch |= (char) 2; } } if (fNum.u8 >= 1*1UL) { fNum.u8 -= 1*1UL; ch
      +                           |= (char) 
  5800  0611  01F6               	clrf	FAST_UintToStr@ch
  5801  0612  0277               	subwf	FAST_UintToStr@fNum,w
  5802  0613  1C03               	skipc
  5803  0614  2E1A               	goto	l1738
  5804  0615  3008               	movlw	8
  5805  0616  02F7               	subwf	FAST_UintToStr@fNum,f
  5806  0617  3008               	movlw	8
  5807  0618  00F6               	movwf	FAST_UintToStr@ch
  5808  0619  2E29               	goto	l1750
  5809  061A                     l1738:	
  5810  061A  3004               	movlw	4
  5811  061B  0277               	subwf	FAST_UintToStr@fNum,w
  5812  061C  1C03               	skipc
  5813  061D  2E22               	goto	l1744
  5814  061E  3004               	movlw	4
  5815  061F  02F7               	subwf	FAST_UintToStr@fNum,f
  5816  0620  3004               	movlw	4
  5817  0621  00F6               	movwf	FAST_UintToStr@ch
  5818  0622                     l1744:	
  5819  0622  3002               	movlw	2
  5820  0623  0277               	subwf	FAST_UintToStr@fNum,w
  5821  0624  1C03               	skipc
  5822  0625  2E29               	goto	l1750
  5823  0626  03F7               	decf	FAST_UintToStr@fNum,f
  5824  0627  03F7               	decf	FAST_UintToStr@fNum,f
  5825  0628  14F6               	bsf	FAST_UintToStr@ch,1
  5826  0629                     l1750:	
  5827  0629  0877               	movf	FAST_UintToStr@fNum,w
  5828  062A  1903               	btfsc	3,2
  5829  062B  2E2E               	goto	l1756
  5830  062C  03F7               	decf	FAST_UintToStr@fNum,f
  5831  062D  1476               	bsf	FAST_UintToStr@ch,0
  5832  062E                     l1756:	
  5833                           
  5834                           ;fast_int_to_str.c: 230: *str = ch + '0'; str++;
  5835  062E  0875               	movf	FAST_UintToStr@str,w
  5836  062F  0086               	movwf	6
  5837  0630  0187               	clrf	7
  5838  0631  0876               	movf	FAST_UintToStr@ch,w
  5839  0632  3E30               	addlw	48
  5840  0633  0081               	movwf	1
  5841  0634  0AF5               	incf	FAST_UintToStr@str,f
  5842                           
  5843                           ;fast_int_to_str.c: 232: *str = 0;
  5844  0635  0875               	movf	FAST_UintToStr@str,w
  5845  0636  0086               	movwf	6
  5846  0637  0181               	clrf	1
  5847  0638  0008               	return
  5848  0639                     __end_of_FAST_UintToStr:	
  5849                           
  5850                           	psect	bssBANK0
  5851  0020                     __pbssBANK0:	
  5852  0020                     _eusartTxBuffer:	
  5853  0020                     	ds	8
  5854  0028                     _eusartRxCount:	
  5855  0028                     	ds	1
  5856  0029                     _eusartRxHead:	
  5857  0029                     	ds	1
  5858  002A                     _eusartTxTail:	
  5859  002A                     	ds	1
  5860  002B                     _testCount:	
  5861  002B                     	ds	1
  5862  002C                     _str:	
  5863  002C                     	ds	30
  5864                           
  5865                           	psect	bssBANK1
  5866  00A0                     __pbssBANK1:	
  5867  00A0                     _testLength:	
  5868  00A0                     	ds	60
  5869  00DC                     _eusartRxBuffer:	
  5870  00DC                     	ds	8
  5871                           
  5872                           	psect	clrtext
  5873  0664                     clear_ram0:	
  5874                           ;	Called with FSR0 containing the base address, and
  5875                           ;	WREG with the size to clear
  5876                           
  5877  0664  0064               	clrwdt	;clear the watchdog before getting into this loop
  5878  0665                     clrloop0:	
  5879  0665  0180               	clrf	0	;clear RAM location pointed to by FSR
  5880  0666  3101               	addfsr 0,1
  5881  0667  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5882  0668  2E65               	goto	clrloop0	;have we reached the end yet?
  5883  0669  3400               	retlw	0	;all done for this memory range, return
  5884                           
  5885                           	psect	cstackCOMMON
  5886  0070                     __pcstackCOMMON:	
  5887  0070                     ?_PIN_MANAGER_Initialize:	
  5888  0070                     ??_PIN_MANAGER_Initialize:	
  5889                           ; 1 bytes @ 0x0
  5890                           
  5891  0070                     ?_OSCILLATOR_Initialize:	
  5892                           ; 1 bytes @ 0x0
  5893                           
  5894  0070                     ??_OSCILLATOR_Initialize:	
  5895                           ; 1 bytes @ 0x0
  5896                           
  5897  0070                     ?_TMR1_Initialize:	
  5898                           ; 1 bytes @ 0x0
  5899                           
  5900  0070                     ??_TMR1_Initialize:	
  5901                           ; 1 bytes @ 0x0
  5902                           
  5903  0070                     ?_EUSART_Initialize:	
  5904                           ; 1 bytes @ 0x0
  5905                           
  5906  0070                     ??_EUSART_Initialize:	
  5907                           ; 1 bytes @ 0x0
  5908                           
  5909  0070                     ?_EUSART_Transmit_ISR:	
  5910                           ; 1 bytes @ 0x0
  5911                           
  5912  0070                     ??_EUSART_Transmit_ISR:	
  5913                           ; 1 bytes @ 0x0
  5914                           
  5915  0070                     ?_EUSART_Receive_ISR:	
  5916                           ; 1 bytes @ 0x0
  5917                           
  5918  0070                     ??_EUSART_Receive_ISR:	
  5919                           ; 1 bytes @ 0x0
  5920                           
  5921  0070                     ?_TMR1_StartTimer:	
  5922                           ; 1 bytes @ 0x0
  5923                           
  5924  0070                     ??_TMR1_StartTimer:	
  5925                           ; 1 bytes @ 0x0
  5926                           
  5927  0070                     ?_FAST_UintToStr:	
  5928                           ; 1 bytes @ 0x0
  5929                           
  5930  0070                     ?_SYSTEM_Initialize:	
  5931                           ; 1 bytes @ 0x0
  5932                           
  5933  0070                     ?_INTERRUPT_InterruptManager:	
  5934                           ; 1 bytes @ 0x0
  5935                           
  5936  0070                     ??_INTERRUPT_InterruptManager:	
  5937                           ; 1 bytes @ 0x0
  5938                           
  5939  0070                     ?_TMR1_StopTimer:	
  5940                           ; 1 bytes @ 0x0
  5941                           
  5942  0070                     ??_TMR1_StopTimer:	
  5943                           ; 1 bytes @ 0x0
  5944                           
  5945  0070                     ?_TMR1_WriteTimer:	
  5946                           ; 1 bytes @ 0x0
  5947                           
  5948  0070                     ?_TEST_SetUp:	
  5949                           ; 1 bytes @ 0x0
  5950                           
  5951  0070                     ?_TEST_TearDown:	
  5952                           ; 1 bytes @ 0x0
  5953                           
  5954  0070                     ?_TEST_ASSERT_EQUAL_STRING:	
  5955                           ; 1 bytes @ 0x0
  5956                           
  5957  0070                     ?_test_IntToStr:	
  5958                           ; 1 bytes @ 0x0
  5959                           
  5960  0070                     ?_test_UintToStr_Uint8PerfTest:	
  5961                           ; 1 bytes @ 0x0
  5962                           
  5963  0070                     ?_test_UintToStr_Uint16PerfTest:	
  5964                           ; 1 bytes @ 0x0
  5965                           
  5966  0070                     ?_test_UintToStr_Uint32PerfTest:	
  5967                           ; 1 bytes @ 0x0
  5968                           
  5969  0070                     ?_test_IntToStr_Int8PerfTest:	
  5970                           ; 1 bytes @ 0x0
  5971                           
  5972  0070                     ?_test_IntToStr_Int16PerfTest:	
  5973                           ; 1 bytes @ 0x0
  5974                           
  5975  0070                     ?_test_IntToStr_Int32PerfTest:	
  5976                           ; 1 bytes @ 0x0
  5977                           
  5978  0070                     ?_test_sprintf_Int32PerfTest:	
  5979                           ; 1 bytes @ 0x0
  5980                           
  5981  0070                     ?_main:	
  5982                           ; 1 bytes @ 0x0
  5983                           
  5984  0070                     ?_TMR1_ReadTimer:	
  5985                           ; 1 bytes @ 0x0
  5986                           
  5987  0070                     ?___lldiv:	
  5988                           ; 2 bytes @ 0x0
  5989                           
  5990  0070                     PIN_MANAGER_Initialize@state:	
  5991                           ; 4 bytes @ 0x0
  5992                           
  5993  0070                     TMR1_WriteTimer@timerVal:	
  5994                           ; 1 bytes @ 0x0
  5995                           
  5996  0070                     TEST_ASSERT_EQUAL_STRING@a:	
  5997                           ; 2 bytes @ 0x0
  5998                           
  5999  0070                     FAST_UintToStr@num:	
  6000                           ; 2 bytes @ 0x0
  6001                           
  6002  0070                     ___lldiv@divisor:	
  6003                           ; 4 bytes @ 0x0
  6004                           
  6005                           
  6006                           ; 4 bytes @ 0x0
  6007  0070                     	ds	1
  6008  0071                     ??_SYSTEM_Initialize:	
  6009                           
  6010                           ; 1 bytes @ 0x1
  6011  0071                     	ds	1
  6012  0072                     ??_TMR1_ReadTimer:	
  6013  0072                     ??_TMR1_WriteTimer:	
  6014                           ; 1 bytes @ 0x2
  6015                           
  6016  0072                     ??_TEST_SetUp:	
  6017                           ; 1 bytes @ 0x2
  6018                           
  6019  0072                     TEST_ASSERT_EQUAL_STRING@b:	
  6020                           ; 1 bytes @ 0x2
  6021                           
  6022  0072                     TMR1_ReadTimer@readVal:	
  6023                           ; 1 bytes @ 0x2
  6024                           
  6025                           
  6026                           ; 2 bytes @ 0x2
  6027  0072                     	ds	1
  6028  0073                     ??_TEST_ASSERT_EQUAL_STRING:	
  6029                           
  6030                           ; 1 bytes @ 0x3
  6031  0073                     	ds	1
  6032  0074                     ??_FAST_UintToStr:	
  6033  0074                     ??_TEST_TearDown:	
  6034                           ; 1 bytes @ 0x4
  6035                           
  6036  0074                     FAST_UintToStr@leedIn:	
  6037                           ; 1 bytes @ 0x4
  6038                           
  6039  0074                     ___lldiv@dividend:	
  6040                           ; 1 bytes @ 0x4
  6041                           
  6042                           
  6043                           ; 4 bytes @ 0x4
  6044  0074                     	ds	1
  6045  0075                     FAST_UintToStr@str:	
  6046                           
  6047                           ; 1 bytes @ 0x5
  6048  0075                     	ds	1
  6049  0076                     FAST_UintToStr@ch:	
  6050                           
  6051                           ; 1 bytes @ 0x6
  6052  0076                     	ds	1
  6053  0077                     FAST_UintToStr@fNum:	
  6054                           
  6055                           ; 4 bytes @ 0x7
  6056  0077                     	ds	1
  6057  0078                     ??___lldiv:	
  6058  0078                     ___lldiv@quotient:	
  6059                           ; 1 bytes @ 0x8
  6060                           
  6061                           
  6062                           ; 4 bytes @ 0x8
  6063  0078                     	ds	3
  6064  007B                     ??_FAST_IntToStr:	
  6065  007B                     ??_test_UintToStr_Uint8PerfTest:	
  6066                           ; 1 bytes @ 0xB
  6067                           
  6068  007B                     ??_test_UintToStr_Uint16PerfTest:	
  6069                           ; 1 bytes @ 0xB
  6070                           
  6071  007B                     ??_test_UintToStr_Uint32PerfTest:	
  6072                           ; 1 bytes @ 0xB
  6073                           
  6074  007B                     FAST_IntToStr@str:	
  6075                           ; 1 bytes @ 0xB
  6076                           
  6077                           
  6078                           ; 1 bytes @ 0xB
  6079  007B                     	ds	1
  6080  007C                     ??_test_IntToStr:	
  6081  007C                     ??_test_IntToStr_Int8PerfTest:	
  6082                           ; 1 bytes @ 0xC
  6083                           
  6084  007C                     ??_test_IntToStr_Int16PerfTest:	
  6085                           ; 1 bytes @ 0xC
  6086                           
  6087  007C                     ??_test_IntToStr_Int32PerfTest:	
  6088                           ; 1 bytes @ 0xC
  6089                           
  6090  007C                     ___lldiv@counter:	
  6091                           ; 1 bytes @ 0xC
  6092                           
  6093                           
  6094                           ; 1 bytes @ 0xC
  6095  007C                     	ds	1
  6096  007D                     ??___llmod:	
  6097  007D                     ___llmod@counter:	
  6098                           ; 1 bytes @ 0xD
  6099                           
  6100                           
  6101                           ; 1 bytes @ 0xD
  6102  007D                     	ds	1
  6103  007E                     ??_test_sprintf_Int32PerfTest:	
  6104  007E                     ??_main:	
  6105                           ; 1 bytes @ 0xE
  6106                           
  6107                           
  6108                           	psect	cstackBANK0
  6109  004A                     __pcstackBANK0:	
  6110                           ; 1 bytes @ 0xE
  6111                           
  6112  004A                     ?_FAST_IntToStr:	
  6113  004A                     ?___llmod:	
  6114                           ; 1 bytes @ 0x0
  6115                           
  6116  004A                     FAST_IntToStr@num:	
  6117                           ; 4 bytes @ 0x0
  6118                           
  6119  004A                     ___llmod@divisor:	
  6120                           ; 4 bytes @ 0x0
  6121                           
  6122                           
  6123                           ; 4 bytes @ 0x0
  6124  004A                     	ds	4
  6125  004E                     ___llmod@dividend:	
  6126                           
  6127                           ; 4 bytes @ 0x4
  6128  004E                     	ds	4
  6129  0052                     ?_sprintf:	
  6130  0052                     sprintf@f:	
  6131                           ; 2 bytes @ 0x8
  6132                           
  6133                           
  6134                           ; 2 bytes @ 0x8
  6135  0052                     	ds	6
  6136  0058                     ??_sprintf:	
  6137                           
  6138                           ; 1 bytes @ 0xE
  6139  0058                     	ds	6
  6140  005E                     sprintf@prec:	
  6141                           
  6142                           ; 2 bytes @ 0x14
  6143  005E                     	ds	2
  6144  0060                     sprintf@ap:	
  6145                           
  6146                           ; 1 bytes @ 0x16
  6147  0060                     	ds	1
  6148  0061                     sprintf@flag:	
  6149                           
  6150                           ; 1 bytes @ 0x17
  6151  0061                     	ds	1
  6152  0062                     sprintf@val:	
  6153                           
  6154                           ; 4 bytes @ 0x18
  6155  0062                     	ds	4
  6156  0066                     sprintf@sp:	
  6157                           
  6158                           ; 1 bytes @ 0x1C
  6159  0066                     	ds	1
  6160  0067                     sprintf@c:	
  6161                           
  6162                           ; 1 bytes @ 0x1D
  6163  0067                     	ds	1
  6164                           
  6165                           	psect	swtext1
  6166  0700                     __pswtext1:	
  6167  0700                     S2066:	
  6168  0700  3182  2AA4         	ljmp	l1920
  6169  0702  3181  29C7         	ljmp	l1918
  6170  0704  3181  29C7         	ljmp	l1918
  6171  0706  3181  29C7         	ljmp	l1918
  6172  0708  3181  29C7         	ljmp	l1918
  6173  070A  3181  29C7         	ljmp	l1918
  6174  070C  3181  29C7         	ljmp	l1918
  6175  070E  3181  29C7         	ljmp	l1918
  6176  0710  3181  29C7         	ljmp	l1918
  6177  0712  3181  29C7         	ljmp	l1918
  6178  0714  3181  29C7         	ljmp	l1918
  6179  0716  3181  29C7         	ljmp	l1918
  6180  0718  3181  29C7         	ljmp	l1918
  6181  071A  3181  29C7         	ljmp	l1918
  6182  071C  3181  29C7         	ljmp	l1918
  6183  071E  3181  29C7         	ljmp	l1918
  6184  0720  3181  29C7         	ljmp	l1918
  6185  0722  3181  29C7         	ljmp	l1918
  6186  0724  3181  29C7         	ljmp	l1918
  6187  0726  3181  29C7         	ljmp	l1918
  6188  0728  3181  29C7         	ljmp	l1918
  6189  072A  3181  29C7         	ljmp	l1918
  6190  072C  3181  29C7         	ljmp	l1918
  6191  072E  3181  29C7         	ljmp	l1918
  6192  0730  3181  29C7         	ljmp	l1918
  6193  0732  3181  29C7         	ljmp	l1918
  6194  0734  3181  29C7         	ljmp	l1918
  6195  0736  3181  29C7         	ljmp	l1918
  6196  0738  3181  29C7         	ljmp	l1918
  6197  073A  3181  29C7         	ljmp	l1918
  6198  073C  3181  29C7         	ljmp	l1918
  6199  073E  3181  29C7         	ljmp	l1918
  6200  0740  3181  29C7         	ljmp	l1918
  6201  0742  3181  29C7         	ljmp	l1918
  6202  0744  3181  29C7         	ljmp	l1918
  6203  0746  3181  29C7         	ljmp	l1918
  6204  0748  3181  29C7         	ljmp	l1918
  6205  074A  3181  29C7         	ljmp	l1918
  6206  074C  3181  29C7         	ljmp	l1918
  6207  074E  3181  29C7         	ljmp	l1918
  6208  0750  3181  29C7         	ljmp	l1918
  6209  0752  3181  29C7         	ljmp	l1918
  6210  0754  3181  29C7         	ljmp	l1918
  6211  0756  3181  29C7         	ljmp	l1918
  6212  0758  3181  29C7         	ljmp	l1918
  6213  075A  3181  29C7         	ljmp	l1918
  6214  075C  3181  29C7         	ljmp	l1918
  6215  075E  3181  29C7         	ljmp	l1918
  6216  0760  3181  29C7         	ljmp	l1918
  6217  0762  3181  29C7         	ljmp	l1918
  6218  0764  3181  29C7         	ljmp	l1918
  6219  0766  3181  29C7         	ljmp	l1918
  6220  0768  3181  29C7         	ljmp	l1918
  6221  076A  3181  29C7         	ljmp	l1918
  6222  076C  3181  29C7         	ljmp	l1918
  6223  076E  3181  29C7         	ljmp	l1918
  6224  0770  3181  29C7         	ljmp	l1918
  6225  0772  3181  29C7         	ljmp	l1918
  6226  0774  3181  29C7         	ljmp	l1918
  6227  0776  3181  29C7         	ljmp	l1918
  6228  0778  3181  29C7         	ljmp	l1918
  6229  077A  3181  29C7         	ljmp	l1918
  6230  077C  3181  29C7         	ljmp	l1918
  6231  077E  3181  29C7         	ljmp	l1918
  6232  0780  3181  29C7         	ljmp	l1918
  6233  0782  3181  29C7         	ljmp	l1918
  6234  0784  3181  29C7         	ljmp	l1918
  6235  0786  3181  29C7         	ljmp	l1918
  6236  0788  3181  29C7         	ljmp	l1918
  6237  078A  3181  29C7         	ljmp	l1918
  6238  078C  3181  29C7         	ljmp	l1918
  6239  078E  3181  29C7         	ljmp	l1918
  6240  0790  3181  29C7         	ljmp	l1918
  6241  0792  3181  29C7         	ljmp	l1918
  6242  0794  3181  29C7         	ljmp	l1918
  6243  0796  3181  29C7         	ljmp	l1918
  6244  0798  3181  29C7         	ljmp	l1918
  6245  079A  3181  29C7         	ljmp	l1918
  6246  079C  3181  29C7         	ljmp	l1918
  6247  079E  3181  29C7         	ljmp	l1918
  6248  07A0  3181  29C7         	ljmp	l1918
  6249  07A2  3181  29C7         	ljmp	l1918
  6250  07A4  3181  29C7         	ljmp	l1918
  6251  07A6  3181  29C7         	ljmp	l1918
  6252  07A8  3181  29C7         	ljmp	l1918
  6253  07AA  3181  29C7         	ljmp	l1918
  6254  07AC  3181  29C7         	ljmp	l1918
  6255  07AE  3181  29C7         	ljmp	l1918
  6256  07B0  3181  29C7         	ljmp	l1918
  6257  07B2  3181  29C7         	ljmp	l1918
  6258  07B4  3181  29C7         	ljmp	l1918
  6259  07B6  3181  29C7         	ljmp	l1918
  6260  07B8  3181  29C7         	ljmp	l1918
  6261  07BA  3181  29C7         	ljmp	l1918
  6262  07BC  3181  29C7         	ljmp	l1918
  6263  07BE  3181  29C7         	ljmp	l1918
  6264  07C0  3181  29C7         	ljmp	l1918
  6265  07C2  3181  29C7         	ljmp	l1918
  6266  07C4  3181  29C7         	ljmp	l1918
  6267  07C6  3181  29C7         	ljmp	l1918
  6268  07C8  3181  29F9         	ljmp	l370
  6269  07CA  3181  29C7         	ljmp	l1918
  6270  07CC  3181  29C7         	ljmp	l1918
  6271  07CE  3181  29C7         	ljmp	l1918
  6272  07D0  3181  29C7         	ljmp	l1918
  6273  07D2  3181  29F9         	ljmp	l370
  6274  07D4  3181  29C7         	ljmp	l1918
  6275  07D6  3181  29C7         	ljmp	l1918
  6276  07D8  3181  29E3         	ljmp	l367
  6277                           
  6278                           	psect	intentry
  6279  0004                     __pintentry:	
  6280 ;; *************** function _INTERRUPT_InterruptManager *****************
  6281 ;; Defined at:
  6282 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;		None
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;		None
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      void 
  6289 ;; Registers used:
  6290 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 1E/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;Total ram usage:        0 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    1
  6303 ;; This function calls:
  6304 ;;		_EUSART_Receive_ISR
  6305 ;;		_EUSART_Transmit_ISR
  6306 ;; This function is called by:
  6307 ;;		Interrupt level 1
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311  0004                     _INTERRUPT_InterruptManager:	
  6312                           
  6313                           ;incstack = 0
  6314  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6315                           
  6316                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6317  0005  3180               	pagesel	$
  6318                           
  6319                           ;interrupt_manager.c: 54: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  6320  0006  0021               	movlb	1	; select bank1
  6321  0007  1E10               	btfss	16,4	;volatile
  6322  0008  2810               	goto	i1l29
  6323  0009  0020               	movlb	0	; select bank0
  6324  000A  1E10               	btfss	16,4	;volatile
  6325  000B  2810               	goto	i1l29
  6326                           
  6327                           ;interrupt_manager.c: 55: {
  6328                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  6329  000C  3186  2639  3180   	fcall	_EUSART_Transmit_ISR
  6330                           
  6331                           ;interrupt_manager.c: 57: }
  6332  000F  2818               	goto	i1l33
  6333  0010                     i1l29:	
  6334                           
  6335                           ;interrupt_manager.c: 58: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  6336  0010  0021               	movlb	1	; select bank1
  6337  0011  1E90               	btfss	16,5	;volatile
  6338  0012  2818               	goto	i1l33
  6339  0013  0020               	movlb	0	; select bank0
  6340  0014  1E90               	btfss	16,5	;volatile
  6341  0015  2818               	goto	i1l33
  6342                           
  6343                           ;interrupt_manager.c: 59: {
  6344                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  6345  0016  3186  264F         	fcall	_EUSART_Receive_ISR
  6346  0018                     i1l33:	
  6347                           ;interrupt_manager.c: 61: }
  6348                           
  6349  0018  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6350  0019  0009               	retfie
  6351  001A                     __end_of_INTERRUPT_InterruptManager:	
  6352                           
  6353                           	psect	text27
  6354  0639                     __ptext27:	
  6355 ;; *************** function _EUSART_Transmit_ISR *****************
  6356 ;; Defined at:
  6357 ;;		line 169 in file "mcc_generated_files/eusart.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;		None
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  1    wreg      void 
  6364 ;; Registers used:
  6365 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6366 ;; Tracked objects:
  6367 ;;		On entry : 1F/0
  6368 ;;		On exit  : 1E/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;Total ram usage:        0 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; This function calls:
  6378 ;;		Nothing
  6379 ;; This function is called by:
  6380 ;;		_INTERRUPT_InterruptManager
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384                           
  6385                           ;psect for function _EUSART_Transmit_ISR
  6386  0639                     _EUSART_Transmit_ISR:	
  6387                           
  6388                           ;eusart.c: 173: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  6389                           
  6390                           ;incstack = 0
  6391                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6392  0639  3008               	movlw	8
  6393  063A  026A               	subwf	_eusartTxBufferRemaining,w
  6394  063B  1803               	skipnc
  6395  063C  2E4C               	goto	i1l95
  6396                           
  6397                           ;eusart.c: 174: {
  6398                           ;eusart.c: 175: TX1REG = eusartTxBuffer[eusartTxTail++];
  6399  063D  082A               	movf	_eusartTxTail,w
  6400  063E  3E20               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6401  063F  0086               	movwf	6
  6402  0640  0187               	clrf	7
  6403  0641  0801               	movf	1,w
  6404  0642  0023               	movlb	3	; select bank3
  6405  0643  009A               	movwf	26	;volatile
  6406  0644  0020               	movlb	0	; select bank0
  6407  0645  3008               	movlw	8
  6408  0646  0AAA               	incf	_eusartTxTail,f
  6409                           
  6410                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  6411  0647  022A               	subwf	_eusartTxTail,w
  6412  0648  1803               	btfsc	3,0
  6413                           
  6414                           ;eusart.c: 177: {
  6415                           ;eusart.c: 178: eusartTxTail = 0;
  6416  0649  01AA               	clrf	_eusartTxTail
  6417                           
  6418                           ;eusart.c: 179: }
  6419                           ;eusart.c: 180: eusartTxBufferRemaining++;
  6420  064A  0AEA               	incf	_eusartTxBufferRemaining,f	;volatile
  6421                           
  6422                           ;eusart.c: 181: }
  6423  064B  0008               	return
  6424  064C                     i1l95:	
  6425                           
  6426                           ;eusart.c: 182: else
  6427                           ;eusart.c: 183: {
  6428                           ;eusart.c: 184: PIE1bits.TXIE = 0;
  6429  064C  0021               	movlb	1	; select bank1
  6430  064D  1210               	bcf	16,4	;volatile
  6431  064E  0008               	return
  6432  064F                     __end_of_EUSART_Transmit_ISR:	
  6433                           
  6434                           	psect	text28
  6435  064F                     __ptext28:	
  6436 ;; *************** function _EUSART_Receive_ISR *****************
  6437 ;; Defined at:
  6438 ;;		line 188 in file "mcc_generated_files/eusart.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  1    wreg      void 
  6445 ;; Registers used:
  6446 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6447 ;; Tracked objects:
  6448 ;;		On entry : 1F/0
  6449 ;;		On exit  : 1F/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;Total ram usage:        0 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; This function calls:
  6459 ;;		Nothing
  6460 ;; This function is called by:
  6461 ;;		_INTERRUPT_InterruptManager
  6462 ;; This function uses a non-reentrant model
  6463 ;;
  6464                           
  6465                           
  6466                           ;psect for function _EUSART_Receive_ISR
  6467  064F                     _EUSART_Receive_ISR:	
  6468                           
  6469                           ;eusart.c: 191: if(1 == RC1STAbits.OERR)
  6470                           
  6471                           ;incstack = 0
  6472                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6473  064F  0023               	movlb	3	; select bank3
  6474  0650  1C9D               	btfss	29,1	;volatile
  6475  0651  2E54               	goto	i1l1946
  6476                           
  6477                           ;eusart.c: 192: {
  6478                           ;eusart.c: 195: RC1STAbits.SPEN = 0;
  6479  0652  139D               	bcf	29,7	;volatile
  6480                           
  6481                           ;eusart.c: 196: RC1STAbits.SPEN = 1;
  6482  0653  179D               	bsf	29,7	;volatile
  6483  0654                     i1l1946:	
  6484                           
  6485                           ;eusart.c: 197: }
  6486                           ;eusart.c: 200: eusartRxBuffer[eusartRxHead++] = RC1REG;
  6487  0654  0020               	movlb	0	; select bank0
  6488  0655  0829               	movf	_eusartRxHead,w
  6489  0656  3EDC               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6490  0657  0086               	movwf	6
  6491  0658  0187               	clrf	7
  6492  0659  0023               	movlb	3	; select bank3
  6493  065A  0819               	movf	25,w	;volatile
  6494  065B  0081               	movwf	1
  6495  065C  0020               	movlb	0	; select bank0
  6496  065D  3008               	movlw	8
  6497  065E  0AA9               	incf	_eusartRxHead,f
  6498                           
  6499                           ;eusart.c: 201: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  6500  065F  0229               	subwf	_eusartRxHead,w
  6501  0660  1803               	btfsc	3,0
  6502                           
  6503                           ;eusart.c: 202: {
  6504                           ;eusart.c: 203: eusartRxHead = 0;
  6505  0661  01A9               	clrf	_eusartRxHead
  6506                           
  6507                           ;eusart.c: 204: }
  6508                           ;eusart.c: 205: eusartRxCount++;
  6509  0662  0AA8               	incf	_eusartRxCount,f	;volatile
  6510  0663  0008               	return
  6511  0664                     __end_of_EUSART_Receive_ISR:	
  6512  007E                     btemp	set	126	;btemp
  6513  007E                     int$flags	set	126
  6514  007E                     wtemp	set	126
  6515  007E                     wtemp0	set	126
  6516  0080                     wtemp1	set	128
  6517  0082                     wtemp2	set	130
  6518  0084                     wtemp3	set	132
  6519  0086                     wtemp4	set	134
  6520  0088                     wtemp5	set	136
  6521  007F                     wtemp6	set	127
  6522  007E                     ttemp	set	126
  6523  007E                     ttemp0	set	126
  6524  0081                     ttemp1	set	129
  6525  0084                     ttemp2	set	132
  6526  0087                     ttemp3	set	135
  6527  007F                     ttemp4	set	127
  6528  007E                     ltemp	set	126
  6529  007E                     ltemp0	set	126
  6530  0082                     ltemp1	set	130
  6531  0086                     ltemp2	set	134
  6532  0080                     ltemp3	set	128


Data Sizes:
    Strings     60
    Constant    40
    Data        0
    BSS         110
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      75
    BANK1            80      0      68
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    TEST_ASSERT_EQUAL_STRING@b	PTR const unsigned char  size(1) Largest target is 30
		 -> str(BANK0[30]), 

    TEST_ASSERT_EQUAL_STRING@a	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_6(CODE[11]), STR_5(CODE[11]), STR_4(CODE[11]), STR_3(CODE[12]), 
		 -> STR_2(CODE[11]), STR_1(CODE[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_7(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 30
		 -> str(BANK0[30]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    FAST_UintToStr@str	PTR unsigned char  size(1) Largest target is 30
		 -> str(BANK0[30]), 

    FAST_IntToStr@str	PTR unsigned char  size(1) Largest target is 30
		 -> str(BANK0[30]), 


Critical Paths under _main in COMMON

    _sprintf->___llmod
    ___llmod->___lldiv
    _test_UintToStr_Uint8PerfTest->_FAST_UintToStr
    _test_UintToStr_Uint32PerfTest->_FAST_UintToStr
    _test_UintToStr_Uint16PerfTest->_FAST_UintToStr
    _test_IntToStr_Int8PerfTest->_FAST_IntToStr
    _test_IntToStr_Int32PerfTest->_FAST_IntToStr
    _test_IntToStr_Int16PerfTest->_FAST_IntToStr
    _test_IntToStr->_FAST_IntToStr
    _FAST_IntToStr->_FAST_UintToStr
    _TEST_TearDown->_TMR1_ReadTimer
    _TEST_SetUp->_TMR1_WriteTimer
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _test_sprintf_Int32PerfTest->_sprintf
    _sprintf->___llmod
    _test_IntToStr_Int8PerfTest->_FAST_IntToStr
    _test_IntToStr_Int32PerfTest->_FAST_IntToStr
    _test_IntToStr_Int16PerfTest->_FAST_IntToStr
    _test_IntToStr->_FAST_IntToStr

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   20760
                  _SYSTEM_Initialize
                         _TEST_SetUp
                      _TEST_TearDown
                      _test_IntToStr
        _test_IntToStr_Int16PerfTest
        _test_IntToStr_Int32PerfTest
         _test_IntToStr_Int8PerfTest
      _test_UintToStr_Uint16PerfTest
      _test_UintToStr_Uint32PerfTest
       _test_UintToStr_Uint8PerfTest
         _test_sprintf_Int32PerfTest
 ---------------------------------------------------------------------------------
 (1) _test_sprintf_Int32PerfTest                           0     0      0    1137
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    24      6    1137
                                              8 BANK0     22    16      6
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     265
                                             13 COMMON     1     1      0
                                              0 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     268
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) _test_UintToStr_Uint8PerfTest                         0     0      0    2211
                     _FAST_UintToStr
 ---------------------------------------------------------------------------------
 (1) _test_UintToStr_Uint32PerfTest                        0     0      0    2211
                     _FAST_UintToStr
 ---------------------------------------------------------------------------------
 (1) _test_UintToStr_Uint16PerfTest                        0     0      0    2211
                     _FAST_UintToStr
 ---------------------------------------------------------------------------------
 (1) _test_IntToStr_Int8PerfTest                           0     0      0    3043
                      _FAST_IntToStr
 ---------------------------------------------------------------------------------
 (1) _test_IntToStr_Int32PerfTest                          0     0      0    3043
                      _FAST_IntToStr
 ---------------------------------------------------------------------------------
 (1) _test_IntToStr_Int16PerfTest                          0     0      0    3043
                      _FAST_IntToStr
 ---------------------------------------------------------------------------------
 (1) _test_IntToStr                                        0     0      0    3679
                      _FAST_IntToStr
           _TEST_ASSERT_EQUAL_STRING
 ---------------------------------------------------------------------------------
 (2) _TEST_ASSERT_EQUAL_STRING                             3     0      3     636
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) _FAST_IntToStr                                        5     1      4    3043
                                             11 COMMON     1     1      0
                                              0 BANK0      4     0      4
                     _FAST_UintToStr
 ---------------------------------------------------------------------------------
 (2) _FAST_UintToStr                                      11     7      4    2211
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _TEST_TearDown                                        0     0      0      24
                     _TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_ReadTimer                                       4     2      2      24
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _TEST_SetUp                                           0     0      0     143
                    _TMR1_StartTimer
                     _TMR1_StopTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_WriteTimer                                      2     0      2     143
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      15
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _TEST_SetUp
     _TMR1_StartTimer
     _TMR1_StopTimer
     _TMR1_WriteTimer
   _TEST_TearDown
     _TMR1_ReadTimer
   _test_IntToStr
     _FAST_IntToStr
       _FAST_UintToStr
     _TEST_ASSERT_EQUAL_STRING
   _test_IntToStr_Int16PerfTest
     _FAST_IntToStr
       _FAST_UintToStr
   _test_IntToStr_Int32PerfTest
     _FAST_IntToStr
       _FAST_UintToStr
   _test_IntToStr_Int8PerfTest
     _FAST_IntToStr
       _FAST_UintToStr
   _test_UintToStr_Uint16PerfTest
     _FAST_UintToStr
   _test_UintToStr_Uint32PerfTest
     _FAST_UintToStr
   _test_UintToStr_Uint8PerfTest
     _FAST_UintToStr
   _test_sprintf_Int32PerfTest
     _sprintf
       ___lldiv
       ___llmod
         ___lldiv (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1E      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      44       7       85.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      9D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      9D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Jul 29 20:14:43 2016

                                     pc 0002                             __CFG_CP$OFF 0000  
                           __CFG_LVP$ON 0000                                     l310 04DB  
                                   l302 047B                                     l331 05B5  
                                   l323 0573                                     l315 0529  
                                   l307 04C7                                     l340 05EB  
                                   l332 05A9                                     l324 0567  
                                   l229 0158                                     l318 053D  
                                   l370 01F9                                     l339 05F7  
                                   l291 0409                                     l283 03B3  
                                   l276 0371                                     l294 041D  
                                   l286 03C4                                     l367 01E3  
                                   l299 0467                                     _GIE 005F  
                                   u670 00B8                         _timer1ReloadVal 0068  
                                   _str 002C                            __CFG_BORV$LO 0000  
                                   wreg 0009                            __CFG_IESO$ON 0000  
                                  S2066 0700                         ??_test_IntToStr 007C  
                          __CFG_ZCD$OFF 0000                                    l1500 03A2  
                                  l2044 0061                                    l1440 01B7  
                                  l1512 03CA                                    l1532 03F8  
                                  l1460 033B                                    l1630 0521  
                                  l1622 0500                                    l1550 042B  
                                  l1526 03E6                                    l1518 03D2  
                                  l1614 04E9                                    l1702 05CF  
                                  l1454 0334                                    l1720 0603  
                                  l1640 0543                                    l1624 050C  
                                  l1608 04E1                                    l1560 0449  
                                  l1544 0423                                    l1472 0360  
                                  l1800 030F                                    l1730 0610  
                                  l1634 0535                                    l1554 0435  
                                  l1466 034E                                    l1724 0609  
                                  l1708 05DE                                    l1652 055A  
                                  l1628 0515                                    l1564 0453  
                                  l1804 0315                                    l1750 0629  
                                  l1646 054B                                    l1590 049E  
                                  l1582 0489                                    l1558 0440  
                                  l1494 0390                                    l1486 037C  
                                  l1910 026D                                    l1902 0255  
                                  l1824 0194                                    l1744 0622  
                                  l1680 059C                                    l1664 057F  
                                  l1576 0481                                    l1920 02A4  
                                  l1850 00C6                                    l1738 061A  
                                  l1674 058D                                    l1586 0493  
                                  l1756 062E                                    l1692 05C1  
                                  l1668 0585                                    l1596 04B3  
                                  l1860 014E                                    l1780 02D9  
                                  l1772 02BC                                    l1916 0264  
                                  l1908 025F                                    l1870 01E1  
                                  l1918 01C7                                    l1696 05C7  
                                  l1784 02DF                                    l1880 0209  
                                  l1890 022A                                    l1874 01E4  
                                  l1796 02F7                                    l1884 021B  
                                  l1894 022C                                    STR_1 0817  
                                  STR_2 082F                                    STR_3 0802  
                                  STR_4 0819                                    STR_5 0824  
                                  STR_6 080E                                    STR_7 083A  
                                  _LATA 010C                                    _LATB 010D  
                                  _LATC 010E                                    u1515 0305  
                                  u1475 02CE                                    u1585 024E  
                                  i1l33 0018                                    i1l29 0010  
                                  i1l95 064C                                    _WPUA 020C  
                                  _WPUB 020D                                    _WPUC 020E  
                          __CFG_WRT$OFF 0000                           __CFG_FCMEN$ON 0000  
                                  _main 002F                                    fsr0h 0005  
                                  fsr1h 0007                                    fsr0l 0004  
                                  indf0 0000                                    indf1 0001  
                                  fsr1l 0006                                    btemp 007E  
                         __CFG_BOREN$ON 0000                                    ltemp 007E  
                                  start 001A                                    ttemp 007E  
                                  wtemp 007E                           __CFG_MCLRE$ON 0000  
                         __CFG_PLLEN$ON 0000          __size_of_OSCILLATOR_Initialize 0005  
         __end_of_OSCILLATOR_Initialize 0086                                   ?_main 0070  
                         __CFG_WDTE$OFF 0000                         _TMR1_StartTimer 01B7  
                       __end_of___lldiv 02E8                                   _T1CON 0018  
                       __end_of___llmod 031E                                   _LATA0 0860  
                                 _TMR1H 0017                                   _TMR1L 0016  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E                         __end_of_dpowers 0802  
                           ?_TEST_SetUp 0070                 __end_of_TMR1_Initialize 01B7  
                                 ltemp0 007E                                   ltemp1 0082  
                                 ltemp2 0086                                   ltemp3 0080  
                                 ttemp0 007E                                   ttemp1 0081  
                                 ttemp2 0084                                   ttemp3 0087  
                                 ttemp4 007F                                   status 0003  
                                 wtemp0 007E                                   wtemp1 0080  
                                 wtemp2 0082                                   wtemp3 0084  
                                 wtemp4 0086                                   wtemp5 0088  
                                 wtemp6 007F                         __end_of_sprintf 02A9  
                       _TMR1_WriteTimer 00BD                         __initialization 001C  
                          __end_of_main 0063                          __CFG_LPBOR$OFF 0000  
           ?_INTERRUPT_InterruptManager 0070                                  ??_main 007E  
                      ___llmod@dividend 004E                                  _ANSELA 018C  
                                _ANSELB 018D                                  _ANSELC 018E  
                                _T1GCON 0019                                  _RC1REG 0199  
                                _RC1STA 019D                 TMR1_WriteTimer@timerVal 0070  
                                _RB7PPS 0E9F                                  i1l1946 0654  
                                _OSCCON 0099                                  _SPBRGH 019C  
                                _SPBRGL 019B                                  _TX1REG 019A  
                                _TX1STA 019E                          __CFG_PWRTE$OFF 0000  
               __end_of_TMR1_StartTimer 01B9                          __CFG_STVREN$ON 0000  
                             ??___lldiv 0078                               ??___llmod 007D  
                   _EUSART_Transmit_ISR 0639                     __size_of_TEST_SetUp 000A  
                    FAST_UintToStr@fNum 0077       __size_of_TEST_ASSERT_EQUAL_STRING 0001  
             ?_TEST_ASSERT_EQUAL_STRING 0070    __end_of_test_UintToStr_Uint8PerfTest 0188  
 __size_of_test_UintToStr_Uint8PerfTest 0007            _test_UintToStr_Uint8PerfTest 0181  
                 __end_of_FAST_IntToStr 0158                               ??_sprintf 0058  
               __end_of_TMR1_WriteTimer 00CB                    ?_EUSART_Transmit_ISR 0070  
                      ?_TMR1_Initialize 0070                       _SYSTEM_Initialize 007A  
               __end_of__initialization 002C                      ?_SYSTEM_Initialize 0070  
          ??_test_sprintf_Int32PerfTest 007E                 __size_of_FAST_UintToStr 031B  
                        __pcstackCOMMON 0070                     ??_SYSTEM_Initialize 0071  
             TEST_ASSERT_EQUAL_STRING@a 0070               TEST_ASSERT_EQUAL_STRING@b 0072  
                        _OPTION_REGbits 0095                 __size_of_TMR1_ReadTimer 000B  
   __size_of_test_sprintf_Int32PerfTest 000C           ?_test_UintToStr_Uint8PerfTest 0070  
             __end_of_SYSTEM_Initialize 0081                   ??_EUSART_Transmit_ISR 0070  
                            __pbssBANK0 0020                              __pbssBANK1 00A0  
           __size_of_EUSART_Receive_ISR 0015                   __end_of_TEST_TearDown 007A  
                            __pmaintext 002F                        ?_TMR1_StartTimer 0070  
                       __CFG_PPS1WAY$ON 0000                              __pintentry 0004  
          ??_test_IntToStr_Int8PerfTest 007C                 __size_of_TMR1_StopTimer 0003  
                         _eusartRxCount 0028                         __CFG_WDTCCS$SWC 0000  
                               _OSCTUNE 0098                                 _PPSLOCK 0E0F  
                          ??_TEST_SetUp 0072                        ?_TMR1_WriteTimer 0070  
                 __end_of_test_IntToStr 013A     __size_of_test_IntToStr_Int8PerfTest 0009  
                               ___lldiv 02A9            ?_test_IntToStr_Int32PerfTest 0070  
          ?_test_IntToStr_Int16PerfTest 0070                                 ___llmod 02E8  
                    __end_of_TEST_SetUp 006D                                 __ptext1 0188  
                               __ptext2 01C4                                 __ptext3 02E8  
                               __ptext4 02A9                                 __ptext5 0181  
                               __ptext6 017A                                 __ptext7 0173  
                               __ptext8 016A                                 __ptext9 0162  
                             _T1CONbits 0018                                 _dpowers 07DA  
                 _OSCILLATOR_Initialize 0081                ??_PIN_MANAGER_Initialize 0070  
            __size_of_SYSTEM_Initialize 0007                                 _sprintf 01C4  
                      FAST_IntToStr@num 004A                                 clrloop0 0665  
                      FAST_IntToStr@str 007B                    end_of_initialization 002C  
    __end_of_test_sprintf_Int32PerfTest 0194              _test_sprintf_Int32PerfTest 0188  
        ??_test_UintToStr_Uint8PerfTest 007B                          _FAST_UintToStr 031E  
                     _EUSART_Initialize 0194                         ___lldiv@divisor 0070  
                       ___lldiv@counter 007C        __end_of_TEST_ASSERT_EQUAL_STRING 0159  
                    ?_EUSART_Initialize 0070                            __pstringtext 07DA  
                            _testLength 00A0           ??_test_IntToStr_Int32PerfTest 007C  
         ??_test_IntToStr_Int16PerfTest 007C                     ??_EUSART_Initialize 0070  
                      __CFG_FOSC$INTOSC 0000                          _TMR1_ReadTimer 01B9  
                __end_of_FAST_UintToStr 0639               __end_of_EUSART_Initialize 01AA  
    __end_of_test_IntToStr_Int8PerfTest 0173              _test_IntToStr_Int8PerfTest 016A  
                        _TMR1_StopTimer 00BA                  ?_OSCILLATOR_Initialize 0070  
                __end_of_TMR1_ReadTimer 01C4                     start_initialization 001C  
       __size_of_PIN_MANAGER_Initialize 0034    __size_of_test_IntToStr_Int16PerfTest 0009  
  __size_of_test_IntToStr_Int32PerfTest 0008                         ?_FAST_UintToStr 0070  
                       ___llmod@divisor 004A                         ___llmod@counter 007D  
              __size_of_TMR1_Initialize 000D                  __size_of_FAST_IntToStr 001E  
                __end_of_TMR1_StopTimer 00BD                _TEST_ASSERT_EQUAL_STRING 0158  
                     FAST_UintToStr@num 0070                       FAST_UintToStr@str 0075  
                       ?_TMR1_ReadTimer 0070             __end_of_EUSART_Transmit_ISR 064F  
                             ___latbits 0002                           __pcstackBANK0 004A  
            __end_of_EUSART_Receive_ISR 0664              __size_of_EUSART_Initialize 0016  
                           sprintf@flag 0061                             sprintf@prec 005E  
                             __pnvBANK0 0068                  _PIN_MANAGER_Initialize 0086  
                              ?___lldiv 0070                                ?___llmod 004A  
                          _eusartRxHead 0029                         ?_TMR1_StopTimer 0070  
                          _eusartTxTail 002A            ??_INTERRUPT_InterruptManager 0070  
       ??_test_UintToStr_Uint32PerfTest 007B         ??_test_UintToStr_Uint16PerfTest 007B  
                             __pswtext1 0700                 _eusartTxBufferRemaining 006A  
                              _BAUD1CON 019F                __size_of_TMR1_StartTimer 0002  
                __size_of_TEST_TearDown 000D                           _FAST_IntToStr 013A  
                              ?_sprintf 0052                          _eusartRxBuffer 00DC  
                        _eusartTxBuffer 0020             ?_test_sprintf_Int32PerfTest 0070  
                             clear_ram0 0664                                _PIE1bits 0090  
              __size_of_TMR1_WriteTimer 000E     __size_of_INTERRUPT_InterruptManager 0016  
                              _PIR1bits 0010                               _testCount 002B  
                  __CFG_WDTCPS$WDTCPS1F 0000                       ??_TMR1_Initialize 0070  
                __size_of_test_IntToStr 006F                          ?_FAST_IntToStr 004A  
                         _TEST_TearDown 006D                   TMR1_ReadTimer@readVal 0072  
                      FAST_UintToStr@ch 0076                 ??_OSCILLATOR_Initialize 0070  
                      __size_of___lldiv 003F                        __size_of___llmod 0036  
           ?_test_IntToStr_Int8PerfTest 0070                              sprintf@val 0062  
 __end_of_test_UintToStr_Uint16PerfTest 017A  __size_of_test_UintToStr_Uint16PerfTest 0007  
 __end_of_test_UintToStr_Uint32PerfTest 0181  __size_of_test_UintToStr_Uint32PerfTest 0007  
         _test_UintToStr_Uint32PerfTest 017A           _test_UintToStr_Uint16PerfTest 0173  
                      ??_FAST_UintToStr 0074                                __ptext10 0159  
                              __ptext11 00CB                                __ptext20 007A  
                              __ptext12 0158                                __ptext21 01AA  
                              __ptext13 013A                                __ptext22 01B7  
                              __ptext14 031E                                __ptext23 0086  
                              __ptext15 006D                                __ptext24 0081  
                              __ptext16 01B9                                __ptext25 0194  
                              __ptext17 0063                                __ptext18 00BD  
                              __ptext27 0639                                __ptext19 00BA  
                              __ptext28 064F                       ??_TMR1_StartTimer 0070  
                      __size_of_sprintf 00E5                           _test_IntToStr 00CB  
                         __size_of_main 0034              ??_TEST_ASSERT_EQUAL_STRING 0073  
                        ?_TEST_TearDown 0070                    __CFG_WDTCWS$WDTCWSSW 0000  
                            _RC1STAbits 019D     __end_of_test_IntToStr_Int16PerfTest 0162  
   __end_of_test_IntToStr_Int32PerfTest 016A             _test_IntToStr_Int32PerfTest 0162  
           _test_IntToStr_Int16PerfTest 0159                        ??_TMR1_ReadTimer 0072  
                              int$flags 007E      __end_of_INTERRUPT_InterruptManager 001A  
            _INTERRUPT_InterruptManager 0004                       ??_TMR1_WriteTimer 0072  
           PIN_MANAGER_Initialize@state 0070                    FAST_UintToStr@leedIn 0074  
                       ??_FAST_IntToStr 007B                                intlevel1 0000  
                             sprintf@ap 0060                               sprintf@sp 0066  
                        ?_test_IntToStr 0070                        ___lldiv@dividend 0074  
               ?_PIN_MANAGER_Initialize 0070                       __CFG_CLKOUTEN$OFF 0000  
                           _PPSLOCKbits 0E0F                        ??_TMR1_StopTimer 0070  
                    _EUSART_Receive_ISR 064F                                sprintf@c 0067  
                              sprintf@f 0052                     ?_EUSART_Receive_ISR 0070  
                      ___lldiv@quotient 0078                              _TEST_SetUp 0063  
          __size_of_EUSART_Transmit_ISR 0016          ?_test_UintToStr_Uint32PerfTest 0070  
        ?_test_UintToStr_Uint16PerfTest 0070          __end_of_PIN_MANAGER_Initialize 00BA  
                       ??_TEST_TearDown 0074                    ??_EUSART_Receive_ISR 0070  
                       _TMR1_Initialize 01AA  
